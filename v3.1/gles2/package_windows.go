// Code generated by glow (https://github.com/neclepsio/glow). DO NOT EDIT.

package gles2

import (
	"errors"
	"math"
	"syscall"
	"unsafe"
)

var (
	gpAcquireKeyedMutexWin32EXT                      uintptr
	gpActiveProgramEXT                               uintptr
	gpActiveShaderProgram                            uintptr
	gpActiveShaderProgramEXT                         uintptr
	gpActiveTexture                                  uintptr
	gpAlphaFuncQCOM                                  uintptr
	gpApplyFramebufferAttachmentCMAAINTEL            uintptr
	gpAttachShader                                   uintptr
	gpBeginConditionalRenderNV                       uintptr
	gpBeginPerfMonitorAMD                            uintptr
	gpBeginPerfQueryINTEL                            uintptr
	gpBeginQuery                                     uintptr
	gpBeginQueryEXT                                  uintptr
	gpBeginTransformFeedback                         uintptr
	gpBindAttribLocation                             uintptr
	gpBindBuffer                                     uintptr
	gpBindBufferBase                                 uintptr
	gpBindBufferRange                                uintptr
	gpBindFragDataLocationEXT                        uintptr
	gpBindFragDataLocationIndexedEXT                 uintptr
	gpBindFramebuffer                                uintptr
	gpBindImageTexture                               uintptr
	gpBindProgramPipeline                            uintptr
	gpBindProgramPipelineEXT                         uintptr
	gpBindRenderbuffer                               uintptr
	gpBindSampler                                    uintptr
	gpBindShadingRateImageNV                         uintptr
	gpBindTexture                                    uintptr
	gpBindTransformFeedback                          uintptr
	gpBindVertexArray                                uintptr
	gpBindVertexArrayOES                             uintptr
	gpBindVertexBuffer                               uintptr
	gpBlendBarrierKHR                                uintptr
	gpBlendBarrierNV                                 uintptr
	gpBlendColor                                     uintptr
	gpBlendEquation                                  uintptr
	gpBlendEquationEXT                               uintptr
	gpBlendEquationSeparate                          uintptr
	gpBlendEquationSeparateiEXT                      uintptr
	gpBlendEquationSeparateiOES                      uintptr
	gpBlendEquationiEXT                              uintptr
	gpBlendEquationiOES                              uintptr
	gpBlendFunc                                      uintptr
	gpBlendFuncSeparate                              uintptr
	gpBlendFuncSeparateiEXT                          uintptr
	gpBlendFuncSeparateiOES                          uintptr
	gpBlendFunciEXT                                  uintptr
	gpBlendFunciOES                                  uintptr
	gpBlendParameteriNV                              uintptr
	gpBlitFramebuffer                                uintptr
	gpBlitFramebufferANGLE                           uintptr
	gpBlitFramebufferNV                              uintptr
	gpBufferAttachMemoryNV                           uintptr
	gpBufferData                                     uintptr
	gpBufferStorageEXT                               uintptr
	gpBufferStorageExternalEXT                       uintptr
	gpBufferStorageMemEXT                            uintptr
	gpBufferSubData                                  uintptr
	gpCheckFramebufferStatus                         uintptr
	gpClear                                          uintptr
	gpClearBufferfi                                  uintptr
	gpClearBufferfv                                  uintptr
	gpClearBufferiv                                  uintptr
	gpClearBufferuiv                                 uintptr
	gpClearColor                                     uintptr
	gpClearDepthf                                    uintptr
	gpClearPixelLocalStorageuiEXT                    uintptr
	gpClearStencil                                   uintptr
	gpClearTexImageEXT                               uintptr
	gpClearTexSubImageEXT                            uintptr
	gpClientWaitSync                                 uintptr
	gpClientWaitSyncAPPLE                            uintptr
	gpClipControlEXT                                 uintptr
	gpColorMask                                      uintptr
	gpColorMaskiEXT                                  uintptr
	gpColorMaskiOES                                  uintptr
	gpCompileShader                                  uintptr
	gpCompressedTexImage2D                           uintptr
	gpCompressedTexImage3D                           uintptr
	gpCompressedTexImage3DOES                        uintptr
	gpCompressedTexSubImage2D                        uintptr
	gpCompressedTexSubImage3D                        uintptr
	gpCompressedTexSubImage3DOES                     uintptr
	gpConservativeRasterParameteriNV                 uintptr
	gpCopyBufferSubData                              uintptr
	gpCopyBufferSubDataNV                            uintptr
	gpCopyImageSubDataEXT                            uintptr
	gpCopyImageSubDataOES                            uintptr
	gpCopyPathNV                                     uintptr
	gpCopyTexImage2D                                 uintptr
	gpCopyTexSubImage2D                              uintptr
	gpCopyTexSubImage3D                              uintptr
	gpCopyTexSubImage3DOES                           uintptr
	gpCopyTextureLevelsAPPLE                         uintptr
	gpCoverFillPathInstancedNV                       uintptr
	gpCoverFillPathNV                                uintptr
	gpCoverStrokePathInstancedNV                     uintptr
	gpCoverStrokePathNV                              uintptr
	gpCoverageMaskNV                                 uintptr
	gpCoverageModulationNV                           uintptr
	gpCoverageModulationTableNV                      uintptr
	gpCoverageOperationNV                            uintptr
	gpCreateMemoryObjectsEXT                         uintptr
	gpCreatePerfQueryINTEL                           uintptr
	gpCreateProgram                                  uintptr
	gpCreateShader                                   uintptr
	gpCreateShaderProgramEXT                         uintptr
	gpCreateShaderProgramv                           uintptr
	gpCreateShaderProgramvEXT                        uintptr
	gpCullFace                                       uintptr
	gpDebugMessageCallback                           uintptr
	gpDebugMessageCallbackKHR                        uintptr
	gpDebugMessageControl                            uintptr
	gpDebugMessageControlKHR                         uintptr
	gpDebugMessageInsert                             uintptr
	gpDebugMessageInsertKHR                          uintptr
	gpDeleteBuffers                                  uintptr
	gpDeleteFencesNV                                 uintptr
	gpDeleteFramebuffers                             uintptr
	gpDeleteMemoryObjectsEXT                         uintptr
	gpDeletePathsNV                                  uintptr
	gpDeletePerfMonitorsAMD                          uintptr
	gpDeletePerfQueryINTEL                           uintptr
	gpDeleteProgram                                  uintptr
	gpDeleteProgramPipelines                         uintptr
	gpDeleteProgramPipelinesEXT                      uintptr
	gpDeleteQueries                                  uintptr
	gpDeleteQueriesEXT                               uintptr
	gpDeleteRenderbuffers                            uintptr
	gpDeleteSamplers                                 uintptr
	gpDeleteSemaphoresEXT                            uintptr
	gpDeleteShader                                   uintptr
	gpDeleteSync                                     uintptr
	gpDeleteSyncAPPLE                                uintptr
	gpDeleteTextures                                 uintptr
	gpDeleteTransformFeedbacks                       uintptr
	gpDeleteVertexArrays                             uintptr
	gpDeleteVertexArraysOES                          uintptr
	gpDepthFunc                                      uintptr
	gpDepthMask                                      uintptr
	gpDepthRangeArrayfvNV                            uintptr
	gpDepthRangeArrayfvOES                           uintptr
	gpDepthRangeIndexedfNV                           uintptr
	gpDepthRangeIndexedfOES                          uintptr
	gpDepthRangef                                    uintptr
	gpDetachShader                                   uintptr
	gpDisable                                        uintptr
	gpDisableDriverControlQCOM                       uintptr
	gpDisableVertexAttribArray                       uintptr
	gpDisableiEXT                                    uintptr
	gpDisableiNV                                     uintptr
	gpDisableiOES                                    uintptr
	gpDiscardFramebufferEXT                          uintptr
	gpDispatchCompute                                uintptr
	gpDispatchComputeIndirect                        uintptr
	gpDrawArrays                                     uintptr
	gpDrawArraysIndirect                             uintptr
	gpDrawArraysInstanced                            uintptr
	gpDrawArraysInstancedANGLE                       uintptr
	gpDrawArraysInstancedBaseInstanceEXT             uintptr
	gpDrawArraysInstancedEXT                         uintptr
	gpDrawArraysInstancedNV                          uintptr
	gpDrawBuffers                                    uintptr
	gpDrawBuffersEXT                                 uintptr
	gpDrawBuffersIndexedEXT                          uintptr
	gpDrawBuffersNV                                  uintptr
	gpDrawElements                                   uintptr
	gpDrawElementsBaseVertexEXT                      uintptr
	gpDrawElementsBaseVertexOES                      uintptr
	gpDrawElementsIndirect                           uintptr
	gpDrawElementsInstanced                          uintptr
	gpDrawElementsInstancedANGLE                     uintptr
	gpDrawElementsInstancedBaseInstanceEXT           uintptr
	gpDrawElementsInstancedBaseVertexBaseInstanceEXT uintptr
	gpDrawElementsInstancedBaseVertexEXT             uintptr
	gpDrawElementsInstancedBaseVertexOES             uintptr
	gpDrawElementsInstancedEXT                       uintptr
	gpDrawElementsInstancedNV                        uintptr
	gpDrawMeshTasksIndirectNV                        uintptr
	gpDrawMeshTasksNV                                uintptr
	gpDrawRangeElements                              uintptr
	gpDrawRangeElementsBaseVertexEXT                 uintptr
	gpDrawRangeElementsBaseVertexOES                 uintptr
	gpDrawTransformFeedbackEXT                       uintptr
	gpDrawTransformFeedbackInstancedEXT              uintptr
	gpDrawVkImageNV                                  uintptr
	gpEGLImageTargetRenderbufferStorageOES           uintptr
	gpEGLImageTargetTexStorageEXT                    uintptr
	gpEGLImageTargetTexture2DOES                     uintptr
	gpEGLImageTargetTextureStorageEXT                uintptr
	gpEnable                                         uintptr
	gpEnableDriverControlQCOM                        uintptr
	gpEnableVertexAttribArray                        uintptr
	gpEnableiEXT                                     uintptr
	gpEnableiNV                                      uintptr
	gpEnableiOES                                     uintptr
	gpEndConditionalRenderNV                         uintptr
	gpEndPerfMonitorAMD                              uintptr
	gpEndPerfQueryINTEL                              uintptr
	gpEndQuery                                       uintptr
	gpEndQueryEXT                                    uintptr
	gpEndTilingQCOM                                  uintptr
	gpEndTransformFeedback                           uintptr
	gpExtGetBufferPointervQCOM                       uintptr
	gpExtGetBuffersQCOM                              uintptr
	gpExtGetFramebuffersQCOM                         uintptr
	gpExtGetProgramBinarySourceQCOM                  uintptr
	gpExtGetProgramsQCOM                             uintptr
	gpExtGetRenderbuffersQCOM                        uintptr
	gpExtGetShadersQCOM                              uintptr
	gpExtGetTexLevelParameterivQCOM                  uintptr
	gpExtGetTexSubImageQCOM                          uintptr
	gpExtGetTexturesQCOM                             uintptr
	gpExtIsProgramBinaryQCOM                         uintptr
	gpExtTexObjectStateOverrideiQCOM                 uintptr
	gpFenceSync                                      uintptr
	gpFenceSyncAPPLE                                 uintptr
	gpFinish                                         uintptr
	gpFinishFenceNV                                  uintptr
	gpFlush                                          uintptr
	gpFlushMappedBufferRange                         uintptr
	gpFlushMappedBufferRangeEXT                      uintptr
	gpFragmentCoverageColorNV                        uintptr
	gpFramebufferFetchBarrierEXT                     uintptr
	gpFramebufferFetchBarrierQCOM                    uintptr
	gpFramebufferFoveationConfigQCOM                 uintptr
	gpFramebufferFoveationParametersQCOM             uintptr
	gpFramebufferParameteri                          uintptr
	gpFramebufferPixelLocalStorageSizeEXT            uintptr
	gpFramebufferRenderbuffer                        uintptr
	gpFramebufferSampleLocationsfvNV                 uintptr
	gpFramebufferTexture2D                           uintptr
	gpFramebufferTexture2DDownsampleIMG              uintptr
	gpFramebufferTexture2DMultisampleEXT             uintptr
	gpFramebufferTexture2DMultisampleIMG             uintptr
	gpFramebufferTexture3DOES                        uintptr
	gpFramebufferTextureEXT                          uintptr
	gpFramebufferTextureLayer                        uintptr
	gpFramebufferTextureLayerDownsampleIMG           uintptr
	gpFramebufferTextureMultisampleMultiviewOVR      uintptr
	gpFramebufferTextureMultiviewOVR                 uintptr
	gpFramebufferTextureOES                          uintptr
	gpFrontFace                                      uintptr
	gpGenBuffers                                     uintptr
	gpGenFencesNV                                    uintptr
	gpGenFramebuffers                                uintptr
	gpGenPathsNV                                     uintptr
	gpGenPerfMonitorsAMD                             uintptr
	gpGenProgramPipelines                            uintptr
	gpGenProgramPipelinesEXT                         uintptr
	gpGenQueries                                     uintptr
	gpGenQueriesEXT                                  uintptr
	gpGenRenderbuffers                               uintptr
	gpGenSamplers                                    uintptr
	gpGenSemaphoresEXT                               uintptr
	gpGenTextures                                    uintptr
	gpGenTransformFeedbacks                          uintptr
	gpGenVertexArrays                                uintptr
	gpGenVertexArraysOES                             uintptr
	gpGenerateMipmap                                 uintptr
	gpGetActiveAttrib                                uintptr
	gpGetActiveUniform                               uintptr
	gpGetActiveUniformBlockName                      uintptr
	gpGetActiveUniformBlockiv                        uintptr
	gpGetActiveUniformsiv                            uintptr
	gpGetAttachedShaders                             uintptr
	gpGetAttribLocation                              uintptr
	gpGetBooleani_v                                  uintptr
	gpGetBooleanv                                    uintptr
	gpGetBufferParameteri64v                         uintptr
	gpGetBufferParameteriv                           uintptr
	gpGetBufferPointerv                              uintptr
	gpGetBufferPointervOES                           uintptr
	gpGetCoverageModulationTableNV                   uintptr
	gpGetDebugMessageLog                             uintptr
	gpGetDebugMessageLogKHR                          uintptr
	gpGetDriverControlStringQCOM                     uintptr
	gpGetDriverControlsQCOM                          uintptr
	gpGetError                                       uintptr
	gpGetFenceivNV                                   uintptr
	gpGetFirstPerfQueryIdINTEL                       uintptr
	gpGetFloati_vNV                                  uintptr
	gpGetFloati_vOES                                 uintptr
	gpGetFloatv                                      uintptr
	gpGetFragDataIndexEXT                            uintptr
	gpGetFragDataLocation                            uintptr
	gpGetFramebufferAttachmentParameteriv            uintptr
	gpGetFramebufferParameteriv                      uintptr
	gpGetFramebufferPixelLocalStorageSizeEXT         uintptr
	gpGetGraphicsResetStatus                         uintptr
	gpGetGraphicsResetStatusEXT                      uintptr
	gpGetGraphicsResetStatusKHR                      uintptr
	gpGetImageHandleNV                               uintptr
	gpGetInteger64i_v                                uintptr
	gpGetInteger64v                                  uintptr
	gpGetInteger64vAPPLE                             uintptr
	gpGetIntegeri_v                                  uintptr
	gpGetIntegeri_vEXT                               uintptr
	gpGetIntegerv                                    uintptr
	gpGetInternalformatSampleivNV                    uintptr
	gpGetInternalformativ                            uintptr
	gpGetMemoryObjectDetachedResourcesuivNV          uintptr
	gpGetMemoryObjectParameterivEXT                  uintptr
	gpGetMultisamplefv                               uintptr
	gpGetNextPerfQueryIdINTEL                        uintptr
	gpGetObjectLabel                                 uintptr
	gpGetObjectLabelEXT                              uintptr
	gpGetObjectLabelKHR                              uintptr
	gpGetObjectPtrLabel                              uintptr
	gpGetObjectPtrLabelKHR                           uintptr
	gpGetPathCommandsNV                              uintptr
	gpGetPathCoordsNV                                uintptr
	gpGetPathDashArrayNV                             uintptr
	gpGetPathLengthNV                                uintptr
	gpGetPathMetricRangeNV                           uintptr
	gpGetPathMetricsNV                               uintptr
	gpGetPathParameterfvNV                           uintptr
	gpGetPathParameterivNV                           uintptr
	gpGetPathSpacingNV                               uintptr
	gpGetPerfCounterInfoINTEL                        uintptr
	gpGetPerfMonitorCounterDataAMD                   uintptr
	gpGetPerfMonitorCounterInfoAMD                   uintptr
	gpGetPerfMonitorCounterStringAMD                 uintptr
	gpGetPerfMonitorCountersAMD                      uintptr
	gpGetPerfMonitorGroupStringAMD                   uintptr
	gpGetPerfMonitorGroupsAMD                        uintptr
	gpGetPerfQueryDataINTEL                          uintptr
	gpGetPerfQueryIdByNameINTEL                      uintptr
	gpGetPerfQueryInfoINTEL                          uintptr
	gpGetPointerv                                    uintptr
	gpGetPointervKHR                                 uintptr
	gpGetProgramBinary                               uintptr
	gpGetProgramBinaryOES                            uintptr
	gpGetProgramInfoLog                              uintptr
	gpGetProgramInterfaceiv                          uintptr
	gpGetProgramPipelineInfoLog                      uintptr
	gpGetProgramPipelineInfoLogEXT                   uintptr
	gpGetProgramPipelineiv                           uintptr
	gpGetProgramPipelineivEXT                        uintptr
	gpGetProgramResourceIndex                        uintptr
	gpGetProgramResourceLocation                     uintptr
	gpGetProgramResourceLocationIndexEXT             uintptr
	gpGetProgramResourceName                         uintptr
	gpGetProgramResourcefvNV                         uintptr
	gpGetProgramResourceiv                           uintptr
	gpGetProgramiv                                   uintptr
	gpGetQueryObjecti64vEXT                          uintptr
	gpGetQueryObjectivEXT                            uintptr
	gpGetQueryObjectui64vEXT                         uintptr
	gpGetQueryObjectuiv                              uintptr
	gpGetQueryObjectuivEXT                           uintptr
	gpGetQueryiv                                     uintptr
	gpGetQueryivEXT                                  uintptr
	gpGetRenderbufferParameteriv                     uintptr
	gpGetSamplerParameterIivEXT                      uintptr
	gpGetSamplerParameterIivOES                      uintptr
	gpGetSamplerParameterIuivEXT                     uintptr
	gpGetSamplerParameterIuivOES                     uintptr
	gpGetSamplerParameterfv                          uintptr
	gpGetSamplerParameteriv                          uintptr
	gpGetSemaphoreParameterui64vEXT                  uintptr
	gpGetShaderInfoLog                               uintptr
	gpGetShaderPrecisionFormat                       uintptr
	gpGetShaderSource                                uintptr
	gpGetShaderiv                                    uintptr
	gpGetShadingRateImagePaletteNV                   uintptr
	gpGetShadingRateSampleLocationivNV               uintptr
	gpGetString                                      uintptr
	gpGetStringi                                     uintptr
	gpGetSynciv                                      uintptr
	gpGetSyncivAPPLE                                 uintptr
	gpGetTexLevelParameterfv                         uintptr
	gpGetTexLevelParameteriv                         uintptr
	gpGetTexParameterIivEXT                          uintptr
	gpGetTexParameterIivOES                          uintptr
	gpGetTexParameterIuivEXT                         uintptr
	gpGetTexParameterIuivOES                         uintptr
	gpGetTexParameterfv                              uintptr
	gpGetTexParameteriv                              uintptr
	gpGetTextureHandleIMG                            uintptr
	gpGetTextureHandleNV                             uintptr
	gpGetTextureSamplerHandleIMG                     uintptr
	gpGetTextureSamplerHandleNV                      uintptr
	gpGetTransformFeedbackVarying                    uintptr
	gpGetTranslatedShaderSourceANGLE                 uintptr
	gpGetUniformBlockIndex                           uintptr
	gpGetUniformIndices                              uintptr
	gpGetUniformLocation                             uintptr
	gpGetUniformfv                                   uintptr
	gpGetUniformi64vNV                               uintptr
	gpGetUniformiv                                   uintptr
	gpGetUniformuiv                                  uintptr
	gpGetUnsignedBytei_vEXT                          uintptr
	gpGetUnsignedBytevEXT                            uintptr
	gpGetVertexAttribIiv                             uintptr
	gpGetVertexAttribIuiv                            uintptr
	gpGetVertexAttribPointerv                        uintptr
	gpGetVertexAttribfv                              uintptr
	gpGetVertexAttribiv                              uintptr
	gpGetVkProcAddrNV                                uintptr
	gpGetnUniformfv                                  uintptr
	gpGetnUniformfvEXT                               uintptr
	gpGetnUniformfvKHR                               uintptr
	gpGetnUniformiv                                  uintptr
	gpGetnUniformivEXT                               uintptr
	gpGetnUniformivKHR                               uintptr
	gpGetnUniformuiv                                 uintptr
	gpGetnUniformuivKHR                              uintptr
	gpHint                                           uintptr
	gpImportMemoryFdEXT                              uintptr
	gpImportMemoryWin32HandleEXT                     uintptr
	gpImportMemoryWin32NameEXT                       uintptr
	gpImportSemaphoreFdEXT                           uintptr
	gpImportSemaphoreWin32HandleEXT                  uintptr
	gpImportSemaphoreWin32NameEXT                    uintptr
	gpInsertEventMarkerEXT                           uintptr
	gpInterpolatePathsNV                             uintptr
	gpInvalidateFramebuffer                          uintptr
	gpInvalidateSubFramebuffer                       uintptr
	gpIsBuffer                                       uintptr
	gpIsEnabled                                      uintptr
	gpIsEnablediEXT                                  uintptr
	gpIsEnablediNV                                   uintptr
	gpIsEnablediOES                                  uintptr
	gpIsFenceNV                                      uintptr
	gpIsFramebuffer                                  uintptr
	gpIsImageHandleResidentNV                        uintptr
	gpIsMemoryObjectEXT                              uintptr
	gpIsPathNV                                       uintptr
	gpIsPointInFillPathNV                            uintptr
	gpIsPointInStrokePathNV                          uintptr
	gpIsProgram                                      uintptr
	gpIsProgramPipeline                              uintptr
	gpIsProgramPipelineEXT                           uintptr
	gpIsQuery                                        uintptr
	gpIsQueryEXT                                     uintptr
	gpIsRenderbuffer                                 uintptr
	gpIsSampler                                      uintptr
	gpIsSemaphoreEXT                                 uintptr
	gpIsShader                                       uintptr
	gpIsSync                                         uintptr
	gpIsSyncAPPLE                                    uintptr
	gpIsTexture                                      uintptr
	gpIsTextureHandleResidentNV                      uintptr
	gpIsTransformFeedback                            uintptr
	gpIsVertexArray                                  uintptr
	gpIsVertexArrayOES                               uintptr
	gpLabelObjectEXT                                 uintptr
	gpLineWidth                                      uintptr
	gpLinkProgram                                    uintptr
	gpMakeImageHandleNonResidentNV                   uintptr
	gpMakeImageHandleResidentNV                      uintptr
	gpMakeTextureHandleNonResidentNV                 uintptr
	gpMakeTextureHandleResidentNV                    uintptr
	gpMapBufferOES                                   uintptr
	gpMapBufferRange                                 uintptr
	gpMapBufferRangeEXT                              uintptr
	gpMatrixFrustumEXT                               uintptr
	gpMatrixLoad3x2fNV                               uintptr
	gpMatrixLoad3x3fNV                               uintptr
	gpMatrixLoadIdentityEXT                          uintptr
	gpMatrixLoadTranspose3x3fNV                      uintptr
	gpMatrixLoadTransposedEXT                        uintptr
	gpMatrixLoadTransposefEXT                        uintptr
	gpMatrixLoaddEXT                                 uintptr
	gpMatrixLoadfEXT                                 uintptr
	gpMatrixMult3x2fNV                               uintptr
	gpMatrixMult3x3fNV                               uintptr
	gpMatrixMultTranspose3x3fNV                      uintptr
	gpMatrixMultTransposedEXT                        uintptr
	gpMatrixMultTransposefEXT                        uintptr
	gpMatrixMultdEXT                                 uintptr
	gpMatrixMultfEXT                                 uintptr
	gpMatrixOrthoEXT                                 uintptr
	gpMatrixPopEXT                                   uintptr
	gpMatrixPushEXT                                  uintptr
	gpMatrixRotatedEXT                               uintptr
	gpMatrixRotatefEXT                               uintptr
	gpMatrixScaledEXT                                uintptr
	gpMatrixScalefEXT                                uintptr
	gpMatrixTranslatedEXT                            uintptr
	gpMatrixTranslatefEXT                            uintptr
	gpMaxShaderCompilerThreadsKHR                    uintptr
	gpMemoryBarrier                                  uintptr
	gpMemoryBarrierByRegion                          uintptr
	gpMemoryObjectParameterivEXT                     uintptr
	gpMinSampleShadingOES                            uintptr
	gpMultiDrawArraysEXT                             uintptr
	gpMultiDrawArraysIndirectEXT                     uintptr
	gpMultiDrawElementsBaseVertexEXT                 uintptr
	gpMultiDrawElementsEXT                           uintptr
	gpMultiDrawElementsIndirectEXT                   uintptr
	gpMultiDrawMeshTasksIndirectCountNV              uintptr
	gpMultiDrawMeshTasksIndirectNV                   uintptr
	gpNamedBufferAttachMemoryNV                      uintptr
	gpNamedBufferStorageExternalEXT                  uintptr
	gpNamedBufferStorageMemEXT                       uintptr
	gpNamedFramebufferSampleLocationsfvNV            uintptr
	gpNamedRenderbufferStorageMultisampleAdvancedAMD uintptr
	gpObjectLabel                                    uintptr
	gpObjectLabelKHR                                 uintptr
	gpObjectPtrLabel                                 uintptr
	gpObjectPtrLabelKHR                              uintptr
	gpPatchParameteriEXT                             uintptr
	gpPatchParameteriOES                             uintptr
	gpPathCommandsNV                                 uintptr
	gpPathCoordsNV                                   uintptr
	gpPathCoverDepthFuncNV                           uintptr
	gpPathDashArrayNV                                uintptr
	gpPathGlyphIndexArrayNV                          uintptr
	gpPathGlyphIndexRangeNV                          uintptr
	gpPathGlyphRangeNV                               uintptr
	gpPathGlyphsNV                                   uintptr
	gpPathMemoryGlyphIndexArrayNV                    uintptr
	gpPathParameterfNV                               uintptr
	gpPathParameterfvNV                              uintptr
	gpPathParameteriNV                               uintptr
	gpPathParameterivNV                              uintptr
	gpPathStencilDepthOffsetNV                       uintptr
	gpPathStencilFuncNV                              uintptr
	gpPathStringNV                                   uintptr
	gpPathSubCommandsNV                              uintptr
	gpPathSubCoordsNV                                uintptr
	gpPauseTransformFeedback                         uintptr
	gpPixelStorei                                    uintptr
	gpPointAlongPathNV                               uintptr
	gpPolygonModeNV                                  uintptr
	gpPolygonOffset                                  uintptr
	gpPolygonOffsetClampEXT                          uintptr
	gpPopDebugGroup                                  uintptr
	gpPopDebugGroupKHR                               uintptr
	gpPopGroupMarkerEXT                              uintptr
	gpPrimitiveBoundingBoxEXT                        uintptr
	gpPrimitiveBoundingBoxOES                        uintptr
	gpProgramBinary                                  uintptr
	gpProgramBinaryOES                               uintptr
	gpProgramParameteri                              uintptr
	gpProgramParameteriEXT                           uintptr
	gpProgramPathFragmentInputGenNV                  uintptr
	gpProgramUniform1f                               uintptr
	gpProgramUniform1fEXT                            uintptr
	gpProgramUniform1fv                              uintptr
	gpProgramUniform1fvEXT                           uintptr
	gpProgramUniform1i                               uintptr
	gpProgramUniform1i64NV                           uintptr
	gpProgramUniform1i64vNV                          uintptr
	gpProgramUniform1iEXT                            uintptr
	gpProgramUniform1iv                              uintptr
	gpProgramUniform1ivEXT                           uintptr
	gpProgramUniform1ui                              uintptr
	gpProgramUniform1ui64NV                          uintptr
	gpProgramUniform1ui64vNV                         uintptr
	gpProgramUniform1uiEXT                           uintptr
	gpProgramUniform1uiv                             uintptr
	gpProgramUniform1uivEXT                          uintptr
	gpProgramUniform2f                               uintptr
	gpProgramUniform2fEXT                            uintptr
	gpProgramUniform2fv                              uintptr
	gpProgramUniform2fvEXT                           uintptr
	gpProgramUniform2i                               uintptr
	gpProgramUniform2i64NV                           uintptr
	gpProgramUniform2i64vNV                          uintptr
	gpProgramUniform2iEXT                            uintptr
	gpProgramUniform2iv                              uintptr
	gpProgramUniform2ivEXT                           uintptr
	gpProgramUniform2ui                              uintptr
	gpProgramUniform2ui64NV                          uintptr
	gpProgramUniform2ui64vNV                         uintptr
	gpProgramUniform2uiEXT                           uintptr
	gpProgramUniform2uiv                             uintptr
	gpProgramUniform2uivEXT                          uintptr
	gpProgramUniform3f                               uintptr
	gpProgramUniform3fEXT                            uintptr
	gpProgramUniform3fv                              uintptr
	gpProgramUniform3fvEXT                           uintptr
	gpProgramUniform3i                               uintptr
	gpProgramUniform3i64NV                           uintptr
	gpProgramUniform3i64vNV                          uintptr
	gpProgramUniform3iEXT                            uintptr
	gpProgramUniform3iv                              uintptr
	gpProgramUniform3ivEXT                           uintptr
	gpProgramUniform3ui                              uintptr
	gpProgramUniform3ui64NV                          uintptr
	gpProgramUniform3ui64vNV                         uintptr
	gpProgramUniform3uiEXT                           uintptr
	gpProgramUniform3uiv                             uintptr
	gpProgramUniform3uivEXT                          uintptr
	gpProgramUniform4f                               uintptr
	gpProgramUniform4fEXT                            uintptr
	gpProgramUniform4fv                              uintptr
	gpProgramUniform4fvEXT                           uintptr
	gpProgramUniform4i                               uintptr
	gpProgramUniform4i64NV                           uintptr
	gpProgramUniform4i64vNV                          uintptr
	gpProgramUniform4iEXT                            uintptr
	gpProgramUniform4iv                              uintptr
	gpProgramUniform4ivEXT                           uintptr
	gpProgramUniform4ui                              uintptr
	gpProgramUniform4ui64NV                          uintptr
	gpProgramUniform4ui64vNV                         uintptr
	gpProgramUniform4uiEXT                           uintptr
	gpProgramUniform4uiv                             uintptr
	gpProgramUniform4uivEXT                          uintptr
	gpProgramUniformHandleui64IMG                    uintptr
	gpProgramUniformHandleui64NV                     uintptr
	gpProgramUniformHandleui64vIMG                   uintptr
	gpProgramUniformHandleui64vNV                    uintptr
	gpProgramUniformMatrix2fv                        uintptr
	gpProgramUniformMatrix2fvEXT                     uintptr
	gpProgramUniformMatrix2x3fv                      uintptr
	gpProgramUniformMatrix2x3fvEXT                   uintptr
	gpProgramUniformMatrix2x4fv                      uintptr
	gpProgramUniformMatrix2x4fvEXT                   uintptr
	gpProgramUniformMatrix3fv                        uintptr
	gpProgramUniformMatrix3fvEXT                     uintptr
	gpProgramUniformMatrix3x2fv                      uintptr
	gpProgramUniformMatrix3x2fvEXT                   uintptr
	gpProgramUniformMatrix3x4fv                      uintptr
	gpProgramUniformMatrix3x4fvEXT                   uintptr
	gpProgramUniformMatrix4fv                        uintptr
	gpProgramUniformMatrix4fvEXT                     uintptr
	gpProgramUniformMatrix4x2fv                      uintptr
	gpProgramUniformMatrix4x2fvEXT                   uintptr
	gpProgramUniformMatrix4x3fv                      uintptr
	gpProgramUniformMatrix4x3fvEXT                   uintptr
	gpPushDebugGroup                                 uintptr
	gpPushDebugGroupKHR                              uintptr
	gpPushGroupMarkerEXT                             uintptr
	gpQueryCounterEXT                                uintptr
	gpRasterSamplesEXT                               uintptr
	gpReadBuffer                                     uintptr
	gpReadBufferIndexedEXT                           uintptr
	gpReadBufferNV                                   uintptr
	gpReadPixels                                     uintptr
	gpReadnPixels                                    uintptr
	gpReadnPixelsEXT                                 uintptr
	gpReadnPixelsKHR                                 uintptr
	gpReleaseKeyedMutexWin32EXT                      uintptr
	gpReleaseShaderCompiler                          uintptr
	gpRenderbufferStorage                            uintptr
	gpRenderbufferStorageMultisample                 uintptr
	gpRenderbufferStorageMultisampleANGLE            uintptr
	gpRenderbufferStorageMultisampleAPPLE            uintptr
	gpRenderbufferStorageMultisampleAdvancedAMD      uintptr
	gpRenderbufferStorageMultisampleEXT              uintptr
	gpRenderbufferStorageMultisampleIMG              uintptr
	gpRenderbufferStorageMultisampleNV               uintptr
	gpResetMemoryObjectParameterNV                   uintptr
	gpResolveDepthValuesNV                           uintptr
	gpResolveMultisampleFramebufferAPPLE             uintptr
	gpResumeTransformFeedback                        uintptr
	gpSampleCoverage                                 uintptr
	gpSampleMaski                                    uintptr
	gpSamplerParameterIivEXT                         uintptr
	gpSamplerParameterIivOES                         uintptr
	gpSamplerParameterIuivEXT                        uintptr
	gpSamplerParameterIuivOES                        uintptr
	gpSamplerParameterf                              uintptr
	gpSamplerParameterfv                             uintptr
	gpSamplerParameteri                              uintptr
	gpSamplerParameteriv                             uintptr
	gpScissor                                        uintptr
	gpScissorArrayvNV                                uintptr
	gpScissorArrayvOES                               uintptr
	gpScissorExclusiveArrayvNV                       uintptr
	gpScissorExclusiveNV                             uintptr
	gpScissorIndexedNV                               uintptr
	gpScissorIndexedOES                              uintptr
	gpScissorIndexedvNV                              uintptr
	gpScissorIndexedvOES                             uintptr
	gpSelectPerfMonitorCountersAMD                   uintptr
	gpSemaphoreParameterui64vEXT                     uintptr
	gpSetFenceNV                                     uintptr
	gpShaderBinary                                   uintptr
	gpShaderSource                                   uintptr
	gpShadingRateImageBarrierNV                      uintptr
	gpShadingRateImagePaletteNV                      uintptr
	gpShadingRateSampleOrderCustomNV                 uintptr
	gpShadingRateSampleOrderNV                       uintptr
	gpSignalSemaphoreEXT                             uintptr
	gpSignalVkFenceNV                                uintptr
	gpSignalVkSemaphoreNV                            uintptr
	gpStartTilingQCOM                                uintptr
	gpStencilFillPathInstancedNV                     uintptr
	gpStencilFillPathNV                              uintptr
	gpStencilFunc                                    uintptr
	gpStencilFuncSeparate                            uintptr
	gpStencilMask                                    uintptr
	gpStencilMaskSeparate                            uintptr
	gpStencilOp                                      uintptr
	gpStencilOpSeparate                              uintptr
	gpStencilStrokePathInstancedNV                   uintptr
	gpStencilStrokePathNV                            uintptr
	gpStencilThenCoverFillPathInstancedNV            uintptr
	gpStencilThenCoverFillPathNV                     uintptr
	gpStencilThenCoverStrokePathInstancedNV          uintptr
	gpStencilThenCoverStrokePathNV                   uintptr
	gpSubpixelPrecisionBiasNV                        uintptr
	gpTestFenceNV                                    uintptr
	gpTexAttachMemoryNV                              uintptr
	gpTexBufferEXT                                   uintptr
	gpTexBufferOES                                   uintptr
	gpTexBufferRangeEXT                              uintptr
	gpTexBufferRangeOES                              uintptr
	gpTexImage2D                                     uintptr
	gpTexImage3D                                     uintptr
	gpTexImage3DOES                                  uintptr
	gpTexPageCommitmentEXT                           uintptr
	gpTexParameterIivEXT                             uintptr
	gpTexParameterIivOES                             uintptr
	gpTexParameterIuivEXT                            uintptr
	gpTexParameterIuivOES                            uintptr
	gpTexParameterf                                  uintptr
	gpTexParameterfv                                 uintptr
	gpTexParameteri                                  uintptr
	gpTexParameteriv                                 uintptr
	gpTexStorage1DEXT                                uintptr
	gpTexStorage2D                                   uintptr
	gpTexStorage2DEXT                                uintptr
	gpTexStorage2DMultisample                        uintptr
	gpTexStorage3D                                   uintptr
	gpTexStorage3DEXT                                uintptr
	gpTexStorage3DMultisampleOES                     uintptr
	gpTexStorageMem1DEXT                             uintptr
	gpTexStorageMem2DEXT                             uintptr
	gpTexStorageMem2DMultisampleEXT                  uintptr
	gpTexStorageMem3DEXT                             uintptr
	gpTexStorageMem3DMultisampleEXT                  uintptr
	gpTexSubImage2D                                  uintptr
	gpTexSubImage3D                                  uintptr
	gpTexSubImage3DOES                               uintptr
	gpTextureAttachMemoryNV                          uintptr
	gpTextureFoveationParametersQCOM                 uintptr
	gpTextureStorage1DEXT                            uintptr
	gpTextureStorage2DEXT                            uintptr
	gpTextureStorage3DEXT                            uintptr
	gpTextureStorageMem1DEXT                         uintptr
	gpTextureStorageMem2DEXT                         uintptr
	gpTextureStorageMem2DMultisampleEXT              uintptr
	gpTextureStorageMem3DEXT                         uintptr
	gpTextureStorageMem3DMultisampleEXT              uintptr
	gpTextureViewEXT                                 uintptr
	gpTextureViewOES                                 uintptr
	gpTransformFeedbackVaryings                      uintptr
	gpTransformPathNV                                uintptr
	gpUniform1f                                      uintptr
	gpUniform1fv                                     uintptr
	gpUniform1i                                      uintptr
	gpUniform1i64NV                                  uintptr
	gpUniform1i64vNV                                 uintptr
	gpUniform1iv                                     uintptr
	gpUniform1ui                                     uintptr
	gpUniform1ui64NV                                 uintptr
	gpUniform1ui64vNV                                uintptr
	gpUniform1uiv                                    uintptr
	gpUniform2f                                      uintptr
	gpUniform2fv                                     uintptr
	gpUniform2i                                      uintptr
	gpUniform2i64NV                                  uintptr
	gpUniform2i64vNV                                 uintptr
	gpUniform2iv                                     uintptr
	gpUniform2ui                                     uintptr
	gpUniform2ui64NV                                 uintptr
	gpUniform2ui64vNV                                uintptr
	gpUniform2uiv                                    uintptr
	gpUniform3f                                      uintptr
	gpUniform3fv                                     uintptr
	gpUniform3i                                      uintptr
	gpUniform3i64NV                                  uintptr
	gpUniform3i64vNV                                 uintptr
	gpUniform3iv                                     uintptr
	gpUniform3ui                                     uintptr
	gpUniform3ui64NV                                 uintptr
	gpUniform3ui64vNV                                uintptr
	gpUniform3uiv                                    uintptr
	gpUniform4f                                      uintptr
	gpUniform4fv                                     uintptr
	gpUniform4i                                      uintptr
	gpUniform4i64NV                                  uintptr
	gpUniform4i64vNV                                 uintptr
	gpUniform4iv                                     uintptr
	gpUniform4ui                                     uintptr
	gpUniform4ui64NV                                 uintptr
	gpUniform4ui64vNV                                uintptr
	gpUniform4uiv                                    uintptr
	gpUniformBlockBinding                            uintptr
	gpUniformHandleui64IMG                           uintptr
	gpUniformHandleui64NV                            uintptr
	gpUniformHandleui64vIMG                          uintptr
	gpUniformHandleui64vNV                           uintptr
	gpUniformMatrix2fv                               uintptr
	gpUniformMatrix2x3fv                             uintptr
	gpUniformMatrix2x3fvNV                           uintptr
	gpUniformMatrix2x4fv                             uintptr
	gpUniformMatrix2x4fvNV                           uintptr
	gpUniformMatrix3fv                               uintptr
	gpUniformMatrix3x2fv                             uintptr
	gpUniformMatrix3x2fvNV                           uintptr
	gpUniformMatrix3x4fv                             uintptr
	gpUniformMatrix3x4fvNV                           uintptr
	gpUniformMatrix4fv                               uintptr
	gpUniformMatrix4x2fv                             uintptr
	gpUniformMatrix4x2fvNV                           uintptr
	gpUniformMatrix4x3fv                             uintptr
	gpUniformMatrix4x3fvNV                           uintptr
	gpUnmapBuffer                                    uintptr
	gpUnmapBufferOES                                 uintptr
	gpUseProgram                                     uintptr
	gpUseProgramStages                               uintptr
	gpUseProgramStagesEXT                            uintptr
	gpUseShaderProgramEXT                            uintptr
	gpValidateProgram                                uintptr
	gpValidateProgramPipeline                        uintptr
	gpValidateProgramPipelineEXT                     uintptr
	gpVertexAttrib1f                                 uintptr
	gpVertexAttrib1fv                                uintptr
	gpVertexAttrib2f                                 uintptr
	gpVertexAttrib2fv                                uintptr
	gpVertexAttrib3f                                 uintptr
	gpVertexAttrib3fv                                uintptr
	gpVertexAttrib4f                                 uintptr
	gpVertexAttrib4fv                                uintptr
	gpVertexAttribBinding                            uintptr
	gpVertexAttribDivisor                            uintptr
	gpVertexAttribDivisorANGLE                       uintptr
	gpVertexAttribDivisorEXT                         uintptr
	gpVertexAttribDivisorNV                          uintptr
	gpVertexAttribFormat                             uintptr
	gpVertexAttribI4i                                uintptr
	gpVertexAttribI4iv                               uintptr
	gpVertexAttribI4ui                               uintptr
	gpVertexAttribI4uiv                              uintptr
	gpVertexAttribIFormat                            uintptr
	gpVertexAttribIPointer                           uintptr
	gpVertexAttribPointer                            uintptr
	gpVertexBindingDivisor                           uintptr
	gpViewport                                       uintptr
	gpViewportArrayvNV                               uintptr
	gpViewportArrayvOES                              uintptr
	gpViewportIndexedfNV                             uintptr
	gpViewportIndexedfOES                            uintptr
	gpViewportIndexedfvNV                            uintptr
	gpViewportIndexedfvOES                           uintptr
	gpViewportPositionWScaleNV                       uintptr
	gpViewportSwizzleNV                              uintptr
	gpWaitSemaphoreEXT                               uintptr
	gpWaitSync                                       uintptr
	gpWaitSyncAPPLE                                  uintptr
	gpWaitVkSemaphoreNV                              uintptr
	gpWeightPathsNV                                  uintptr
	gpWindowRectanglesEXT                            uintptr
)

func boolToUintptr(b bool) uintptr {
	if b {
		return 1
	}
	return 0
}
func AcquireKeyedMutexWin32EXT(memory uint32, key uint64, timeout uint32) bool {
	ret, _, _ := syscall.Syscall(gpAcquireKeyedMutexWin32EXT, 3, uintptr(memory), uintptr(key), uintptr(timeout))
	return ret != 0
}
func ActiveProgramEXT(program uint32) {
	syscall.Syscall(gpActiveProgramEXT, 1, uintptr(program), 0, 0)
}

// set the active program object for a program pipeline object
func ActiveShaderProgram(pipeline uint32, program uint32) {
	syscall.Syscall(gpActiveShaderProgram, 2, uintptr(pipeline), uintptr(program), 0)
}
func ActiveShaderProgramEXT(pipeline uint32, program uint32) {
	syscall.Syscall(gpActiveShaderProgramEXT, 2, uintptr(pipeline), uintptr(program), 0)
}

// select active texture unit
func ActiveTexture(texture uint32) {
	syscall.Syscall(gpActiveTexture, 1, uintptr(texture), 0, 0)
}
func AlphaFuncQCOM(xfunc uint32, ref float32) {
	syscall.Syscall(gpAlphaFuncQCOM, 2, uintptr(xfunc), uintptr(math.Float32bits(ref)), 0)
}
func ApplyFramebufferAttachmentCMAAINTEL() {
	syscall.Syscall(gpApplyFramebufferAttachmentCMAAINTEL, 0, 0, 0, 0)
}

// Attaches a shader object to a program object
func AttachShader(program uint32, shader uint32) {
	syscall.Syscall(gpAttachShader, 2, uintptr(program), uintptr(shader), 0)
}
func BeginConditionalRenderNV(id uint32, mode uint32) {
	syscall.Syscall(gpBeginConditionalRenderNV, 2, uintptr(id), uintptr(mode), 0)
}
func BeginPerfMonitorAMD(monitor uint32) {
	syscall.Syscall(gpBeginPerfMonitorAMD, 1, uintptr(monitor), 0, 0)
}
func BeginPerfQueryINTEL(queryHandle uint32) {
	syscall.Syscall(gpBeginPerfQueryINTEL, 1, uintptr(queryHandle), 0, 0)
}

// delimit the boundaries of a query object
func BeginQuery(target uint32, id uint32) {
	syscall.Syscall(gpBeginQuery, 2, uintptr(target), uintptr(id), 0)
}
func BeginQueryEXT(target uint32, id uint32) {
	syscall.Syscall(gpBeginQueryEXT, 2, uintptr(target), uintptr(id), 0)
}

// start transform feedback operation
func BeginTransformFeedback(primitiveMode uint32) {
	syscall.Syscall(gpBeginTransformFeedback, 1, uintptr(primitiveMode), 0, 0)
}

// Associates a generic vertex attribute index with a named attribute variable
func BindAttribLocation(program uint32, index uint32, name *uint8) {
	syscall.Syscall(gpBindAttribLocation, 3, uintptr(program), uintptr(index), uintptr(unsafe.Pointer(name)))
}

// bind a named buffer object
func BindBuffer(target uint32, buffer uint32) {
	syscall.Syscall(gpBindBuffer, 2, uintptr(target), uintptr(buffer), 0)
}

// bind a buffer object to an indexed buffer target
func BindBufferBase(target uint32, index uint32, buffer uint32) {
	syscall.Syscall(gpBindBufferBase, 3, uintptr(target), uintptr(index), uintptr(buffer))
}

// bind a range within a buffer object to an indexed buffer target
func BindBufferRange(target uint32, index uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpBindBufferRange, 5, uintptr(target), uintptr(index), uintptr(buffer), uintptr(offset), uintptr(size), 0)
}
func BindFragDataLocationEXT(program uint32, color uint32, name *uint8) {
	syscall.Syscall(gpBindFragDataLocationEXT, 3, uintptr(program), uintptr(color), uintptr(unsafe.Pointer(name)))
}
func BindFragDataLocationIndexedEXT(program uint32, colorNumber uint32, index uint32, name *uint8) {
	syscall.Syscall6(gpBindFragDataLocationIndexedEXT, 4, uintptr(program), uintptr(colorNumber), uintptr(index), uintptr(unsafe.Pointer(name)), 0, 0)
}

// bind a framebuffer to a framebuffer target
func BindFramebuffer(target uint32, framebuffer uint32) {
	syscall.Syscall(gpBindFramebuffer, 2, uintptr(target), uintptr(framebuffer), 0)
}

// bind a level of a texture to an image unit
func BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32) {
	syscall.Syscall9(gpBindImageTexture, 7, uintptr(unit), uintptr(texture), uintptr(level), boolToUintptr(layered), uintptr(layer), uintptr(access), uintptr(format), 0, 0)
}

// bind a program pipeline to the current context
func BindProgramPipeline(pipeline uint32) {
	syscall.Syscall(gpBindProgramPipeline, 1, uintptr(pipeline), 0, 0)
}
func BindProgramPipelineEXT(pipeline uint32) {
	syscall.Syscall(gpBindProgramPipelineEXT, 1, uintptr(pipeline), 0, 0)
}

// bind a renderbuffer to a renderbuffer target
func BindRenderbuffer(target uint32, renderbuffer uint32) {
	syscall.Syscall(gpBindRenderbuffer, 2, uintptr(target), uintptr(renderbuffer), 0)
}

// bind a named sampler to a texturing target
func BindSampler(unit uint32, sampler uint32) {
	syscall.Syscall(gpBindSampler, 2, uintptr(unit), uintptr(sampler), 0)
}
func BindShadingRateImageNV(texture uint32) {
	syscall.Syscall(gpBindShadingRateImageNV, 1, uintptr(texture), 0, 0)
}

// bind a named texture to a texturing target
func BindTexture(target uint32, texture uint32) {
	syscall.Syscall(gpBindTexture, 2, uintptr(target), uintptr(texture), 0)
}

// bind a transform feedback object
func BindTransformFeedback(target uint32, id uint32) {
	syscall.Syscall(gpBindTransformFeedback, 2, uintptr(target), uintptr(id), 0)
}

// bind a vertex array object
func BindVertexArray(array uint32) {
	syscall.Syscall(gpBindVertexArray, 1, uintptr(array), 0, 0)
}
func BindVertexArrayOES(array uint32) {
	syscall.Syscall(gpBindVertexArrayOES, 1, uintptr(array), 0, 0)
}

// bind a buffer to a vertex buffer bind point
func BindVertexBuffer(bindingindex uint32, buffer uint32, offset int, stride int32) {
	syscall.Syscall6(gpBindVertexBuffer, 4, uintptr(bindingindex), uintptr(buffer), uintptr(offset), uintptr(stride), 0, 0)
}
func BlendBarrierKHR() {
	syscall.Syscall(gpBlendBarrierKHR, 0, 0, 0, 0)
}
func BlendBarrierNV() {
	syscall.Syscall(gpBlendBarrierNV, 0, 0, 0, 0)
}

// set the blend color
func BlendColor(red float32, green float32, blue float32, alpha float32) {
	syscall.Syscall6(gpBlendColor, 4, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)), uintptr(math.Float32bits(alpha)), 0, 0)
}

// specify the equation used for both the RGB blend equation and the Alpha blend equation
func BlendEquation(mode uint32) {
	syscall.Syscall(gpBlendEquation, 1, uintptr(mode), 0, 0)
}
func BlendEquationEXT(mode uint32) {
	syscall.Syscall(gpBlendEquationEXT, 1, uintptr(mode), 0, 0)
}

// set the RGB blend equation and the alpha blend equation separately
func BlendEquationSeparate(modeRGB uint32, modeAlpha uint32) {
	syscall.Syscall(gpBlendEquationSeparate, 2, uintptr(modeRGB), uintptr(modeAlpha), 0)
}
func BlendEquationSeparateiEXT(buf uint32, modeRGB uint32, modeAlpha uint32) {
	syscall.Syscall(gpBlendEquationSeparateiEXT, 3, uintptr(buf), uintptr(modeRGB), uintptr(modeAlpha))
}
func BlendEquationSeparateiOES(buf uint32, modeRGB uint32, modeAlpha uint32) {
	syscall.Syscall(gpBlendEquationSeparateiOES, 3, uintptr(buf), uintptr(modeRGB), uintptr(modeAlpha))
}
func BlendEquationiEXT(buf uint32, mode uint32) {
	syscall.Syscall(gpBlendEquationiEXT, 2, uintptr(buf), uintptr(mode), 0)
}
func BlendEquationiOES(buf uint32, mode uint32) {
	syscall.Syscall(gpBlendEquationiOES, 2, uintptr(buf), uintptr(mode), 0)
}

// specify pixel arithmetic
func BlendFunc(sfactor uint32, dfactor uint32) {
	syscall.Syscall(gpBlendFunc, 2, uintptr(sfactor), uintptr(dfactor), 0)
}

// specify pixel arithmetic for RGB and alpha components separately
func BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
	syscall.Syscall6(gpBlendFuncSeparate, 4, uintptr(sfactorRGB), uintptr(dfactorRGB), uintptr(sfactorAlpha), uintptr(dfactorAlpha), 0, 0)
}
func BlendFuncSeparateiEXT(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	syscall.Syscall6(gpBlendFuncSeparateiEXT, 5, uintptr(buf), uintptr(srcRGB), uintptr(dstRGB), uintptr(srcAlpha), uintptr(dstAlpha), 0)
}
func BlendFuncSeparateiOES(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	syscall.Syscall6(gpBlendFuncSeparateiOES, 5, uintptr(buf), uintptr(srcRGB), uintptr(dstRGB), uintptr(srcAlpha), uintptr(dstAlpha), 0)
}
func BlendFunciEXT(buf uint32, src uint32, dst uint32) {
	syscall.Syscall(gpBlendFunciEXT, 3, uintptr(buf), uintptr(src), uintptr(dst))
}
func BlendFunciOES(buf uint32, src uint32, dst uint32) {
	syscall.Syscall(gpBlendFunciOES, 3, uintptr(buf), uintptr(src), uintptr(dst))
}
func BlendParameteriNV(pname uint32, value int32) {
	syscall.Syscall(gpBlendParameteriNV, 2, uintptr(pname), uintptr(value), 0)
}

// copy a block of pixels from one framebuffer object to another
func BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	syscall.Syscall12(gpBlitFramebuffer, 10, uintptr(srcX0), uintptr(srcY0), uintptr(srcX1), uintptr(srcY1), uintptr(dstX0), uintptr(dstY0), uintptr(dstX1), uintptr(dstY1), uintptr(mask), uintptr(filter), 0, 0)
}
func BlitFramebufferANGLE(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	syscall.Syscall12(gpBlitFramebufferANGLE, 10, uintptr(srcX0), uintptr(srcY0), uintptr(srcX1), uintptr(srcY1), uintptr(dstX0), uintptr(dstY0), uintptr(dstX1), uintptr(dstY1), uintptr(mask), uintptr(filter), 0, 0)
}
func BlitFramebufferNV(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	syscall.Syscall12(gpBlitFramebufferNV, 10, uintptr(srcX0), uintptr(srcY0), uintptr(srcX1), uintptr(srcY1), uintptr(dstX0), uintptr(dstY0), uintptr(dstX1), uintptr(dstY1), uintptr(mask), uintptr(filter), 0, 0)
}
func BufferAttachMemoryNV(target uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpBufferAttachMemoryNV, 3, uintptr(target), uintptr(memory), uintptr(offset))
}

// creates and initializes a buffer object's data     store
func BufferData(target uint32, size int, data unsafe.Pointer, usage uint32) {
	syscall.Syscall6(gpBufferData, 4, uintptr(target), uintptr(size), uintptr(data), uintptr(usage), 0, 0)
}
func BufferStorageEXT(target uint32, size int, data unsafe.Pointer, flags uint32) {
	syscall.Syscall6(gpBufferStorageEXT, 4, uintptr(target), uintptr(size), uintptr(data), uintptr(flags), 0, 0)
}

// Parameter clientBuffer has type C.GLeglClientBufferEXT.
func BufferStorageExternalEXT(target uint32, offset int, size int, clientBuffer unsafe.Pointer, flags uint32) {
	syscall.Syscall6(gpBufferStorageExternalEXT, 5, uintptr(target), uintptr(offset), uintptr(size), uintptr(clientBuffer), uintptr(flags), 0)
}
func BufferStorageMemEXT(target uint32, size int, memory uint32, offset uint64) {
	syscall.Syscall6(gpBufferStorageMemEXT, 4, uintptr(target), uintptr(size), uintptr(memory), uintptr(offset), 0, 0)
}

// updates a subset of a buffer object's data store
func BufferSubData(target uint32, offset int, size int, data unsafe.Pointer) {
	syscall.Syscall6(gpBufferSubData, 4, uintptr(target), uintptr(offset), uintptr(size), uintptr(data), 0, 0)
}

// check the completeness status of a framebuffer
func CheckFramebufferStatus(target uint32) uint32 {
	ret, _, _ := syscall.Syscall(gpCheckFramebufferStatus, 1, uintptr(target), 0, 0)
	return (uint32)(ret)
}

// clear buffers to preset values
func Clear(mask uint32) {
	syscall.Syscall(gpClear, 1, uintptr(mask), 0, 0)
}
func ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32) {
	syscall.Syscall6(gpClearBufferfi, 4, uintptr(buffer), uintptr(drawbuffer), uintptr(math.Float32bits(depth)), uintptr(stencil), 0, 0)
}
func ClearBufferfv(buffer uint32, drawbuffer int32, value *float32) {
	syscall.Syscall(gpClearBufferfv, 3, uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)))
}
func ClearBufferiv(buffer uint32, drawbuffer int32, value *int32) {
	syscall.Syscall(gpClearBufferiv, 3, uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)))
}
func ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32) {
	syscall.Syscall(gpClearBufferuiv, 3, uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)))
}

// specify clear values for the color buffers
func ClearColor(red float32, green float32, blue float32, alpha float32) {
	syscall.Syscall6(gpClearColor, 4, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)), uintptr(math.Float32bits(alpha)), 0, 0)
}

// specify the clear value for the depth buffer
func ClearDepthf(d float32) {
	syscall.Syscall(gpClearDepthf, 1, uintptr(math.Float32bits(d)), 0, 0)
}
func ClearPixelLocalStorageuiEXT(offset int32, n int32, values *uint32) {
	syscall.Syscall(gpClearPixelLocalStorageuiEXT, 3, uintptr(offset), uintptr(n), uintptr(unsafe.Pointer(values)))
}

// specify the clear value for the stencil buffer
func ClearStencil(s int32) {
	syscall.Syscall(gpClearStencil, 1, uintptr(s), 0, 0)
}
func ClearTexImageEXT(texture uint32, level int32, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall6(gpClearTexImageEXT, 5, uintptr(texture), uintptr(level), uintptr(format), uintptr(xtype), uintptr(data), 0)
}
func ClearTexSubImageEXT(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall12(gpClearTexSubImageEXT, 11, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(data), 0)
}

// block and wait for a sync object to become signaled
func ClientWaitSync(sync uintptr, flags uint32, timeout uint64) uint32 {
	ret, _, _ := syscall.Syscall(gpClientWaitSync, 3, uintptr(sync), uintptr(flags), uintptr(timeout))
	return (uint32)(ret)
}
func ClientWaitSyncAPPLE(sync uintptr, flags uint32, timeout uint64) uint32 {
	ret, _, _ := syscall.Syscall(gpClientWaitSyncAPPLE, 3, uintptr(sync), uintptr(flags), uintptr(timeout))
	return (uint32)(ret)
}
func ClipControlEXT(origin uint32, depth uint32) {
	syscall.Syscall(gpClipControlEXT, 2, uintptr(origin), uintptr(depth), 0)
}
func ColorMask(red bool, green bool, blue bool, alpha bool) {
	syscall.Syscall6(gpColorMask, 4, boolToUintptr(red), boolToUintptr(green), boolToUintptr(blue), boolToUintptr(alpha), 0, 0)
}
func ColorMaskiEXT(index uint32, r bool, g bool, b bool, a bool) {
	syscall.Syscall6(gpColorMaskiEXT, 5, uintptr(index), boolToUintptr(r), boolToUintptr(g), boolToUintptr(b), boolToUintptr(a), 0)
}
func ColorMaskiOES(index uint32, r bool, g bool, b bool, a bool) {
	syscall.Syscall6(gpColorMaskiOES, 5, uintptr(index), boolToUintptr(r), boolToUintptr(g), boolToUintptr(b), boolToUintptr(a), 0)
}

// Compiles a shader object
func CompileShader(shader uint32) {
	syscall.Syscall(gpCompileShader, 1, uintptr(shader), 0, 0)
}

// specify a two-dimensional texture image in a compressed format
func CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexImage2D, 8, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(imageSize), uintptr(data), 0)
}

// specify a three-dimensional texture image in a compressed format
func CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexImage3D, 9, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(imageSize), uintptr(data))
}
func CompressedTexImage3DOES(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexImage3DOES, 9, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(imageSize), uintptr(data))
}

// specify a two-dimensional texture subimage in a compressed format
func CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexSubImage2D, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(imageSize), uintptr(data))
}

// specify a three-dimensional texture subimage in a compressed format
func CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall12(gpCompressedTexSubImage3D, 11, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(imageSize), uintptr(data), 0)
}
func CompressedTexSubImage3DOES(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall12(gpCompressedTexSubImage3DOES, 11, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(imageSize), uintptr(data), 0)
}
func ConservativeRasterParameteriNV(pname uint32, param int32) {
	syscall.Syscall(gpConservativeRasterParameteriNV, 2, uintptr(pname), uintptr(param), 0)
}

// copy all or part of the data store of a buffer object to the data store of another buffer object
func CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset int, writeOffset int, size int) {
	syscall.Syscall6(gpCopyBufferSubData, 5, uintptr(readTarget), uintptr(writeTarget), uintptr(readOffset), uintptr(writeOffset), uintptr(size), 0)
}
func CopyBufferSubDataNV(readTarget uint32, writeTarget uint32, readOffset int, writeOffset int, size int) {
	syscall.Syscall6(gpCopyBufferSubDataNV, 5, uintptr(readTarget), uintptr(writeTarget), uintptr(readOffset), uintptr(writeOffset), uintptr(size), 0)
}
func CopyImageSubDataEXT(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
	syscall.Syscall15(gpCopyImageSubDataEXT, 15, uintptr(srcName), uintptr(srcTarget), uintptr(srcLevel), uintptr(srcX), uintptr(srcY), uintptr(srcZ), uintptr(dstName), uintptr(dstTarget), uintptr(dstLevel), uintptr(dstX), uintptr(dstY), uintptr(dstZ), uintptr(srcWidth), uintptr(srcHeight), uintptr(srcDepth))
}
func CopyImageSubDataOES(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
	syscall.Syscall15(gpCopyImageSubDataOES, 15, uintptr(srcName), uintptr(srcTarget), uintptr(srcLevel), uintptr(srcX), uintptr(srcY), uintptr(srcZ), uintptr(dstName), uintptr(dstTarget), uintptr(dstLevel), uintptr(dstX), uintptr(dstY), uintptr(dstZ), uintptr(srcWidth), uintptr(srcHeight), uintptr(srcDepth))
}
func CopyPathNV(resultPath uint32, srcPath uint32) {
	syscall.Syscall(gpCopyPathNV, 2, uintptr(resultPath), uintptr(srcPath), 0)
}

// copy pixels into a 2D texture image
func CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	syscall.Syscall9(gpCopyTexImage2D, 8, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(border), 0)
}

// copy a two-dimensional texture subimage
func CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTexSubImage2D, 8, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0)
}

// copy a three-dimensional texture subimage
func CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTexSubImage3D, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
}
func CopyTexSubImage3DOES(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTexSubImage3DOES, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
}
func CopyTextureLevelsAPPLE(destinationTexture uint32, sourceTexture uint32, sourceBaseLevel int32, sourceLevelCount int32) {
	syscall.Syscall6(gpCopyTextureLevelsAPPLE, 4, uintptr(destinationTexture), uintptr(sourceTexture), uintptr(sourceBaseLevel), uintptr(sourceLevelCount), 0, 0)
}
func CoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpCoverFillPathInstancedNV, 7, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0, 0)
}
func CoverFillPathNV(path uint32, coverMode uint32) {
	syscall.Syscall(gpCoverFillPathNV, 2, uintptr(path), uintptr(coverMode), 0)
}
func CoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpCoverStrokePathInstancedNV, 7, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0, 0)
}
func CoverStrokePathNV(path uint32, coverMode uint32) {
	syscall.Syscall(gpCoverStrokePathNV, 2, uintptr(path), uintptr(coverMode), 0)
}
func CoverageMaskNV(mask bool) {
	syscall.Syscall(gpCoverageMaskNV, 1, boolToUintptr(mask), 0, 0)
}
func CoverageModulationNV(components uint32) {
	syscall.Syscall(gpCoverageModulationNV, 1, uintptr(components), 0, 0)
}
func CoverageModulationTableNV(n int32, v *float32) {
	syscall.Syscall(gpCoverageModulationTableNV, 2, uintptr(n), uintptr(unsafe.Pointer(v)), 0)
}
func CoverageOperationNV(operation uint32) {
	syscall.Syscall(gpCoverageOperationNV, 1, uintptr(operation), 0, 0)
}
func CreateMemoryObjectsEXT(n int32, memoryObjects *uint32) {
	syscall.Syscall(gpCreateMemoryObjectsEXT, 2, uintptr(n), uintptr(unsafe.Pointer(memoryObjects)), 0)
}
func CreatePerfQueryINTEL(queryId uint32, queryHandle *uint32) {
	syscall.Syscall(gpCreatePerfQueryINTEL, 2, uintptr(queryId), uintptr(unsafe.Pointer(queryHandle)), 0)
}

// Creates a program object
func CreateProgram() uint32 {
	ret, _, _ := syscall.Syscall(gpCreateProgram, 0, 0, 0, 0)
	return (uint32)(ret)
}

// Creates a shader object
func CreateShader(xtype uint32) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShader, 1, uintptr(xtype), 0, 0)
	return (uint32)(ret)
}
func CreateShaderProgramEXT(xtype uint32, xstring *uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShaderProgramEXT, 2, uintptr(xtype), uintptr(unsafe.Pointer(xstring)), 0)
	return (uint32)(ret)
}

// create a stand-alone program from an array of null-terminated source code strings
func CreateShaderProgramv(xtype uint32, count int32, strings **uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShaderProgramv, 3, uintptr(xtype), uintptr(count), uintptr(unsafe.Pointer(strings)))
	return (uint32)(ret)
}
func CreateShaderProgramvEXT(xtype uint32, count int32, strings **uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShaderProgramvEXT, 3, uintptr(xtype), uintptr(count), uintptr(unsafe.Pointer(strings)))
	return (uint32)(ret)
}

// specify whether front- or back-facing facets can be culled
func CullFace(mode uint32) {
	syscall.Syscall(gpCullFace, 1, uintptr(mode), 0, 0)
}

// specify a callback to receive debugging messages from the GL
func DebugMessageCallback(callback DebugProc, userParam unsafe.Pointer) {
	syscall.Syscall(gpDebugMessageCallback, 2, newDebugProcCallback(callback), uintptr(userParam), 0)
}
func DebugMessageCallbackKHR(callback DebugProc, userParam unsafe.Pointer) {
	syscall.Syscall(gpDebugMessageCallbackKHR, 2, newDebugProcCallback(callback), uintptr(userParam), 0)
}

// control the reporting of debug messages in a debug context
func DebugMessageControl(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	syscall.Syscall6(gpDebugMessageControl, 6, uintptr(source), uintptr(xtype), uintptr(severity), uintptr(count), uintptr(unsafe.Pointer(ids)), boolToUintptr(enabled))
}
func DebugMessageControlKHR(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	syscall.Syscall6(gpDebugMessageControlKHR, 6, uintptr(source), uintptr(xtype), uintptr(severity), uintptr(count), uintptr(unsafe.Pointer(ids)), boolToUintptr(enabled))
}

// inject an application-supplied message into the debug message queue
func DebugMessageInsert(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *uint8) {
	syscall.Syscall6(gpDebugMessageInsert, 6, uintptr(source), uintptr(xtype), uintptr(id), uintptr(severity), uintptr(length), uintptr(unsafe.Pointer(buf)))
}
func DebugMessageInsertKHR(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *uint8) {
	syscall.Syscall6(gpDebugMessageInsertKHR, 6, uintptr(source), uintptr(xtype), uintptr(id), uintptr(severity), uintptr(length), uintptr(unsafe.Pointer(buf)))
}

// delete named buffer objects
func DeleteBuffers(n int32, buffers *uint32) {
	syscall.Syscall(gpDeleteBuffers, 2, uintptr(n), uintptr(unsafe.Pointer(buffers)), 0)
}
func DeleteFencesNV(n int32, fences *uint32) {
	syscall.Syscall(gpDeleteFencesNV, 2, uintptr(n), uintptr(unsafe.Pointer(fences)), 0)
}

// delete framebuffer objects
func DeleteFramebuffers(n int32, framebuffers *uint32) {
	syscall.Syscall(gpDeleteFramebuffers, 2, uintptr(n), uintptr(unsafe.Pointer(framebuffers)), 0)
}
func DeleteMemoryObjectsEXT(n int32, memoryObjects *uint32) {
	syscall.Syscall(gpDeleteMemoryObjectsEXT, 2, uintptr(n), uintptr(unsafe.Pointer(memoryObjects)), 0)
}
func DeletePathsNV(path uint32, xrange int32) {
	syscall.Syscall(gpDeletePathsNV, 2, uintptr(path), uintptr(xrange), 0)
}
func DeletePerfMonitorsAMD(n int32, monitors *uint32) {
	syscall.Syscall(gpDeletePerfMonitorsAMD, 2, uintptr(n), uintptr(unsafe.Pointer(monitors)), 0)
}
func DeletePerfQueryINTEL(queryHandle uint32) {
	syscall.Syscall(gpDeletePerfQueryINTEL, 1, uintptr(queryHandle), 0, 0)
}

// Deletes a program object
func DeleteProgram(program uint32) {
	syscall.Syscall(gpDeleteProgram, 1, uintptr(program), 0, 0)
}

// delete program pipeline objects
func DeleteProgramPipelines(n int32, pipelines *uint32) {
	syscall.Syscall(gpDeleteProgramPipelines, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}
func DeleteProgramPipelinesEXT(n int32, pipelines *uint32) {
	syscall.Syscall(gpDeleteProgramPipelinesEXT, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}

// delete named query objects
func DeleteQueries(n int32, ids *uint32) {
	syscall.Syscall(gpDeleteQueries, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}
func DeleteQueriesEXT(n int32, ids *uint32) {
	syscall.Syscall(gpDeleteQueriesEXT, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// delete renderbuffer objects
func DeleteRenderbuffers(n int32, renderbuffers *uint32) {
	syscall.Syscall(gpDeleteRenderbuffers, 2, uintptr(n), uintptr(unsafe.Pointer(renderbuffers)), 0)
}

// delete named sampler objects
func DeleteSamplers(count int32, samplers *uint32) {
	syscall.Syscall(gpDeleteSamplers, 2, uintptr(count), uintptr(unsafe.Pointer(samplers)), 0)
}
func DeleteSemaphoresEXT(n int32, semaphores *uint32) {
	syscall.Syscall(gpDeleteSemaphoresEXT, 2, uintptr(n), uintptr(unsafe.Pointer(semaphores)), 0)
}

// Deletes a shader object
func DeleteShader(shader uint32) {
	syscall.Syscall(gpDeleteShader, 1, uintptr(shader), 0, 0)
}

// delete a sync object
func DeleteSync(sync uintptr) {
	syscall.Syscall(gpDeleteSync, 1, uintptr(sync), 0, 0)
}
func DeleteSyncAPPLE(sync uintptr) {
	syscall.Syscall(gpDeleteSyncAPPLE, 1, uintptr(sync), 0, 0)
}

// delete named textures
func DeleteTextures(n int32, textures *uint32) {
	syscall.Syscall(gpDeleteTextures, 2, uintptr(n), uintptr(unsafe.Pointer(textures)), 0)
}

// delete transform feedback objects
func DeleteTransformFeedbacks(n int32, ids *uint32) {
	syscall.Syscall(gpDeleteTransformFeedbacks, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// delete vertex array objects
func DeleteVertexArrays(n int32, arrays *uint32) {
	syscall.Syscall(gpDeleteVertexArrays, 2, uintptr(n), uintptr(unsafe.Pointer(arrays)), 0)
}
func DeleteVertexArraysOES(n int32, arrays *uint32) {
	syscall.Syscall(gpDeleteVertexArraysOES, 2, uintptr(n), uintptr(unsafe.Pointer(arrays)), 0)
}

// specify the value used for depth buffer comparisons
func DepthFunc(xfunc uint32) {
	syscall.Syscall(gpDepthFunc, 1, uintptr(xfunc), 0, 0)
}

// enable or disable writing into the depth buffer
func DepthMask(flag bool) {
	syscall.Syscall(gpDepthMask, 1, boolToUintptr(flag), 0, 0)
}
func DepthRangeArrayfvNV(first uint32, count int32, v *float32) {
	syscall.Syscall(gpDepthRangeArrayfvNV, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func DepthRangeArrayfvOES(first uint32, count int32, v *float32) {
	syscall.Syscall(gpDepthRangeArrayfvOES, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func DepthRangeIndexedfNV(index uint32, n float32, f float32) {
	syscall.Syscall(gpDepthRangeIndexedfNV, 3, uintptr(index), uintptr(math.Float32bits(n)), uintptr(math.Float32bits(f)))
}
func DepthRangeIndexedfOES(index uint32, n float32, f float32) {
	syscall.Syscall(gpDepthRangeIndexedfOES, 3, uintptr(index), uintptr(math.Float32bits(n)), uintptr(math.Float32bits(f)))
}

// specify mapping of depth values from normalized device coordinates to window coordinates
func DepthRangef(n float32, f float32) {
	syscall.Syscall(gpDepthRangef, 2, uintptr(math.Float32bits(n)), uintptr(math.Float32bits(f)), 0)
}

// Detaches a shader object from a program object to which it is attached
func DetachShader(program uint32, shader uint32) {
	syscall.Syscall(gpDetachShader, 2, uintptr(program), uintptr(shader), 0)
}
func Disable(cap uint32) {
	syscall.Syscall(gpDisable, 1, uintptr(cap), 0, 0)
}
func DisableDriverControlQCOM(driverControl uint32) {
	syscall.Syscall(gpDisableDriverControlQCOM, 1, uintptr(driverControl), 0, 0)
}

// Enable or disable a generic vertex attribute     array
func DisableVertexAttribArray(index uint32) {
	syscall.Syscall(gpDisableVertexAttribArray, 1, uintptr(index), 0, 0)
}
func DisableiEXT(target uint32, index uint32) {
	syscall.Syscall(gpDisableiEXT, 2, uintptr(target), uintptr(index), 0)
}
func DisableiNV(target uint32, index uint32) {
	syscall.Syscall(gpDisableiNV, 2, uintptr(target), uintptr(index), 0)
}
func DisableiOES(target uint32, index uint32) {
	syscall.Syscall(gpDisableiOES, 2, uintptr(target), uintptr(index), 0)
}
func DiscardFramebufferEXT(target uint32, numAttachments int32, attachments *uint32) {
	syscall.Syscall(gpDiscardFramebufferEXT, 3, uintptr(target), uintptr(numAttachments), uintptr(unsafe.Pointer(attachments)))
}

// launch one or more compute work groups
func DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32) {
	syscall.Syscall(gpDispatchCompute, 3, uintptr(num_groups_x), uintptr(num_groups_y), uintptr(num_groups_z))
}

// launch one or more compute work groups using parameters stored in a buffer
func DispatchComputeIndirect(indirect int) {
	syscall.Syscall(gpDispatchComputeIndirect, 1, uintptr(indirect), 0, 0)
}

// render primitives from array data
func DrawArrays(mode uint32, first int32, count int32) {
	syscall.Syscall(gpDrawArrays, 3, uintptr(mode), uintptr(first), uintptr(count))
}

// render primitives from array data, taking parameters from memory
func DrawArraysIndirect(mode uint32, indirect unsafe.Pointer) {
	syscall.Syscall(gpDrawArraysIndirect, 2, uintptr(mode), uintptr(indirect), 0)
}

// draw multiple instances of a range of elements
func DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32) {
	syscall.Syscall6(gpDrawArraysInstanced, 4, uintptr(mode), uintptr(first), uintptr(count), uintptr(instancecount), 0, 0)
}
func DrawArraysInstancedANGLE(mode uint32, first int32, count int32, primcount int32) {
	syscall.Syscall6(gpDrawArraysInstancedANGLE, 4, uintptr(mode), uintptr(first), uintptr(count), uintptr(primcount), 0, 0)
}
func DrawArraysInstancedBaseInstanceEXT(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32) {
	syscall.Syscall6(gpDrawArraysInstancedBaseInstanceEXT, 5, uintptr(mode), uintptr(first), uintptr(count), uintptr(instancecount), uintptr(baseinstance), 0)
}
func DrawArraysInstancedEXT(mode uint32, start int32, count int32, primcount int32) {
	syscall.Syscall6(gpDrawArraysInstancedEXT, 4, uintptr(mode), uintptr(start), uintptr(count), uintptr(primcount), 0, 0)
}
func DrawArraysInstancedNV(mode uint32, first int32, count int32, primcount int32) {
	syscall.Syscall6(gpDrawArraysInstancedNV, 4, uintptr(mode), uintptr(first), uintptr(count), uintptr(primcount), 0, 0)
}

// Specifies a list of color buffers to be drawn     into
func DrawBuffers(n int32, bufs *uint32) {
	syscall.Syscall(gpDrawBuffers, 2, uintptr(n), uintptr(unsafe.Pointer(bufs)), 0)
}
func DrawBuffersEXT(n int32, bufs *uint32) {
	syscall.Syscall(gpDrawBuffersEXT, 2, uintptr(n), uintptr(unsafe.Pointer(bufs)), 0)
}
func DrawBuffersIndexedEXT(n int32, location *uint32, indices *int32) {
	syscall.Syscall(gpDrawBuffersIndexedEXT, 3, uintptr(n), uintptr(unsafe.Pointer(location)), uintptr(unsafe.Pointer(indices)))
}
func DrawBuffersNV(n int32, bufs *uint32) {
	syscall.Syscall(gpDrawBuffersNV, 2, uintptr(n), uintptr(unsafe.Pointer(bufs)), 0)
}

// render primitives from array data
func DrawElements(mode uint32, count int32, xtype uint32, indices unsafe.Pointer) {
	syscall.Syscall6(gpDrawElements, 4, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), 0, 0)
}
func DrawElementsWithOffset(mode uint32, count int32, xtype uint32, indices uintptr) {
	syscall.Syscall6(gpDrawElements, 4, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), 0, 0)
}
func DrawElementsBaseVertexEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
	syscall.Syscall6(gpDrawElementsBaseVertexEXT, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(basevertex), 0)
}
func DrawElementsBaseVertexOES(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
	syscall.Syscall6(gpDrawElementsBaseVertexOES, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(basevertex), 0)
}

// render indexed primitives from array data, taking parameters from memory
func DrawElementsIndirect(mode uint32, xtype uint32, indirect unsafe.Pointer) {
	syscall.Syscall(gpDrawElementsIndirect, 3, uintptr(mode), uintptr(xtype), uintptr(indirect))
}

// draw multiple instances of a set of elements
func DrawElementsInstanced(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32) {
	syscall.Syscall6(gpDrawElementsInstanced, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), 0)
}
func DrawElementsInstancedANGLE(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
	syscall.Syscall6(gpDrawElementsInstancedANGLE, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(primcount), 0)
}
func DrawElementsInstancedBaseInstanceEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32) {
	syscall.Syscall6(gpDrawElementsInstancedBaseInstanceEXT, 6, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), uintptr(baseinstance))
}
func DrawElementsInstancedBaseVertexBaseInstanceEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32) {
	syscall.Syscall9(gpDrawElementsInstancedBaseVertexBaseInstanceEXT, 7, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), uintptr(basevertex), uintptr(baseinstance), 0, 0)
}
func DrawElementsInstancedBaseVertexEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
	syscall.Syscall6(gpDrawElementsInstancedBaseVertexEXT, 6, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), uintptr(basevertex))
}
func DrawElementsInstancedBaseVertexOES(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
	syscall.Syscall6(gpDrawElementsInstancedBaseVertexOES, 6, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), uintptr(basevertex))
}
func DrawElementsInstancedEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
	syscall.Syscall6(gpDrawElementsInstancedEXT, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(primcount), 0)
}
func DrawElementsInstancedNV(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
	syscall.Syscall6(gpDrawElementsInstancedNV, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(primcount), 0)
}
func DrawMeshTasksIndirectNV(indirect int) {
	syscall.Syscall(gpDrawMeshTasksIndirectNV, 1, uintptr(indirect), 0, 0)
}
func DrawMeshTasksNV(first uint32, count uint32) {
	syscall.Syscall(gpDrawMeshTasksNV, 2, uintptr(first), uintptr(count), 0)
}

// render primitives from array data
func DrawRangeElements(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer) {
	syscall.Syscall6(gpDrawRangeElements, 6, uintptr(mode), uintptr(start), uintptr(end), uintptr(count), uintptr(xtype), uintptr(indices))
}
func DrawRangeElementsBaseVertexEXT(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
	syscall.Syscall9(gpDrawRangeElementsBaseVertexEXT, 7, uintptr(mode), uintptr(start), uintptr(end), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(basevertex), 0, 0)
}
func DrawRangeElementsBaseVertexOES(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
	syscall.Syscall9(gpDrawRangeElementsBaseVertexOES, 7, uintptr(mode), uintptr(start), uintptr(end), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(basevertex), 0, 0)
}
func DrawTransformFeedbackEXT(mode uint32, id uint32) {
	syscall.Syscall(gpDrawTransformFeedbackEXT, 2, uintptr(mode), uintptr(id), 0)
}
func DrawTransformFeedbackInstancedEXT(mode uint32, id uint32, instancecount int32) {
	syscall.Syscall(gpDrawTransformFeedbackInstancedEXT, 3, uintptr(mode), uintptr(id), uintptr(instancecount))
}
func DrawVkImageNV(vkImage uint64, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32) {
	syscall.Syscall12(gpDrawVkImageNV, 11, uintptr(vkImage), uintptr(sampler), uintptr(math.Float32bits(x0)), uintptr(math.Float32bits(y0)), uintptr(math.Float32bits(x1)), uintptr(math.Float32bits(y1)), uintptr(math.Float32bits(z)), uintptr(math.Float32bits(s0)), uintptr(math.Float32bits(t0)), uintptr(math.Float32bits(s1)), uintptr(math.Float32bits(t1)), 0)
}

// Parameter image has type C.GLeglImageOES.
func EGLImageTargetRenderbufferStorageOES(target uint32, image unsafe.Pointer) {
	syscall.Syscall(gpEGLImageTargetRenderbufferStorageOES, 2, uintptr(target), uintptr(image), 0)
}

// Parameter image has type C.GLeglImageOES.
func EGLImageTargetTexStorageEXT(target uint32, image unsafe.Pointer, attrib_list *int32) {
	syscall.Syscall(gpEGLImageTargetTexStorageEXT, 3, uintptr(target), uintptr(image), uintptr(unsafe.Pointer(attrib_list)))
}

// Parameter image has type C.GLeglImageOES.
func EGLImageTargetTexture2DOES(target uint32, image unsafe.Pointer) {
	syscall.Syscall(gpEGLImageTargetTexture2DOES, 2, uintptr(target), uintptr(image), 0)
}

// Parameter image has type C.GLeglImageOES.
func EGLImageTargetTextureStorageEXT(texture uint32, image unsafe.Pointer, attrib_list *int32) {
	syscall.Syscall(gpEGLImageTargetTextureStorageEXT, 3, uintptr(texture), uintptr(image), uintptr(unsafe.Pointer(attrib_list)))
}

// enable or disable server-side GL capabilities
func Enable(cap uint32) {
	syscall.Syscall(gpEnable, 1, uintptr(cap), 0, 0)
}
func EnableDriverControlQCOM(driverControl uint32) {
	syscall.Syscall(gpEnableDriverControlQCOM, 1, uintptr(driverControl), 0, 0)
}

// Enable or disable a generic vertex attribute     array
func EnableVertexAttribArray(index uint32) {
	syscall.Syscall(gpEnableVertexAttribArray, 1, uintptr(index), 0, 0)
}
func EnableiEXT(target uint32, index uint32) {
	syscall.Syscall(gpEnableiEXT, 2, uintptr(target), uintptr(index), 0)
}
func EnableiNV(target uint32, index uint32) {
	syscall.Syscall(gpEnableiNV, 2, uintptr(target), uintptr(index), 0)
}
func EnableiOES(target uint32, index uint32) {
	syscall.Syscall(gpEnableiOES, 2, uintptr(target), uintptr(index), 0)
}
func EndConditionalRenderNV() {
	syscall.Syscall(gpEndConditionalRenderNV, 0, 0, 0, 0)
}
func EndPerfMonitorAMD(monitor uint32) {
	syscall.Syscall(gpEndPerfMonitorAMD, 1, uintptr(monitor), 0, 0)
}
func EndPerfQueryINTEL(queryHandle uint32) {
	syscall.Syscall(gpEndPerfQueryINTEL, 1, uintptr(queryHandle), 0, 0)
}
func EndQuery(target uint32) {
	syscall.Syscall(gpEndQuery, 1, uintptr(target), 0, 0)
}
func EndQueryEXT(target uint32) {
	syscall.Syscall(gpEndQueryEXT, 1, uintptr(target), 0, 0)
}
func EndTilingQCOM(preserveMask uint32) {
	syscall.Syscall(gpEndTilingQCOM, 1, uintptr(preserveMask), 0, 0)
}
func EndTransformFeedback() {
	syscall.Syscall(gpEndTransformFeedback, 0, 0, 0, 0)
}
func ExtGetBufferPointervQCOM(target uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpExtGetBufferPointervQCOM, 2, uintptr(target), uintptr(unsafe.Pointer(params)), 0)
}
func ExtGetBuffersQCOM(buffers *uint32, maxBuffers int32, numBuffers *int32) {
	syscall.Syscall(gpExtGetBuffersQCOM, 3, uintptr(unsafe.Pointer(buffers)), uintptr(maxBuffers), uintptr(unsafe.Pointer(numBuffers)))
}
func ExtGetFramebuffersQCOM(framebuffers *uint32, maxFramebuffers int32, numFramebuffers *int32) {
	syscall.Syscall(gpExtGetFramebuffersQCOM, 3, uintptr(unsafe.Pointer(framebuffers)), uintptr(maxFramebuffers), uintptr(unsafe.Pointer(numFramebuffers)))
}
func ExtGetProgramBinarySourceQCOM(program uint32, shadertype uint32, source *uint8, length *int32) {
	syscall.Syscall6(gpExtGetProgramBinarySourceQCOM, 4, uintptr(program), uintptr(shadertype), uintptr(unsafe.Pointer(source)), uintptr(unsafe.Pointer(length)), 0, 0)
}
func ExtGetProgramsQCOM(programs *uint32, maxPrograms int32, numPrograms *int32) {
	syscall.Syscall(gpExtGetProgramsQCOM, 3, uintptr(unsafe.Pointer(programs)), uintptr(maxPrograms), uintptr(unsafe.Pointer(numPrograms)))
}
func ExtGetRenderbuffersQCOM(renderbuffers *uint32, maxRenderbuffers int32, numRenderbuffers *int32) {
	syscall.Syscall(gpExtGetRenderbuffersQCOM, 3, uintptr(unsafe.Pointer(renderbuffers)), uintptr(maxRenderbuffers), uintptr(unsafe.Pointer(numRenderbuffers)))
}
func ExtGetShadersQCOM(shaders *uint32, maxShaders int32, numShaders *int32) {
	syscall.Syscall(gpExtGetShadersQCOM, 3, uintptr(unsafe.Pointer(shaders)), uintptr(maxShaders), uintptr(unsafe.Pointer(numShaders)))
}
func ExtGetTexLevelParameterivQCOM(texture uint32, face uint32, level int32, pname uint32, params *int32) {
	syscall.Syscall6(gpExtGetTexLevelParameterivQCOM, 5, uintptr(texture), uintptr(face), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func ExtGetTexSubImageQCOM(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, texels unsafe.Pointer) {
	syscall.Syscall12(gpExtGetTexSubImageQCOM, 11, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(texels), 0)
}
func ExtGetTexturesQCOM(textures *uint32, maxTextures int32, numTextures *int32) {
	syscall.Syscall(gpExtGetTexturesQCOM, 3, uintptr(unsafe.Pointer(textures)), uintptr(maxTextures), uintptr(unsafe.Pointer(numTextures)))
}
func ExtIsProgramBinaryQCOM(program uint32) bool {
	ret, _, _ := syscall.Syscall(gpExtIsProgramBinaryQCOM, 1, uintptr(program), 0, 0)
	return ret != 0
}
func ExtTexObjectStateOverrideiQCOM(target uint32, pname uint32, param int32) {
	syscall.Syscall(gpExtTexObjectStateOverrideiQCOM, 3, uintptr(target), uintptr(pname), uintptr(param))
}

// create a new sync object and insert it into the GL command stream
func FenceSync(condition uint32, flags uint32) uintptr {
	ret, _, _ := syscall.Syscall(gpFenceSync, 2, uintptr(condition), uintptr(flags), 0)
	return (uintptr)(ret)
}
func FenceSyncAPPLE(condition uint32, flags uint32) uintptr {
	ret, _, _ := syscall.Syscall(gpFenceSyncAPPLE, 2, uintptr(condition), uintptr(flags), 0)
	return (uintptr)(ret)
}

// block until all GL execution is complete
func Finish() {
	syscall.Syscall(gpFinish, 0, 0, 0, 0)
}
func FinishFenceNV(fence uint32) {
	syscall.Syscall(gpFinishFenceNV, 1, uintptr(fence), 0, 0)
}

// force execution of GL commands in finite time
func Flush() {
	syscall.Syscall(gpFlush, 0, 0, 0, 0)
}

// indicate modifications to a range of a mapped buffer
func FlushMappedBufferRange(target uint32, offset int, length int) {
	syscall.Syscall(gpFlushMappedBufferRange, 3, uintptr(target), uintptr(offset), uintptr(length))
}
func FlushMappedBufferRangeEXT(target uint32, offset int, length int) {
	syscall.Syscall(gpFlushMappedBufferRangeEXT, 3, uintptr(target), uintptr(offset), uintptr(length))
}
func FragmentCoverageColorNV(color uint32) {
	syscall.Syscall(gpFragmentCoverageColorNV, 1, uintptr(color), 0, 0)
}
func FramebufferFetchBarrierEXT() {
	syscall.Syscall(gpFramebufferFetchBarrierEXT, 0, 0, 0, 0)
}
func FramebufferFetchBarrierQCOM() {
	syscall.Syscall(gpFramebufferFetchBarrierQCOM, 0, 0, 0, 0)
}
func FramebufferFoveationConfigQCOM(framebuffer uint32, numLayers uint32, focalPointsPerLayer uint32, requestedFeatures uint32, providedFeatures *uint32) {
	syscall.Syscall6(gpFramebufferFoveationConfigQCOM, 5, uintptr(framebuffer), uintptr(numLayers), uintptr(focalPointsPerLayer), uintptr(requestedFeatures), uintptr(unsafe.Pointer(providedFeatures)), 0)
}
func FramebufferFoveationParametersQCOM(framebuffer uint32, layer uint32, focalPoint uint32, focalX float32, focalY float32, gainX float32, gainY float32, foveaArea float32) {
	syscall.Syscall9(gpFramebufferFoveationParametersQCOM, 8, uintptr(framebuffer), uintptr(layer), uintptr(focalPoint), uintptr(math.Float32bits(focalX)), uintptr(math.Float32bits(focalY)), uintptr(math.Float32bits(gainX)), uintptr(math.Float32bits(gainY)), uintptr(math.Float32bits(foveaArea)), 0)
}

// set a named parameter of a framebuffer object
func FramebufferParameteri(target uint32, pname uint32, param int32) {
	syscall.Syscall(gpFramebufferParameteri, 3, uintptr(target), uintptr(pname), uintptr(param))
}
func FramebufferPixelLocalStorageSizeEXT(target uint32, size int32) {
	syscall.Syscall(gpFramebufferPixelLocalStorageSizeEXT, 2, uintptr(target), uintptr(size), 0)
}

// attach a renderbuffer as a logical buffer of a framebuffer object
func FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	syscall.Syscall6(gpFramebufferRenderbuffer, 4, uintptr(target), uintptr(attachment), uintptr(renderbuffertarget), uintptr(renderbuffer), 0, 0)
}
func FramebufferSampleLocationsfvNV(target uint32, start uint32, count int32, v *float32) {
	syscall.Syscall6(gpFramebufferSampleLocationsfvNV, 4, uintptr(target), uintptr(start), uintptr(count), uintptr(unsafe.Pointer(v)), 0, 0)
}

// attach a level of a texture object as a logical buffer to the currently bound framebuffer object
func FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	syscall.Syscall6(gpFramebufferTexture2D, 5, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), 0)
}
func FramebufferTexture2DDownsampleIMG(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, xscale int32, yscale int32) {
	syscall.Syscall9(gpFramebufferTexture2DDownsampleIMG, 7, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), uintptr(xscale), uintptr(yscale), 0, 0)
}
func FramebufferTexture2DMultisampleEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, samples int32) {
	syscall.Syscall6(gpFramebufferTexture2DMultisampleEXT, 6, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), uintptr(samples))
}
func FramebufferTexture2DMultisampleIMG(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, samples int32) {
	syscall.Syscall6(gpFramebufferTexture2DMultisampleIMG, 6, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), uintptr(samples))
}
func FramebufferTexture3DOES(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
	syscall.Syscall6(gpFramebufferTexture3DOES, 6, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), uintptr(zoffset))
}
func FramebufferTextureEXT(target uint32, attachment uint32, texture uint32, level int32) {
	syscall.Syscall6(gpFramebufferTextureEXT, 4, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), 0, 0)
}

// attach a single layer of a texture object as a logical buffer of a framebuffer object
func FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
	syscall.Syscall6(gpFramebufferTextureLayer, 5, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(layer), 0)
}
func FramebufferTextureLayerDownsampleIMG(target uint32, attachment uint32, texture uint32, level int32, layer int32, xscale int32, yscale int32) {
	syscall.Syscall9(gpFramebufferTextureLayerDownsampleIMG, 7, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(layer), uintptr(xscale), uintptr(yscale), 0, 0)
}
func FramebufferTextureMultisampleMultiviewOVR(target uint32, attachment uint32, texture uint32, level int32, samples int32, baseViewIndex int32, numViews int32) {
	syscall.Syscall9(gpFramebufferTextureMultisampleMultiviewOVR, 7, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(samples), uintptr(baseViewIndex), uintptr(numViews), 0, 0)
}
func FramebufferTextureMultiviewOVR(target uint32, attachment uint32, texture uint32, level int32, baseViewIndex int32, numViews int32) {
	syscall.Syscall6(gpFramebufferTextureMultiviewOVR, 6, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(baseViewIndex), uintptr(numViews))
}
func FramebufferTextureOES(target uint32, attachment uint32, texture uint32, level int32) {
	syscall.Syscall6(gpFramebufferTextureOES, 4, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), 0, 0)
}

// define front- and back-facing polygons
func FrontFace(mode uint32) {
	syscall.Syscall(gpFrontFace, 1, uintptr(mode), 0, 0)
}

// generate buffer object names
func GenBuffers(n int32, buffers *uint32) {
	syscall.Syscall(gpGenBuffers, 2, uintptr(n), uintptr(unsafe.Pointer(buffers)), 0)
}
func GenFencesNV(n int32, fences *uint32) {
	syscall.Syscall(gpGenFencesNV, 2, uintptr(n), uintptr(unsafe.Pointer(fences)), 0)
}

// generate framebuffer object names
func GenFramebuffers(n int32, framebuffers *uint32) {
	syscall.Syscall(gpGenFramebuffers, 2, uintptr(n), uintptr(unsafe.Pointer(framebuffers)), 0)
}
func GenPathsNV(xrange int32) uint32 {
	ret, _, _ := syscall.Syscall(gpGenPathsNV, 1, uintptr(xrange), 0, 0)
	return (uint32)(ret)
}
func GenPerfMonitorsAMD(n int32, monitors *uint32) {
	syscall.Syscall(gpGenPerfMonitorsAMD, 2, uintptr(n), uintptr(unsafe.Pointer(monitors)), 0)
}

// reserve program pipeline object names
func GenProgramPipelines(n int32, pipelines *uint32) {
	syscall.Syscall(gpGenProgramPipelines, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}
func GenProgramPipelinesEXT(n int32, pipelines *uint32) {
	syscall.Syscall(gpGenProgramPipelinesEXT, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}

// generate query object names
func GenQueries(n int32, ids *uint32) {
	syscall.Syscall(gpGenQueries, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}
func GenQueriesEXT(n int32, ids *uint32) {
	syscall.Syscall(gpGenQueriesEXT, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// generate renderbuffer object names
func GenRenderbuffers(n int32, renderbuffers *uint32) {
	syscall.Syscall(gpGenRenderbuffers, 2, uintptr(n), uintptr(unsafe.Pointer(renderbuffers)), 0)
}

// generate sampler object names
func GenSamplers(count int32, samplers *uint32) {
	syscall.Syscall(gpGenSamplers, 2, uintptr(count), uintptr(unsafe.Pointer(samplers)), 0)
}
func GenSemaphoresEXT(n int32, semaphores *uint32) {
	syscall.Syscall(gpGenSemaphoresEXT, 2, uintptr(n), uintptr(unsafe.Pointer(semaphores)), 0)
}

// generate texture names
func GenTextures(n int32, textures *uint32) {
	syscall.Syscall(gpGenTextures, 2, uintptr(n), uintptr(unsafe.Pointer(textures)), 0)
}

// reserve transform feedback object names
func GenTransformFeedbacks(n int32, ids *uint32) {
	syscall.Syscall(gpGenTransformFeedbacks, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// generate vertex array object names
func GenVertexArrays(n int32, arrays *uint32) {
	syscall.Syscall(gpGenVertexArrays, 2, uintptr(n), uintptr(unsafe.Pointer(arrays)), 0)
}
func GenVertexArraysOES(n int32, arrays *uint32) {
	syscall.Syscall(gpGenVertexArraysOES, 2, uintptr(n), uintptr(unsafe.Pointer(arrays)), 0)
}

// generate mipmaps for a specified texture object
func GenerateMipmap(target uint32) {
	syscall.Syscall(gpGenerateMipmap, 1, uintptr(target), 0, 0)
}

// Returns information about an active attribute variable for the specified program object
func GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *uint8) {
	syscall.Syscall9(gpGetActiveAttrib, 7, uintptr(program), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(size)), uintptr(unsafe.Pointer(xtype)), uintptr(unsafe.Pointer(name)), 0, 0)
}

// Returns information about an active uniform variable for the specified program object
func GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *uint8) {
	syscall.Syscall9(gpGetActiveUniform, 7, uintptr(program), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(size)), uintptr(unsafe.Pointer(xtype)), uintptr(unsafe.Pointer(name)), 0, 0)
}

// retrieve the name of an active uniform block
func GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8) {
	syscall.Syscall6(gpGetActiveUniformBlockName, 5, uintptr(program), uintptr(uniformBlockIndex), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(uniformBlockName)), 0)
}

// query information about an active uniform block
func GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetActiveUniformBlockiv, 4, uintptr(program), uintptr(uniformBlockIndex), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// Returns information about several active uniform variables for the specified program object
func GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetActiveUniformsiv, 5, uintptr(program), uintptr(uniformCount), uintptr(unsafe.Pointer(uniformIndices)), uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}

// Returns the handles of the shader objects attached to a program object
func GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32) {
	syscall.Syscall6(gpGetAttachedShaders, 4, uintptr(program), uintptr(maxCount), uintptr(unsafe.Pointer(count)), uintptr(unsafe.Pointer(shaders)), 0, 0)
}

// Returns the location of an attribute variable
func GetAttribLocation(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetAttribLocation, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}
func GetBooleani_v(target uint32, index uint32, data *bool) {
	syscall.Syscall(gpGetBooleani_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetBooleanv(pname uint32, data *bool) {
	syscall.Syscall(gpGetBooleanv, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}

// return parameters of a buffer object
func GetBufferParameteri64v(target uint32, pname uint32, params *int64) {
	syscall.Syscall(gpGetBufferParameteri64v, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return parameters of a buffer object
func GetBufferParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetBufferParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return the pointer to a mapped buffer object's data store
func GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetBufferPointerv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetBufferPointervOES(target uint32, pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetBufferPointervOES, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetCoverageModulationTableNV(bufsize int32, v *float32) {
	syscall.Syscall(gpGetCoverageModulationTableNV, 2, uintptr(bufsize), uintptr(unsafe.Pointer(v)), 0)
}

// retrieve messages from the debug message log
func GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	ret, _, _ := syscall.Syscall9(gpGetDebugMessageLog, 8, uintptr(count), uintptr(bufSize), uintptr(unsafe.Pointer(sources)), uintptr(unsafe.Pointer(types)), uintptr(unsafe.Pointer(ids)), uintptr(unsafe.Pointer(severities)), uintptr(unsafe.Pointer(lengths)), uintptr(unsafe.Pointer(messageLog)), 0)
	return (uint32)(ret)
}
func GetDebugMessageLogKHR(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	ret, _, _ := syscall.Syscall9(gpGetDebugMessageLogKHR, 8, uintptr(count), uintptr(bufSize), uintptr(unsafe.Pointer(sources)), uintptr(unsafe.Pointer(types)), uintptr(unsafe.Pointer(ids)), uintptr(unsafe.Pointer(severities)), uintptr(unsafe.Pointer(lengths)), uintptr(unsafe.Pointer(messageLog)), 0)
	return (uint32)(ret)
}
func GetDriverControlStringQCOM(driverControl uint32, bufSize int32, length *int32, driverControlString *uint8) {
	syscall.Syscall6(gpGetDriverControlStringQCOM, 4, uintptr(driverControl), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(driverControlString)), 0, 0)
}
func GetDriverControlsQCOM(num *int32, size int32, driverControls *uint32) {
	syscall.Syscall(gpGetDriverControlsQCOM, 3, uintptr(unsafe.Pointer(num)), uintptr(size), uintptr(unsafe.Pointer(driverControls)))
}

// return error information
func GetError() uint32 {
	ret, _, _ := syscall.Syscall(gpGetError, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetFenceivNV(fence uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetFenceivNV, 3, uintptr(fence), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetFirstPerfQueryIdINTEL(queryId *uint32) {
	syscall.Syscall(gpGetFirstPerfQueryIdINTEL, 1, uintptr(unsafe.Pointer(queryId)), 0, 0)
}
func GetFloati_vNV(target uint32, index uint32, data *float32) {
	syscall.Syscall(gpGetFloati_vNV, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetFloati_vOES(target uint32, index uint32, data *float32) {
	syscall.Syscall(gpGetFloati_vOES, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetFloatv(pname uint32, data *float32) {
	syscall.Syscall(gpGetFloatv, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}
func GetFragDataIndexEXT(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetFragDataIndexEXT, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}

// query the bindings of color numbers to user-defined varying out variables
func GetFragDataLocation(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetFragDataLocation, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}

// retrieve information about attachments of a bound framebuffer object
func GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetFramebufferAttachmentParameteriv, 4, uintptr(target), uintptr(attachment), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// retrieve a named parameter from a framebuffer
func GetFramebufferParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetFramebufferParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetFramebufferPixelLocalStorageSizeEXT(target uint32) int32 {
	ret, _, _ := syscall.Syscall(gpGetFramebufferPixelLocalStorageSizeEXT, 1, uintptr(target), 0, 0)
	return (int32)(ret)
}

// check if the rendering context has not been lost due to software or hardware issues
func GetGraphicsResetStatus() uint32 {
	ret, _, _ := syscall.Syscall(gpGetGraphicsResetStatus, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetGraphicsResetStatusEXT() uint32 {
	ret, _, _ := syscall.Syscall(gpGetGraphicsResetStatusEXT, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetGraphicsResetStatusKHR() uint32 {
	ret, _, _ := syscall.Syscall(gpGetGraphicsResetStatusKHR, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetImageHandleNV(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
	ret, _, _ := syscall.Syscall6(gpGetImageHandleNV, 5, uintptr(texture), uintptr(level), boolToUintptr(layered), uintptr(layer), uintptr(format), 0)
	return (uint64)(ret)
}
func GetInteger64i_v(target uint32, index uint32, data *int64) {
	syscall.Syscall(gpGetInteger64i_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetInteger64v(pname uint32, data *int64) {
	syscall.Syscall(gpGetInteger64v, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}
func GetInteger64vAPPLE(pname uint32, params *int64) {
	syscall.Syscall(gpGetInteger64vAPPLE, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func GetIntegeri_v(target uint32, index uint32, data *int32) {
	syscall.Syscall(gpGetIntegeri_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetIntegeri_vEXT(target uint32, index uint32, data *int32) {
	syscall.Syscall(gpGetIntegeri_vEXT, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetIntegerv(pname uint32, data *int32) {
	syscall.Syscall(gpGetIntegerv, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}
func GetInternalformatSampleivNV(target uint32, internalformat uint32, samples int32, pname uint32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetInternalformatSampleivNV, 6, uintptr(target), uintptr(internalformat), uintptr(samples), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(params)))
}

// retrieve information about implementation-dependent support for internal formats
func GetInternalformativ(target uint32, internalformat uint32, pname uint32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetInternalformativ, 5, uintptr(target), uintptr(internalformat), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0)
}
func GetMemoryObjectDetachedResourcesuivNV(memory uint32, pname uint32, first int32, count int32, params *uint32) {
	syscall.Syscall6(gpGetMemoryObjectDetachedResourcesuivNV, 5, uintptr(memory), uintptr(pname), uintptr(first), uintptr(count), uintptr(unsafe.Pointer(params)), 0)
}
func GetMemoryObjectParameterivEXT(memoryObject uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetMemoryObjectParameterivEXT, 3, uintptr(memoryObject), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// retrieve the location of a sample
func GetMultisamplefv(pname uint32, index uint32, val *float32) {
	syscall.Syscall(gpGetMultisamplefv, 3, uintptr(pname), uintptr(index), uintptr(unsafe.Pointer(val)))
}
func GetNextPerfQueryIdINTEL(queryId uint32, nextQueryId *uint32) {
	syscall.Syscall(gpGetNextPerfQueryIdINTEL, 2, uintptr(queryId), uintptr(unsafe.Pointer(nextQueryId)), 0)
}

// retrieve the label of a named object identified within a namespace
func GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectLabel, 5, uintptr(identifier), uintptr(name), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0)
}
func GetObjectLabelEXT(xtype uint32, object uint32, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectLabelEXT, 5, uintptr(xtype), uintptr(object), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0)
}
func GetObjectLabelKHR(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectLabelKHR, 5, uintptr(identifier), uintptr(name), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0)
}

// retrieve the label of a sync object identified by a pointer
func GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectPtrLabel, 4, uintptr(ptr), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0, 0)
}
func GetObjectPtrLabelKHR(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectPtrLabelKHR, 4, uintptr(ptr), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0, 0)
}
func GetPathCommandsNV(path uint32, commands *uint8) {
	syscall.Syscall(gpGetPathCommandsNV, 2, uintptr(path), uintptr(unsafe.Pointer(commands)), 0)
}
func GetPathCoordsNV(path uint32, coords *float32) {
	syscall.Syscall(gpGetPathCoordsNV, 2, uintptr(path), uintptr(unsafe.Pointer(coords)), 0)
}
func GetPathDashArrayNV(path uint32, dashArray *float32) {
	syscall.Syscall(gpGetPathDashArrayNV, 2, uintptr(path), uintptr(unsafe.Pointer(dashArray)), 0)
}
func GetPathLengthNV(path uint32, startSegment int32, numSegments int32) float32 {
	ret, _, _ := syscall.Syscall(gpGetPathLengthNV, 3, uintptr(path), uintptr(startSegment), uintptr(numSegments))
	return math.Float32frombits(uint32(ret))
}
func GetPathMetricRangeNV(metricQueryMask uint32, firstPathName uint32, numPaths int32, stride int32, metrics *float32) {
	syscall.Syscall6(gpGetPathMetricRangeNV, 5, uintptr(metricQueryMask), uintptr(firstPathName), uintptr(numPaths), uintptr(stride), uintptr(unsafe.Pointer(metrics)), 0)
}
func GetPathMetricsNV(metricQueryMask uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, stride int32, metrics *float32) {
	syscall.Syscall9(gpGetPathMetricsNV, 7, uintptr(metricQueryMask), uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(stride), uintptr(unsafe.Pointer(metrics)), 0, 0)
}
func GetPathParameterfvNV(path uint32, pname uint32, value *float32) {
	syscall.Syscall(gpGetPathParameterfvNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func GetPathParameterivNV(path uint32, pname uint32, value *int32) {
	syscall.Syscall(gpGetPathParameterivNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func GetPathSpacingNV(pathListMode uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, advanceScale float32, kerningScale float32, transformType uint32, returnedSpacing *float32) {
	syscall.Syscall9(gpGetPathSpacingNV, 9, uintptr(pathListMode), uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(math.Float32bits(advanceScale)), uintptr(math.Float32bits(kerningScale)), uintptr(transformType), uintptr(unsafe.Pointer(returnedSpacing)))
}
func GetPerfCounterInfoINTEL(queryId uint32, counterId uint32, counterNameLength uint32, counterName *uint8, counterDescLength uint32, counterDesc *uint8, counterOffset *uint32, counterDataSize *uint32, counterTypeEnum *uint32, counterDataTypeEnum *uint32, rawCounterMaxValue *uint64) {
	syscall.Syscall12(gpGetPerfCounterInfoINTEL, 11, uintptr(queryId), uintptr(counterId), uintptr(counterNameLength), uintptr(unsafe.Pointer(counterName)), uintptr(counterDescLength), uintptr(unsafe.Pointer(counterDesc)), uintptr(unsafe.Pointer(counterOffset)), uintptr(unsafe.Pointer(counterDataSize)), uintptr(unsafe.Pointer(counterTypeEnum)), uintptr(unsafe.Pointer(counterDataTypeEnum)), uintptr(unsafe.Pointer(rawCounterMaxValue)), 0)
}
func GetPerfMonitorCounterDataAMD(monitor uint32, pname uint32, dataSize int32, data *uint32, bytesWritten *int32) {
	syscall.Syscall6(gpGetPerfMonitorCounterDataAMD, 5, uintptr(monitor), uintptr(pname), uintptr(dataSize), uintptr(unsafe.Pointer(data)), uintptr(unsafe.Pointer(bytesWritten)), 0)
}
func GetPerfMonitorCounterInfoAMD(group uint32, counter uint32, pname uint32, data unsafe.Pointer) {
	syscall.Syscall6(gpGetPerfMonitorCounterInfoAMD, 4, uintptr(group), uintptr(counter), uintptr(pname), uintptr(data), 0, 0)
}
func GetPerfMonitorCounterStringAMD(group uint32, counter uint32, bufSize int32, length *int32, counterString *uint8) {
	syscall.Syscall6(gpGetPerfMonitorCounterStringAMD, 5, uintptr(group), uintptr(counter), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(counterString)), 0)
}
func GetPerfMonitorCountersAMD(group uint32, numCounters *int32, maxActiveCounters *int32, counterSize int32, counters *uint32) {
	syscall.Syscall6(gpGetPerfMonitorCountersAMD, 5, uintptr(group), uintptr(unsafe.Pointer(numCounters)), uintptr(unsafe.Pointer(maxActiveCounters)), uintptr(counterSize), uintptr(unsafe.Pointer(counters)), 0)
}
func GetPerfMonitorGroupStringAMD(group uint32, bufSize int32, length *int32, groupString *uint8) {
	syscall.Syscall6(gpGetPerfMonitorGroupStringAMD, 4, uintptr(group), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(groupString)), 0, 0)
}
func GetPerfMonitorGroupsAMD(numGroups *int32, groupsSize int32, groups *uint32) {
	syscall.Syscall(gpGetPerfMonitorGroupsAMD, 3, uintptr(unsafe.Pointer(numGroups)), uintptr(groupsSize), uintptr(unsafe.Pointer(groups)))
}
func GetPerfQueryDataINTEL(queryHandle uint32, flags uint32, dataSize int32, data unsafe.Pointer, bytesWritten *uint32) {
	syscall.Syscall6(gpGetPerfQueryDataINTEL, 5, uintptr(queryHandle), uintptr(flags), uintptr(dataSize), uintptr(data), uintptr(unsafe.Pointer(bytesWritten)), 0)
}
func GetPerfQueryIdByNameINTEL(queryName *uint8, queryId *uint32) {
	syscall.Syscall(gpGetPerfQueryIdByNameINTEL, 2, uintptr(unsafe.Pointer(queryName)), uintptr(unsafe.Pointer(queryId)), 0)
}
func GetPerfQueryInfoINTEL(queryId uint32, queryNameLength uint32, queryName *uint8, dataSize *uint32, noCounters *uint32, noInstances *uint32, capsMask *uint32) {
	syscall.Syscall9(gpGetPerfQueryInfoINTEL, 7, uintptr(queryId), uintptr(queryNameLength), uintptr(unsafe.Pointer(queryName)), uintptr(unsafe.Pointer(dataSize)), uintptr(unsafe.Pointer(noCounters)), uintptr(unsafe.Pointer(noInstances)), uintptr(unsafe.Pointer(capsMask)), 0, 0)
}

// return the address of the specified pointer
func GetPointerv(pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetPointerv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func GetPointervKHR(pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetPointervKHR, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}

// return a binary representation of a program object's compiled and linked executable source
func GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer) {
	syscall.Syscall6(gpGetProgramBinary, 5, uintptr(program), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(binaryFormat)), uintptr(binary), 0)
}
func GetProgramBinaryOES(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer) {
	syscall.Syscall6(gpGetProgramBinaryOES, 5, uintptr(program), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(binaryFormat)), uintptr(binary), 0)
}

// Returns the information log for a program object
func GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetProgramInfoLog, 4, uintptr(program), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}
func GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetProgramInterfaceiv, 4, uintptr(program), uintptr(programInterface), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// retrieve the info log string from a program pipeline object
func GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetProgramPipelineInfoLog, 4, uintptr(pipeline), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}
func GetProgramPipelineInfoLogEXT(pipeline uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetProgramPipelineInfoLogEXT, 4, uintptr(pipeline), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}
func GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetProgramPipelineiv, 3, uintptr(pipeline), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetProgramPipelineivEXT(pipeline uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetProgramPipelineivEXT, 3, uintptr(pipeline), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// query the index of a named resource within a program
func GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpGetProgramResourceIndex, 3, uintptr(program), uintptr(programInterface), uintptr(unsafe.Pointer(name)))
	return (uint32)(ret)
}

// query the location of a named resource within a program
func GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetProgramResourceLocation, 3, uintptr(program), uintptr(programInterface), uintptr(unsafe.Pointer(name)))
	return (int32)(ret)
}
func GetProgramResourceLocationIndexEXT(program uint32, programInterface uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetProgramResourceLocationIndexEXT, 3, uintptr(program), uintptr(programInterface), uintptr(unsafe.Pointer(name)))
	return (int32)(ret)
}

// query the name of an indexed resource within a program
func GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8) {
	syscall.Syscall6(gpGetProgramResourceName, 6, uintptr(program), uintptr(programInterface), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(name)))
}
func GetProgramResourcefvNV(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, bufSize int32, length *int32, params *float32) {
	syscall.Syscall9(gpGetProgramResourcefvNV, 8, uintptr(program), uintptr(programInterface), uintptr(index), uintptr(propCount), uintptr(unsafe.Pointer(props)), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(params)), 0)
}
func GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, bufSize int32, length *int32, params *int32) {
	syscall.Syscall9(gpGetProgramResourceiv, 8, uintptr(program), uintptr(programInterface), uintptr(index), uintptr(propCount), uintptr(unsafe.Pointer(props)), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(params)), 0)
}

// Returns a parameter from a program object
func GetProgramiv(program uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetProgramiv, 3, uintptr(program), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryObjecti64vEXT(id uint32, pname uint32, params *int64) {
	syscall.Syscall(gpGetQueryObjecti64vEXT, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryObjectivEXT(id uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetQueryObjectivEXT, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryObjectui64vEXT(id uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpGetQueryObjectui64vEXT, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return parameters of a query object
func GetQueryObjectuiv(id uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetQueryObjectuiv, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryObjectuivEXT(id uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetQueryObjectuivEXT, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return parameters of a query object target
func GetQueryiv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetQueryiv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryivEXT(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetQueryivEXT, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// retrieve information about a bound renderbuffer object
func GetRenderbufferParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetRenderbufferParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterIivEXT(sampler uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetSamplerParameterIivEXT, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterIivOES(sampler uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetSamplerParameterIivOES, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterIuivEXT(sampler uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetSamplerParameterIuivEXT, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterIuivOES(sampler uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetSamplerParameterIuivOES, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterfv(sampler uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetSamplerParameterfv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameteriv(sampler uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetSamplerParameteriv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSemaphoreParameterui64vEXT(semaphore uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpGetSemaphoreParameterui64vEXT, 3, uintptr(semaphore), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Returns the information log for a shader object
func GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetShaderInfoLog, 4, uintptr(shader), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}

// retrieve the range and precision for numeric formats supported by the shader compiler
func GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, xrange *int32, precision *int32) {
	syscall.Syscall6(gpGetShaderPrecisionFormat, 4, uintptr(shadertype), uintptr(precisiontype), uintptr(unsafe.Pointer(xrange)), uintptr(unsafe.Pointer(precision)), 0, 0)
}

// Returns the source code string from a shader object
func GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8) {
	syscall.Syscall6(gpGetShaderSource, 4, uintptr(shader), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(source)), 0, 0)
}

// Returns a parameter from a shader object
func GetShaderiv(shader uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetShaderiv, 3, uintptr(shader), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetShadingRateImagePaletteNV(viewport uint32, entry uint32, rate *uint32) {
	syscall.Syscall(gpGetShadingRateImagePaletteNV, 3, uintptr(viewport), uintptr(entry), uintptr(unsafe.Pointer(rate)))
}
func GetShadingRateSampleLocationivNV(rate uint32, samples uint32, index uint32, location *int32) {
	syscall.Syscall6(gpGetShadingRateSampleLocationivNV, 4, uintptr(rate), uintptr(samples), uintptr(index), uintptr(unsafe.Pointer(location)), 0, 0)
}

// return a string describing the current GL connection
func GetString(name uint32) *uint8 {
	ret, _, _ := syscall.Syscall(gpGetString, 1, uintptr(name), 0, 0)
	return (*uint8)(unsafe.Pointer(ret))
}
func GetStringi(name uint32, index uint32) *uint8 {
	ret, _, _ := syscall.Syscall(gpGetStringi, 2, uintptr(name), uintptr(index), 0)
	return (*uint8)(unsafe.Pointer(ret))
}

// query the properties of a sync object
func GetSynciv(sync uintptr, pname uint32, bufSize int32, length *int32, values *int32) {
	syscall.Syscall6(gpGetSynciv, 5, uintptr(sync), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(values)), 0)
}
func GetSyncivAPPLE(sync uintptr, pname uint32, bufSize int32, length *int32, values *int32) {
	syscall.Syscall6(gpGetSyncivAPPLE, 5, uintptr(sync), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(values)), 0)
}
func GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetTexLevelParameterfv, 4, uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetTexLevelParameteriv, 4, uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTexParameterIivEXT(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTexParameterIivEXT, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameterIivOES(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTexParameterIivOES, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetTexParameterIuivEXT, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameterIuivOES(target uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetTexParameterIuivOES, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameterfv(target uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetTexParameterfv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTexParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTextureHandleIMG(texture uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureHandleIMG, 1, uintptr(texture), 0, 0)
	return (uint64)(ret)
}
func GetTextureHandleNV(texture uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureHandleNV, 1, uintptr(texture), 0, 0)
	return (uint64)(ret)
}
func GetTextureSamplerHandleIMG(texture uint32, sampler uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureSamplerHandleIMG, 2, uintptr(texture), uintptr(sampler), 0)
	return (uint64)(ret)
}
func GetTextureSamplerHandleNV(texture uint32, sampler uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureSamplerHandleNV, 2, uintptr(texture), uintptr(sampler), 0)
	return (uint64)(ret)
}

// retrieve information about varying variables selected for transform feedback
func GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *uint8) {
	syscall.Syscall9(gpGetTransformFeedbackVarying, 7, uintptr(program), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(size)), uintptr(unsafe.Pointer(xtype)), uintptr(unsafe.Pointer(name)), 0, 0)
}
func GetTranslatedShaderSourceANGLE(shader uint32, bufsize int32, length *int32, source *uint8) {
	syscall.Syscall6(gpGetTranslatedShaderSourceANGLE, 4, uintptr(shader), uintptr(bufsize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(source)), 0, 0)
}

// retrieve the index of a named uniform block
func GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpGetUniformBlockIndex, 2, uintptr(program), uintptr(unsafe.Pointer(uniformBlockName)), 0)
	return (uint32)(ret)
}

// retrieve the index of a named uniform block
func GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32) {
	syscall.Syscall6(gpGetUniformIndices, 4, uintptr(program), uintptr(uniformCount), uintptr(unsafe.Pointer(uniformNames)), uintptr(unsafe.Pointer(uniformIndices)), 0, 0)
}

// Returns the location of a uniform variable
func GetUniformLocation(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetUniformLocation, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}

// Returns the value of a uniform variable
func GetUniformfv(program uint32, location int32, params *float32) {
	syscall.Syscall(gpGetUniformfv, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformi64vNV(program uint32, location int32, params *int64) {
	syscall.Syscall(gpGetUniformi64vNV, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}

// Returns the value of a uniform variable
func GetUniformiv(program uint32, location int32, params *int32) {
	syscall.Syscall(gpGetUniformiv, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformuiv(program uint32, location int32, params *uint32) {
	syscall.Syscall(gpGetUniformuiv, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUnsignedBytei_vEXT(target uint32, index uint32, data *uint8) {
	syscall.Syscall(gpGetUnsignedBytei_vEXT, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetUnsignedBytevEXT(pname uint32, data *uint8) {
	syscall.Syscall(gpGetUnsignedBytevEXT, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}

// Return a generic vertex attribute parameter
func GetVertexAttribIiv(index uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetVertexAttribIiv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribIuiv(index uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetVertexAttribIuiv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return the address of the specified generic vertex attribute pointer
func GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer) {
	syscall.Syscall(gpGetVertexAttribPointerv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(pointer)))
}
func GetVertexAttribPointerWithOffsetv(index uint32, pname uint32, offset **uintptr) {
	syscall.Syscall(gpGetVertexAttribPointerv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(offset)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribfv(index uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetVertexAttribfv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribiv(index uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetVertexAttribiv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return value has type C.GLVULKANPROCNV.
func GetVkProcAddrNV(name *uint8) unsafe.Pointer {
	ret, _, _ := syscall.Syscall(gpGetVkProcAddrNV, 1, uintptr(unsafe.Pointer(name)), 0, 0)
	return (unsafe.Pointer)(ret)
}
func GetnUniformfv(program uint32, location int32, bufSize int32, params *float32) {
	syscall.Syscall6(gpGetnUniformfv, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformfvEXT(program uint32, location int32, bufSize int32, params *float32) {
	syscall.Syscall6(gpGetnUniformfvEXT, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformfvKHR(program uint32, location int32, bufSize int32, params *float32) {
	syscall.Syscall6(gpGetnUniformfvKHR, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformiv(program uint32, location int32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetnUniformiv, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformivEXT(program uint32, location int32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetnUniformivEXT, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformivKHR(program uint32, location int32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetnUniformivKHR, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformuiv(program uint32, location int32, bufSize int32, params *uint32) {
	syscall.Syscall6(gpGetnUniformuiv, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformuivKHR(program uint32, location int32, bufSize int32, params *uint32) {
	syscall.Syscall6(gpGetnUniformuivKHR, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}

// specify implementation-specific hints
func Hint(target uint32, mode uint32) {
	syscall.Syscall(gpHint, 2, uintptr(target), uintptr(mode), 0)
}
func ImportMemoryFdEXT(memory uint32, size uint64, handleType uint32, fd int32) {
	syscall.Syscall6(gpImportMemoryFdEXT, 4, uintptr(memory), uintptr(size), uintptr(handleType), uintptr(fd), 0, 0)
}
func ImportMemoryWin32HandleEXT(memory uint32, size uint64, handleType uint32, handle unsafe.Pointer) {
	syscall.Syscall6(gpImportMemoryWin32HandleEXT, 4, uintptr(memory), uintptr(size), uintptr(handleType), uintptr(handle), 0, 0)
}
func ImportMemoryWin32NameEXT(memory uint32, size uint64, handleType uint32, name unsafe.Pointer) {
	syscall.Syscall6(gpImportMemoryWin32NameEXT, 4, uintptr(memory), uintptr(size), uintptr(handleType), uintptr(name), 0, 0)
}
func ImportSemaphoreFdEXT(semaphore uint32, handleType uint32, fd int32) {
	syscall.Syscall(gpImportSemaphoreFdEXT, 3, uintptr(semaphore), uintptr(handleType), uintptr(fd))
}
func ImportSemaphoreWin32HandleEXT(semaphore uint32, handleType uint32, handle unsafe.Pointer) {
	syscall.Syscall(gpImportSemaphoreWin32HandleEXT, 3, uintptr(semaphore), uintptr(handleType), uintptr(handle))
}
func ImportSemaphoreWin32NameEXT(semaphore uint32, handleType uint32, name unsafe.Pointer) {
	syscall.Syscall(gpImportSemaphoreWin32NameEXT, 3, uintptr(semaphore), uintptr(handleType), uintptr(name))
}
func InsertEventMarkerEXT(length int32, marker *uint8) {
	syscall.Syscall(gpInsertEventMarkerEXT, 2, uintptr(length), uintptr(unsafe.Pointer(marker)), 0)
}
func InterpolatePathsNV(resultPath uint32, pathA uint32, pathB uint32, weight float32) {
	syscall.Syscall6(gpInterpolatePathsNV, 4, uintptr(resultPath), uintptr(pathA), uintptr(pathB), uintptr(math.Float32bits(weight)), 0, 0)
}

// invalidate the content of some or all of a framebuffer's attachments
func InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32) {
	syscall.Syscall(gpInvalidateFramebuffer, 3, uintptr(target), uintptr(numAttachments), uintptr(unsafe.Pointer(attachments)))
}

// invalidate the content of a region of some or all of a framebuffer's attachments
func InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpInvalidateSubFramebuffer, 7, uintptr(target), uintptr(numAttachments), uintptr(unsafe.Pointer(attachments)), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}

// determine if a name corresponds to a buffer object
func IsBuffer(buffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsBuffer, 1, uintptr(buffer), 0, 0)
	return ret != 0
}
func IsEnabled(cap uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsEnabled, 1, uintptr(cap), 0, 0)
	return ret != 0
}
func IsEnablediEXT(target uint32, index uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsEnablediEXT, 2, uintptr(target), uintptr(index), 0)
	return ret != 0
}
func IsEnablediNV(target uint32, index uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsEnablediNV, 2, uintptr(target), uintptr(index), 0)
	return ret != 0
}
func IsEnablediOES(target uint32, index uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsEnablediOES, 2, uintptr(target), uintptr(index), 0)
	return ret != 0
}
func IsFenceNV(fence uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsFenceNV, 1, uintptr(fence), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a framebuffer object
func IsFramebuffer(framebuffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsFramebuffer, 1, uintptr(framebuffer), 0, 0)
	return ret != 0
}
func IsImageHandleResidentNV(handle uint64) bool {
	ret, _, _ := syscall.Syscall(gpIsImageHandleResidentNV, 1, uintptr(handle), 0, 0)
	return ret != 0
}
func IsMemoryObjectEXT(memoryObject uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsMemoryObjectEXT, 1, uintptr(memoryObject), 0, 0)
	return ret != 0
}
func IsPathNV(path uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsPathNV, 1, uintptr(path), 0, 0)
	return ret != 0
}
func IsPointInFillPathNV(path uint32, mask uint32, x float32, y float32) bool {
	ret, _, _ := syscall.Syscall6(gpIsPointInFillPathNV, 4, uintptr(path), uintptr(mask), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), 0, 0)
	return ret != 0
}
func IsPointInStrokePathNV(path uint32, x float32, y float32) bool {
	ret, _, _ := syscall.Syscall(gpIsPointInStrokePathNV, 3, uintptr(path), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)))
	return ret != 0
}

// Determines if a name corresponds to a program object
func IsProgram(program uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsProgram, 1, uintptr(program), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a program pipeline object
func IsProgramPipeline(pipeline uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsProgramPipeline, 1, uintptr(pipeline), 0, 0)
	return ret != 0
}
func IsProgramPipelineEXT(pipeline uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsProgramPipelineEXT, 1, uintptr(pipeline), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a query object
func IsQuery(id uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsQuery, 1, uintptr(id), 0, 0)
	return ret != 0
}
func IsQueryEXT(id uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsQueryEXT, 1, uintptr(id), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a renderbuffer object
func IsRenderbuffer(renderbuffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsRenderbuffer, 1, uintptr(renderbuffer), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a sampler object
func IsSampler(sampler uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsSampler, 1, uintptr(sampler), 0, 0)
	return ret != 0
}
func IsSemaphoreEXT(semaphore uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsSemaphoreEXT, 1, uintptr(semaphore), 0, 0)
	return ret != 0
}

// Determines if a name corresponds to a shader object
func IsShader(shader uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsShader, 1, uintptr(shader), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a sync object
func IsSync(sync uintptr) bool {
	ret, _, _ := syscall.Syscall(gpIsSync, 1, uintptr(sync), 0, 0)
	return ret != 0
}
func IsSyncAPPLE(sync uintptr) bool {
	ret, _, _ := syscall.Syscall(gpIsSyncAPPLE, 1, uintptr(sync), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a texture
func IsTexture(texture uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsTexture, 1, uintptr(texture), 0, 0)
	return ret != 0
}
func IsTextureHandleResidentNV(handle uint64) bool {
	ret, _, _ := syscall.Syscall(gpIsTextureHandleResidentNV, 1, uintptr(handle), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a transform feedback object
func IsTransformFeedback(id uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsTransformFeedback, 1, uintptr(id), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a vertex array object
func IsVertexArray(array uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsVertexArray, 1, uintptr(array), 0, 0)
	return ret != 0
}
func IsVertexArrayOES(array uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsVertexArrayOES, 1, uintptr(array), 0, 0)
	return ret != 0
}
func LabelObjectEXT(xtype uint32, object uint32, length int32, label *uint8) {
	syscall.Syscall6(gpLabelObjectEXT, 4, uintptr(xtype), uintptr(object), uintptr(length), uintptr(unsafe.Pointer(label)), 0, 0)
}

// specify the width of rasterized lines
func LineWidth(width float32) {
	syscall.Syscall(gpLineWidth, 1, uintptr(math.Float32bits(width)), 0, 0)
}

// Links a program object
func LinkProgram(program uint32) {
	syscall.Syscall(gpLinkProgram, 1, uintptr(program), 0, 0)
}
func MakeImageHandleNonResidentNV(handle uint64) {
	syscall.Syscall(gpMakeImageHandleNonResidentNV, 1, uintptr(handle), 0, 0)
}
func MakeImageHandleResidentNV(handle uint64, access uint32) {
	syscall.Syscall(gpMakeImageHandleResidentNV, 2, uintptr(handle), uintptr(access), 0)
}
func MakeTextureHandleNonResidentNV(handle uint64) {
	syscall.Syscall(gpMakeTextureHandleNonResidentNV, 1, uintptr(handle), 0, 0)
}
func MakeTextureHandleResidentNV(handle uint64) {
	syscall.Syscall(gpMakeTextureHandleResidentNV, 1, uintptr(handle), 0, 0)
}
func MapBufferOES(target uint32, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall(gpMapBufferOES, 2, uintptr(target), uintptr(access), 0)
	return (unsafe.Pointer)(ret)
}

// map all or part of a buffer object's data store into the client's address space
func MapBufferRange(target uint32, offset int, length int, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall6(gpMapBufferRange, 4, uintptr(target), uintptr(offset), uintptr(length), uintptr(access), 0, 0)
	return (unsafe.Pointer)(ret)
}
func MapBufferRangeEXT(target uint32, offset int, length int, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall6(gpMapBufferRangeEXT, 4, uintptr(target), uintptr(offset), uintptr(length), uintptr(access), 0, 0)
	return (unsafe.Pointer)(ret)
}
func MatrixFrustumEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	syscall.Syscall9(gpMatrixFrustumEXT, 7, uintptr(mode), uintptr(math.Float64bits(left)), uintptr(math.Float64bits(right)), uintptr(math.Float64bits(bottom)), uintptr(math.Float64bits(top)), uintptr(math.Float64bits(zNear)), uintptr(math.Float64bits(zFar)), 0, 0)
}
func MatrixLoad3x2fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoad3x2fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoad3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoad3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadIdentityEXT(mode uint32) {
	syscall.Syscall(gpMatrixLoadIdentityEXT, 1, uintptr(mode), 0, 0)
}
func MatrixLoadTranspose3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoadTranspose3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadTransposedEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixLoadTransposedEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadTransposefEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoadTransposefEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoaddEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixLoaddEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadfEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoadfEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMult3x2fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixMult3x2fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMult3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixMult3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultTranspose3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixMultTranspose3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultTransposedEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixMultTransposedEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultTransposefEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixMultTransposefEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultdEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixMultdEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultfEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixMultfEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixOrthoEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	syscall.Syscall9(gpMatrixOrthoEXT, 7, uintptr(mode), uintptr(math.Float64bits(left)), uintptr(math.Float64bits(right)), uintptr(math.Float64bits(bottom)), uintptr(math.Float64bits(top)), uintptr(math.Float64bits(zNear)), uintptr(math.Float64bits(zFar)), 0, 0)
}
func MatrixPopEXT(mode uint32) {
	syscall.Syscall(gpMatrixPopEXT, 1, uintptr(mode), 0, 0)
}
func MatrixPushEXT(mode uint32) {
	syscall.Syscall(gpMatrixPushEXT, 1, uintptr(mode), 0, 0)
}
func MatrixRotatedEXT(mode uint32, angle float64, x float64, y float64, z float64) {
	syscall.Syscall6(gpMatrixRotatedEXT, 5, uintptr(mode), uintptr(math.Float64bits(angle)), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0)
}
func MatrixRotatefEXT(mode uint32, angle float32, x float32, y float32, z float32) {
	syscall.Syscall6(gpMatrixRotatefEXT, 5, uintptr(mode), uintptr(math.Float32bits(angle)), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0)
}
func MatrixScaledEXT(mode uint32, x float64, y float64, z float64) {
	syscall.Syscall6(gpMatrixScaledEXT, 4, uintptr(mode), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func MatrixScalefEXT(mode uint32, x float32, y float32, z float32) {
	syscall.Syscall6(gpMatrixScalefEXT, 4, uintptr(mode), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0, 0)
}
func MatrixTranslatedEXT(mode uint32, x float64, y float64, z float64) {
	syscall.Syscall6(gpMatrixTranslatedEXT, 4, uintptr(mode), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func MatrixTranslatefEXT(mode uint32, x float32, y float32, z float32) {
	syscall.Syscall6(gpMatrixTranslatefEXT, 4, uintptr(mode), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0, 0)
}
func MaxShaderCompilerThreadsKHR(count uint32) {
	syscall.Syscall(gpMaxShaderCompilerThreadsKHR, 1, uintptr(count), 0, 0)
}

// defines a barrier ordering memory transactions
func MemoryBarrier(barriers uint32) {
	syscall.Syscall(gpMemoryBarrier, 1, uintptr(barriers), 0, 0)
}
func MemoryBarrierByRegion(barriers uint32) {
	syscall.Syscall(gpMemoryBarrierByRegion, 1, uintptr(barriers), 0, 0)
}
func MemoryObjectParameterivEXT(memoryObject uint32, pname uint32, params *int32) {
	syscall.Syscall(gpMemoryObjectParameterivEXT, 3, uintptr(memoryObject), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func MinSampleShadingOES(value float32) {
	syscall.Syscall(gpMinSampleShadingOES, 1, uintptr(math.Float32bits(value)), 0, 0)
}
func MultiDrawArraysEXT(mode uint32, first *int32, count *int32, primcount int32) {
	syscall.Syscall6(gpMultiDrawArraysEXT, 4, uintptr(mode), uintptr(unsafe.Pointer(first)), uintptr(unsafe.Pointer(count)), uintptr(primcount), 0, 0)
}
func MultiDrawArraysIndirectEXT(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawArraysIndirectEXT, 4, uintptr(mode), uintptr(indirect), uintptr(drawcount), uintptr(stride), 0, 0)
}
func MultiDrawElementsBaseVertexEXT(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, primcount int32, basevertex *int32) {
	syscall.Syscall6(gpMultiDrawElementsBaseVertexEXT, 6, uintptr(mode), uintptr(unsafe.Pointer(count)), uintptr(xtype), uintptr(unsafe.Pointer(indices)), uintptr(primcount), uintptr(unsafe.Pointer(basevertex)))
}
func MultiDrawElementsEXT(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, primcount int32) {
	syscall.Syscall6(gpMultiDrawElementsEXT, 5, uintptr(mode), uintptr(unsafe.Pointer(count)), uintptr(xtype), uintptr(unsafe.Pointer(indices)), uintptr(primcount), 0)
}
func MultiDrawElementsIndirectEXT(mode uint32, xtype uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawElementsIndirectEXT, 5, uintptr(mode), uintptr(xtype), uintptr(indirect), uintptr(drawcount), uintptr(stride), 0)
}
func MultiDrawMeshTasksIndirectCountNV(indirect int, drawcount int, maxdrawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawMeshTasksIndirectCountNV, 4, uintptr(indirect), uintptr(drawcount), uintptr(maxdrawcount), uintptr(stride), 0, 0)
}
func MultiDrawMeshTasksIndirectNV(indirect int, drawcount int32, stride int32) {
	syscall.Syscall(gpMultiDrawMeshTasksIndirectNV, 3, uintptr(indirect), uintptr(drawcount), uintptr(stride))
}
func NamedBufferAttachMemoryNV(buffer uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpNamedBufferAttachMemoryNV, 3, uintptr(buffer), uintptr(memory), uintptr(offset))
}

// Parameter clientBuffer has type C.GLeglClientBufferEXT.
func NamedBufferStorageExternalEXT(buffer uint32, offset int, size int, clientBuffer unsafe.Pointer, flags uint32) {
	syscall.Syscall6(gpNamedBufferStorageExternalEXT, 5, uintptr(buffer), uintptr(offset), uintptr(size), uintptr(clientBuffer), uintptr(flags), 0)
}
func NamedBufferStorageMemEXT(buffer uint32, size int, memory uint32, offset uint64) {
	syscall.Syscall6(gpNamedBufferStorageMemEXT, 4, uintptr(buffer), uintptr(size), uintptr(memory), uintptr(offset), 0, 0)
}
func NamedFramebufferSampleLocationsfvNV(framebuffer uint32, start uint32, count int32, v *float32) {
	syscall.Syscall6(gpNamedFramebufferSampleLocationsfvNV, 4, uintptr(framebuffer), uintptr(start), uintptr(count), uintptr(unsafe.Pointer(v)), 0, 0)
}
func NamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpNamedRenderbufferStorageMultisampleAdvancedAMD, 6, uintptr(renderbuffer), uintptr(samples), uintptr(storageSamples), uintptr(internalformat), uintptr(width), uintptr(height))
}

// label a named object identified within a namespace
func ObjectLabel(identifier uint32, name uint32, length int32, label *uint8) {
	syscall.Syscall6(gpObjectLabel, 4, uintptr(identifier), uintptr(name), uintptr(length), uintptr(unsafe.Pointer(label)), 0, 0)
}
func ObjectLabelKHR(identifier uint32, name uint32, length int32, label *uint8) {
	syscall.Syscall6(gpObjectLabelKHR, 4, uintptr(identifier), uintptr(name), uintptr(length), uintptr(unsafe.Pointer(label)), 0, 0)
}

// label a sync object identified by a pointer
func ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8) {
	syscall.Syscall(gpObjectPtrLabel, 3, uintptr(ptr), uintptr(length), uintptr(unsafe.Pointer(label)))
}
func ObjectPtrLabelKHR(ptr unsafe.Pointer, length int32, label *uint8) {
	syscall.Syscall(gpObjectPtrLabelKHR, 3, uintptr(ptr), uintptr(length), uintptr(unsafe.Pointer(label)))
}
func PatchParameteriEXT(pname uint32, value int32) {
	syscall.Syscall(gpPatchParameteriEXT, 2, uintptr(pname), uintptr(value), 0)
}
func PatchParameteriOES(pname uint32, value int32) {
	syscall.Syscall(gpPatchParameteriOES, 2, uintptr(pname), uintptr(value), 0)
}
func PathCommandsNV(path uint32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall6(gpPathCommandsNV, 6, uintptr(path), uintptr(numCommands), uintptr(unsafe.Pointer(commands)), uintptr(numCoords), uintptr(coordType), uintptr(coords))
}
func PathCoordsNV(path uint32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall6(gpPathCoordsNV, 4, uintptr(path), uintptr(numCoords), uintptr(coordType), uintptr(coords), 0, 0)
}
func PathCoverDepthFuncNV(xfunc uint32) {
	syscall.Syscall(gpPathCoverDepthFuncNV, 1, uintptr(xfunc), 0, 0)
}
func PathDashArrayNV(path uint32, dashCount int32, dashArray *float32) {
	syscall.Syscall(gpPathDashArrayNV, 3, uintptr(path), uintptr(dashCount), uintptr(unsafe.Pointer(dashArray)))
}
func PathGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32 {
	ret, _, _ := syscall.Syscall9(gpPathGlyphIndexArrayNV, 8, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(firstGlyphIndex), uintptr(numGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)), 0)
	return (uint32)(ret)
}
func PathGlyphIndexRangeNV(fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, pathParameterTemplate uint32, emScale float32, baseAndCount *uint32) uint32 {
	ret, _, _ := syscall.Syscall6(gpPathGlyphIndexRangeNV, 6, uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)), uintptr(unsafe.Pointer(baseAndCount)))
	return (uint32)(ret)
}
func PathGlyphRangeNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyph uint32, numGlyphs int32, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
	syscall.Syscall9(gpPathGlyphRangeNV, 9, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(firstGlyph), uintptr(numGlyphs), uintptr(handleMissingGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)))
}
func PathGlyphsNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, numGlyphs int32, xtype uint32, charcodes unsafe.Pointer, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
	syscall.Syscall12(gpPathGlyphsNV, 10, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(numGlyphs), uintptr(xtype), uintptr(charcodes), uintptr(handleMissingGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)), 0, 0)
}
func PathMemoryGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontSize int, fontData unsafe.Pointer, faceIndex int32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32 {
	ret, _, _ := syscall.Syscall9(gpPathMemoryGlyphIndexArrayNV, 9, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontSize), uintptr(fontData), uintptr(faceIndex), uintptr(firstGlyphIndex), uintptr(numGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)))
	return (uint32)(ret)
}
func PathParameterfNV(path uint32, pname uint32, value float32) {
	syscall.Syscall(gpPathParameterfNV, 3, uintptr(path), uintptr(pname), uintptr(math.Float32bits(value)))
}
func PathParameterfvNV(path uint32, pname uint32, value *float32) {
	syscall.Syscall(gpPathParameterfvNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func PathParameteriNV(path uint32, pname uint32, value int32) {
	syscall.Syscall(gpPathParameteriNV, 3, uintptr(path), uintptr(pname), uintptr(value))
}
func PathParameterivNV(path uint32, pname uint32, value *int32) {
	syscall.Syscall(gpPathParameterivNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func PathStencilDepthOffsetNV(factor float32, units float32) {
	syscall.Syscall(gpPathStencilDepthOffsetNV, 2, uintptr(math.Float32bits(factor)), uintptr(math.Float32bits(units)), 0)
}
func PathStencilFuncNV(xfunc uint32, ref int32, mask uint32) {
	syscall.Syscall(gpPathStencilFuncNV, 3, uintptr(xfunc), uintptr(ref), uintptr(mask))
}
func PathStringNV(path uint32, format uint32, length int32, pathString unsafe.Pointer) {
	syscall.Syscall6(gpPathStringNV, 4, uintptr(path), uintptr(format), uintptr(length), uintptr(pathString), 0, 0)
}
func PathSubCommandsNV(path uint32, commandStart int32, commandsToDelete int32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall9(gpPathSubCommandsNV, 8, uintptr(path), uintptr(commandStart), uintptr(commandsToDelete), uintptr(numCommands), uintptr(unsafe.Pointer(commands)), uintptr(numCoords), uintptr(coordType), uintptr(coords), 0)
}
func PathSubCoordsNV(path uint32, coordStart int32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall6(gpPathSubCoordsNV, 5, uintptr(path), uintptr(coordStart), uintptr(numCoords), uintptr(coordType), uintptr(coords), 0)
}

// pause transform feedback operations
func PauseTransformFeedback() {
	syscall.Syscall(gpPauseTransformFeedback, 0, 0, 0, 0)
}

// set pixel storage modes
func PixelStorei(pname uint32, param int32) {
	syscall.Syscall(gpPixelStorei, 2, uintptr(pname), uintptr(param), 0)
}
func PointAlongPathNV(path uint32, startSegment int32, numSegments int32, distance float32, x *float32, y *float32, tangentX *float32, tangentY *float32) bool {
	ret, _, _ := syscall.Syscall9(gpPointAlongPathNV, 8, uintptr(path), uintptr(startSegment), uintptr(numSegments), uintptr(math.Float32bits(distance)), uintptr(unsafe.Pointer(x)), uintptr(unsafe.Pointer(y)), uintptr(unsafe.Pointer(tangentX)), uintptr(unsafe.Pointer(tangentY)), 0)
	return ret != 0
}
func PolygonModeNV(face uint32, mode uint32) {
	syscall.Syscall(gpPolygonModeNV, 2, uintptr(face), uintptr(mode), 0)
}

// set the scale and units used to calculate depth values
func PolygonOffset(factor float32, units float32) {
	syscall.Syscall(gpPolygonOffset, 2, uintptr(math.Float32bits(factor)), uintptr(math.Float32bits(units)), 0)
}
func PolygonOffsetClampEXT(factor float32, units float32, clamp float32) {
	syscall.Syscall(gpPolygonOffsetClampEXT, 3, uintptr(math.Float32bits(factor)), uintptr(math.Float32bits(units)), uintptr(math.Float32bits(clamp)))
}

// pop the active debug group
func PopDebugGroup() {
	syscall.Syscall(gpPopDebugGroup, 0, 0, 0, 0)
}
func PopDebugGroupKHR() {
	syscall.Syscall(gpPopDebugGroupKHR, 0, 0, 0, 0)
}
func PopGroupMarkerEXT() {
	syscall.Syscall(gpPopGroupMarkerEXT, 0, 0, 0, 0)
}
func PrimitiveBoundingBoxEXT(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32) {
	syscall.Syscall9(gpPrimitiveBoundingBoxEXT, 8, uintptr(math.Float32bits(minX)), uintptr(math.Float32bits(minY)), uintptr(math.Float32bits(minZ)), uintptr(math.Float32bits(minW)), uintptr(math.Float32bits(maxX)), uintptr(math.Float32bits(maxY)), uintptr(math.Float32bits(maxZ)), uintptr(math.Float32bits(maxW)), 0)
}
func PrimitiveBoundingBoxOES(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32) {
	syscall.Syscall9(gpPrimitiveBoundingBoxOES, 8, uintptr(math.Float32bits(minX)), uintptr(math.Float32bits(minY)), uintptr(math.Float32bits(minZ)), uintptr(math.Float32bits(minW)), uintptr(math.Float32bits(maxX)), uintptr(math.Float32bits(maxY)), uintptr(math.Float32bits(maxZ)), uintptr(math.Float32bits(maxW)), 0)
}

// load a program object with a program binary
func ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
	syscall.Syscall6(gpProgramBinary, 4, uintptr(program), uintptr(binaryFormat), uintptr(binary), uintptr(length), 0, 0)
}
func ProgramBinaryOES(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
	syscall.Syscall6(gpProgramBinaryOES, 4, uintptr(program), uintptr(binaryFormat), uintptr(binary), uintptr(length), 0, 0)
}

// specify a parameter for a program object
func ProgramParameteri(program uint32, pname uint32, value int32) {
	syscall.Syscall(gpProgramParameteri, 3, uintptr(program), uintptr(pname), uintptr(value))
}
func ProgramParameteriEXT(program uint32, pname uint32, value int32) {
	syscall.Syscall(gpProgramParameteriEXT, 3, uintptr(program), uintptr(pname), uintptr(value))
}
func ProgramPathFragmentInputGenNV(program uint32, location int32, genMode uint32, components int32, coeffs *float32) {
	syscall.Syscall6(gpProgramPathFragmentInputGenNV, 5, uintptr(program), uintptr(location), uintptr(genMode), uintptr(components), uintptr(unsafe.Pointer(coeffs)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1f(program uint32, location int32, v0 float32) {
	syscall.Syscall(gpProgramUniform1f, 3, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)))
}
func ProgramUniform1fEXT(program uint32, location int32, v0 float32) {
	syscall.Syscall(gpProgramUniform1fEXT, 3, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform1fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform1fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1i(program uint32, location int32, v0 int32) {
	syscall.Syscall(gpProgramUniform1i, 3, uintptr(program), uintptr(location), uintptr(v0))
}
func ProgramUniform1i64NV(program uint32, location int32, x int64) {
	syscall.Syscall(gpProgramUniform1i64NV, 3, uintptr(program), uintptr(location), uintptr(x))
}
func ProgramUniform1i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform1i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1iEXT(program uint32, location int32, v0 int32) {
	syscall.Syscall(gpProgramUniform1iEXT, 3, uintptr(program), uintptr(location), uintptr(v0))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform1iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform1ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1ui(program uint32, location int32, v0 uint32) {
	syscall.Syscall(gpProgramUniform1ui, 3, uintptr(program), uintptr(location), uintptr(v0))
}
func ProgramUniform1ui64NV(program uint32, location int32, x uint64) {
	syscall.Syscall(gpProgramUniform1ui64NV, 3, uintptr(program), uintptr(location), uintptr(x))
}
func ProgramUniform1ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform1ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1uiEXT(program uint32, location int32, v0 uint32) {
	syscall.Syscall(gpProgramUniform1uiEXT, 3, uintptr(program), uintptr(location), uintptr(v0))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform1uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform1uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32) {
	syscall.Syscall6(gpProgramUniform2f, 4, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), 0, 0)
}
func ProgramUniform2fEXT(program uint32, location int32, v0 float32, v1 float32) {
	syscall.Syscall6(gpProgramUniform2fEXT, 4, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform2fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform2fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32) {
	syscall.Syscall6(gpProgramUniform2i, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}
func ProgramUniform2i64NV(program uint32, location int32, x int64, y int64) {
	syscall.Syscall6(gpProgramUniform2i64NV, 4, uintptr(program), uintptr(location), uintptr(x), uintptr(y), 0, 0)
}
func ProgramUniform2i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform2i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2iEXT(program uint32, location int32, v0 int32, v1 int32) {
	syscall.Syscall6(gpProgramUniform2iEXT, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform2iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform2ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32) {
	syscall.Syscall6(gpProgramUniform2ui, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}
func ProgramUniform2ui64NV(program uint32, location int32, x uint64, y uint64) {
	syscall.Syscall6(gpProgramUniform2ui64NV, 4, uintptr(program), uintptr(location), uintptr(x), uintptr(y), 0, 0)
}
func ProgramUniform2ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform2ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2uiEXT(program uint32, location int32, v0 uint32, v1 uint32) {
	syscall.Syscall6(gpProgramUniform2uiEXT, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform2uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform2uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
	syscall.Syscall6(gpProgramUniform3f, 5, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), 0)
}
func ProgramUniform3fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
	syscall.Syscall6(gpProgramUniform3fEXT, 5, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform3fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform3fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
	syscall.Syscall6(gpProgramUniform3i, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}
func ProgramUniform3i64NV(program uint32, location int32, x int64, y int64, z int64) {
	syscall.Syscall6(gpProgramUniform3i64NV, 5, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0)
}
func ProgramUniform3i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform3i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
	syscall.Syscall6(gpProgramUniform3iEXT, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform3iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform3ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
	syscall.Syscall6(gpProgramUniform3ui, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}
func ProgramUniform3ui64NV(program uint32, location int32, x uint64, y uint64, z uint64) {
	syscall.Syscall6(gpProgramUniform3ui64NV, 5, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0)
}
func ProgramUniform3ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform3ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
	syscall.Syscall6(gpProgramUniform3uiEXT, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform3uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform3uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	syscall.Syscall6(gpProgramUniform4f, 6, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), uintptr(math.Float32bits(v3)))
}
func ProgramUniform4fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	syscall.Syscall6(gpProgramUniform4fEXT, 6, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), uintptr(math.Float32bits(v3)))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform4fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform4fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	syscall.Syscall6(gpProgramUniform4i, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}
func ProgramUniform4i64NV(program uint32, location int32, x int64, y int64, z int64, w int64) {
	syscall.Syscall6(gpProgramUniform4i64NV, 6, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w))
}
func ProgramUniform4i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform4i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	syscall.Syscall6(gpProgramUniform4iEXT, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform4iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform4ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	syscall.Syscall6(gpProgramUniform4ui, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}
func ProgramUniform4ui64NV(program uint32, location int32, x uint64, y uint64, z uint64, w uint64) {
	syscall.Syscall6(gpProgramUniform4ui64NV, 6, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w))
}
func ProgramUniform4ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform4ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	syscall.Syscall6(gpProgramUniform4uiEXT, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform4uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform4uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniformHandleui64IMG(program uint32, location int32, value uint64) {
	syscall.Syscall(gpProgramUniformHandleui64IMG, 3, uintptr(program), uintptr(location), uintptr(value))
}
func ProgramUniformHandleui64NV(program uint32, location int32, value uint64) {
	syscall.Syscall(gpProgramUniformHandleui64NV, 3, uintptr(program), uintptr(location), uintptr(value))
}
func ProgramUniformHandleui64vIMG(program uint32, location int32, count int32, values *uint64) {
	syscall.Syscall6(gpProgramUniformHandleui64vIMG, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(values)), 0, 0)
}
func ProgramUniformHandleui64vNV(program uint32, location int32, count int32, values *uint64) {
	syscall.Syscall6(gpProgramUniformHandleui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(values)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x3fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x3fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x4fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x4fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x2fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x2fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x4fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x4fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x2fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x2fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x3fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x3fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// push a named debug group into the command stream
func PushDebugGroup(source uint32, id uint32, length int32, message *uint8) {
	syscall.Syscall6(gpPushDebugGroup, 4, uintptr(source), uintptr(id), uintptr(length), uintptr(unsafe.Pointer(message)), 0, 0)
}
func PushDebugGroupKHR(source uint32, id uint32, length int32, message *uint8) {
	syscall.Syscall6(gpPushDebugGroupKHR, 4, uintptr(source), uintptr(id), uintptr(length), uintptr(unsafe.Pointer(message)), 0, 0)
}
func PushGroupMarkerEXT(length int32, marker *uint8) {
	syscall.Syscall(gpPushGroupMarkerEXT, 2, uintptr(length), uintptr(unsafe.Pointer(marker)), 0)
}
func QueryCounterEXT(id uint32, target uint32) {
	syscall.Syscall(gpQueryCounterEXT, 2, uintptr(id), uintptr(target), 0)
}
func RasterSamplesEXT(samples uint32, fixedsamplelocations bool) {
	syscall.Syscall(gpRasterSamplesEXT, 2, uintptr(samples), boolToUintptr(fixedsamplelocations), 0)
}

// select a color buffer source for pixels
func ReadBuffer(src uint32) {
	syscall.Syscall(gpReadBuffer, 1, uintptr(src), 0, 0)
}
func ReadBufferIndexedEXT(src uint32, index int32) {
	syscall.Syscall(gpReadBufferIndexedEXT, 2, uintptr(src), uintptr(index), 0)
}
func ReadBufferNV(mode uint32) {
	syscall.Syscall(gpReadBufferNV, 1, uintptr(mode), 0, 0)
}

// read a block of pixels from the frame buffer
func ReadPixels(x int32, y int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpReadPixels, 7, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}

// read a block of pixels from the frame buffer
func ReadnPixels(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpReadnPixels, 8, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(data), 0)
}
func ReadnPixelsEXT(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpReadnPixelsEXT, 8, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(data), 0)
}
func ReadnPixelsKHR(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpReadnPixelsKHR, 8, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(data), 0)
}
func ReleaseKeyedMutexWin32EXT(memory uint32, key uint64) bool {
	ret, _, _ := syscall.Syscall(gpReleaseKeyedMutexWin32EXT, 2, uintptr(memory), uintptr(key), 0)
	return ret != 0
}

// release resources consumed by the implementation's shader compiler
func ReleaseShaderCompiler() {
	syscall.Syscall(gpReleaseShaderCompiler, 0, 0, 0, 0)
}

// establish data storage, format and dimensions of a     renderbuffer object's image
func RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorage, 4, uintptr(target), uintptr(internalformat), uintptr(width), uintptr(height), 0, 0)
}

// establish data storage, format, dimensions and sample count of     a renderbuffer object's image
func RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisample, 5, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func RenderbufferStorageMultisampleANGLE(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleANGLE, 5, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func RenderbufferStorageMultisampleAPPLE(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleAPPLE, 5, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func RenderbufferStorageMultisampleAdvancedAMD(target uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleAdvancedAMD, 6, uintptr(target), uintptr(samples), uintptr(storageSamples), uintptr(internalformat), uintptr(width), uintptr(height))
}
func RenderbufferStorageMultisampleEXT(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleEXT, 5, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func RenderbufferStorageMultisampleIMG(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleIMG, 5, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func RenderbufferStorageMultisampleNV(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleNV, 5, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func ResetMemoryObjectParameterNV(memory uint32, pname uint32) {
	syscall.Syscall(gpResetMemoryObjectParameterNV, 2, uintptr(memory), uintptr(pname), 0)
}
func ResolveDepthValuesNV() {
	syscall.Syscall(gpResolveDepthValuesNV, 0, 0, 0, 0)
}
func ResolveMultisampleFramebufferAPPLE() {
	syscall.Syscall(gpResolveMultisampleFramebufferAPPLE, 0, 0, 0, 0)
}

// resume transform feedback operations
func ResumeTransformFeedback() {
	syscall.Syscall(gpResumeTransformFeedback, 0, 0, 0, 0)
}

// specify multisample coverage parameters
func SampleCoverage(value float32, invert bool) {
	syscall.Syscall(gpSampleCoverage, 2, uintptr(math.Float32bits(value)), boolToUintptr(invert), 0)
}

// set the value of a sub-word of the sample mask
func SampleMaski(maskNumber uint32, mask uint32) {
	syscall.Syscall(gpSampleMaski, 2, uintptr(maskNumber), uintptr(mask), 0)
}
func SamplerParameterIivEXT(sampler uint32, pname uint32, param *int32) {
	syscall.Syscall(gpSamplerParameterIivEXT, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameterIivOES(sampler uint32, pname uint32, param *int32) {
	syscall.Syscall(gpSamplerParameterIivOES, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameterIuivEXT(sampler uint32, pname uint32, param *uint32) {
	syscall.Syscall(gpSamplerParameterIuivEXT, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameterIuivOES(sampler uint32, pname uint32, param *uint32) {
	syscall.Syscall(gpSamplerParameterIuivOES, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameterf(sampler uint32, pname uint32, param float32) {
	syscall.Syscall(gpSamplerParameterf, 3, uintptr(sampler), uintptr(pname), uintptr(math.Float32bits(param)))
}
func SamplerParameterfv(sampler uint32, pname uint32, param *float32) {
	syscall.Syscall(gpSamplerParameterfv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameteri(sampler uint32, pname uint32, param int32) {
	syscall.Syscall(gpSamplerParameteri, 3, uintptr(sampler), uintptr(pname), uintptr(param))
}
func SamplerParameteriv(sampler uint32, pname uint32, param *int32) {
	syscall.Syscall(gpSamplerParameteriv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}

// define the scissor box
func Scissor(x int32, y int32, width int32, height int32) {
	syscall.Syscall6(gpScissor, 4, uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}
func ScissorArrayvNV(first uint32, count int32, v *int32) {
	syscall.Syscall(gpScissorArrayvNV, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ScissorArrayvOES(first uint32, count int32, v *int32) {
	syscall.Syscall(gpScissorArrayvOES, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ScissorExclusiveArrayvNV(first uint32, count int32, v *int32) {
	syscall.Syscall(gpScissorExclusiveArrayvNV, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ScissorExclusiveNV(x int32, y int32, width int32, height int32) {
	syscall.Syscall6(gpScissorExclusiveNV, 4, uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}
func ScissorIndexedNV(index uint32, left int32, bottom int32, width int32, height int32) {
	syscall.Syscall6(gpScissorIndexedNV, 5, uintptr(index), uintptr(left), uintptr(bottom), uintptr(width), uintptr(height), 0)
}
func ScissorIndexedOES(index uint32, left int32, bottom int32, width int32, height int32) {
	syscall.Syscall6(gpScissorIndexedOES, 5, uintptr(index), uintptr(left), uintptr(bottom), uintptr(width), uintptr(height), 0)
}
func ScissorIndexedvNV(index uint32, v *int32) {
	syscall.Syscall(gpScissorIndexedvNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func ScissorIndexedvOES(index uint32, v *int32) {
	syscall.Syscall(gpScissorIndexedvOES, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func SelectPerfMonitorCountersAMD(monitor uint32, enable bool, group uint32, numCounters int32, counterList *uint32) {
	syscall.Syscall6(gpSelectPerfMonitorCountersAMD, 5, uintptr(monitor), boolToUintptr(enable), uintptr(group), uintptr(numCounters), uintptr(unsafe.Pointer(counterList)), 0)
}
func SemaphoreParameterui64vEXT(semaphore uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpSemaphoreParameterui64vEXT, 3, uintptr(semaphore), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func SetFenceNV(fence uint32, condition uint32) {
	syscall.Syscall(gpSetFenceNV, 2, uintptr(fence), uintptr(condition), 0)
}

// load pre-compiled shader binaries
func ShaderBinary(count int32, shaders *uint32, binaryformat uint32, binary unsafe.Pointer, length int32) {
	syscall.Syscall6(gpShaderBinary, 5, uintptr(count), uintptr(unsafe.Pointer(shaders)), uintptr(binaryformat), uintptr(binary), uintptr(length), 0)
}

// Replaces the source code in a shader object
func ShaderSource(shader uint32, count int32, xstring **uint8, length *int32) {
	syscall.Syscall6(gpShaderSource, 4, uintptr(shader), uintptr(count), uintptr(unsafe.Pointer(xstring)), uintptr(unsafe.Pointer(length)), 0, 0)
}
func ShadingRateImageBarrierNV(synchronize bool) {
	syscall.Syscall(gpShadingRateImageBarrierNV, 1, boolToUintptr(synchronize), 0, 0)
}
func ShadingRateImagePaletteNV(viewport uint32, first uint32, count int32, rates *uint32) {
	syscall.Syscall6(gpShadingRateImagePaletteNV, 4, uintptr(viewport), uintptr(first), uintptr(count), uintptr(unsafe.Pointer(rates)), 0, 0)
}
func ShadingRateSampleOrderCustomNV(rate uint32, samples uint32, locations *int32) {
	syscall.Syscall(gpShadingRateSampleOrderCustomNV, 3, uintptr(rate), uintptr(samples), uintptr(unsafe.Pointer(locations)))
}
func ShadingRateSampleOrderNV(order uint32) {
	syscall.Syscall(gpShadingRateSampleOrderNV, 1, uintptr(order), 0, 0)
}
func SignalSemaphoreEXT(semaphore uint32, numBufferBarriers uint32, buffers *uint32, numTextureBarriers uint32, textures *uint32, dstLayouts *uint32) {
	syscall.Syscall6(gpSignalSemaphoreEXT, 6, uintptr(semaphore), uintptr(numBufferBarriers), uintptr(unsafe.Pointer(buffers)), uintptr(numTextureBarriers), uintptr(unsafe.Pointer(textures)), uintptr(unsafe.Pointer(dstLayouts)))
}
func SignalVkFenceNV(vkFence uint64) {
	syscall.Syscall(gpSignalVkFenceNV, 1, uintptr(vkFence), 0, 0)
}
func SignalVkSemaphoreNV(vkSemaphore uint64) {
	syscall.Syscall(gpSignalVkSemaphoreNV, 1, uintptr(vkSemaphore), 0, 0)
}
func StartTilingQCOM(x uint32, y uint32, width uint32, height uint32, preserveMask uint32) {
	syscall.Syscall6(gpStartTilingQCOM, 5, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(preserveMask), 0)
}
func StencilFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilFillPathInstancedNV, 8, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(fillMode), uintptr(mask), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0)
}
func StencilFillPathNV(path uint32, fillMode uint32, mask uint32) {
	syscall.Syscall(gpStencilFillPathNV, 3, uintptr(path), uintptr(fillMode), uintptr(mask))
}

// set front and back function and reference value for stencil testing
func StencilFunc(xfunc uint32, ref int32, mask uint32) {
	syscall.Syscall(gpStencilFunc, 3, uintptr(xfunc), uintptr(ref), uintptr(mask))
}

// set front and/or back function and reference value for stencil testing
func StencilFuncSeparate(face uint32, xfunc uint32, ref int32, mask uint32) {
	syscall.Syscall6(gpStencilFuncSeparate, 4, uintptr(face), uintptr(xfunc), uintptr(ref), uintptr(mask), 0, 0)
}

// control the front and back writing of individual bits in the stencil planes
func StencilMask(mask uint32) {
	syscall.Syscall(gpStencilMask, 1, uintptr(mask), 0, 0)
}

// control the front and/or back writing of individual bits in the stencil planes
func StencilMaskSeparate(face uint32, mask uint32) {
	syscall.Syscall(gpStencilMaskSeparate, 2, uintptr(face), uintptr(mask), 0)
}

// set front and back stencil test actions
func StencilOp(fail uint32, zfail uint32, zpass uint32) {
	syscall.Syscall(gpStencilOp, 3, uintptr(fail), uintptr(zfail), uintptr(zpass))
}

// set front and/or back stencil test actions
func StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
	syscall.Syscall6(gpStencilOpSeparate, 4, uintptr(face), uintptr(sfail), uintptr(dpfail), uintptr(dppass), 0, 0)
}
func StencilStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilStrokePathInstancedNV, 8, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(reference), uintptr(mask), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0)
}
func StencilStrokePathNV(path uint32, reference int32, mask uint32) {
	syscall.Syscall(gpStencilStrokePathNV, 3, uintptr(path), uintptr(reference), uintptr(mask))
}
func StencilThenCoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilThenCoverFillPathInstancedNV, 9, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(fillMode), uintptr(mask), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)))
}
func StencilThenCoverFillPathNV(path uint32, fillMode uint32, mask uint32, coverMode uint32) {
	syscall.Syscall6(gpStencilThenCoverFillPathNV, 4, uintptr(path), uintptr(fillMode), uintptr(mask), uintptr(coverMode), 0, 0)
}
func StencilThenCoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilThenCoverStrokePathInstancedNV, 9, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(reference), uintptr(mask), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)))
}
func StencilThenCoverStrokePathNV(path uint32, reference int32, mask uint32, coverMode uint32) {
	syscall.Syscall6(gpStencilThenCoverStrokePathNV, 4, uintptr(path), uintptr(reference), uintptr(mask), uintptr(coverMode), 0, 0)
}
func SubpixelPrecisionBiasNV(xbits uint32, ybits uint32) {
	syscall.Syscall(gpSubpixelPrecisionBiasNV, 2, uintptr(xbits), uintptr(ybits), 0)
}
func TestFenceNV(fence uint32) bool {
	ret, _, _ := syscall.Syscall(gpTestFenceNV, 1, uintptr(fence), 0, 0)
	return ret != 0
}
func TexAttachMemoryNV(target uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpTexAttachMemoryNV, 3, uintptr(target), uintptr(memory), uintptr(offset))
}
func TexBufferEXT(target uint32, internalformat uint32, buffer uint32) {
	syscall.Syscall(gpTexBufferEXT, 3, uintptr(target), uintptr(internalformat), uintptr(buffer))
}
func TexBufferOES(target uint32, internalformat uint32, buffer uint32) {
	syscall.Syscall(gpTexBufferOES, 3, uintptr(target), uintptr(internalformat), uintptr(buffer))
}
func TexBufferRangeEXT(target uint32, internalformat uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpTexBufferRangeEXT, 5, uintptr(target), uintptr(internalformat), uintptr(buffer), uintptr(offset), uintptr(size), 0)
}
func TexBufferRangeOES(target uint32, internalformat uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpTexBufferRangeOES, 5, uintptr(target), uintptr(internalformat), uintptr(buffer), uintptr(offset), uintptr(size), 0)
}

// specify a two-dimensional texture image
func TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTexImage2D, 9, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels))
}

// specify a three-dimensional texture image
func TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTexImage3D, 10, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}
func TexImage3DOES(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTexImage3DOES, 10, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}
func TexPageCommitmentEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool) {
	syscall.Syscall9(gpTexPageCommitmentEXT, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(commit))
}
func TexParameterIivEXT(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTexParameterIivEXT, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameterIivOES(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTexParameterIivOES, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpTexParameterIuivEXT, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameterIuivOES(target uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpTexParameterIuivOES, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameterf(target uint32, pname uint32, param float32) {
	syscall.Syscall(gpTexParameterf, 3, uintptr(target), uintptr(pname), uintptr(math.Float32bits(param)))
}
func TexParameterfv(target uint32, pname uint32, params *float32) {
	syscall.Syscall(gpTexParameterfv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameteri(target uint32, pname uint32, param int32) {
	syscall.Syscall(gpTexParameteri, 3, uintptr(target), uintptr(pname), uintptr(param))
}
func TexParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTexParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexStorage1DEXT(target uint32, levels int32, internalformat uint32, width int32) {
	syscall.Syscall6(gpTexStorage1DEXT, 4, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), 0, 0)
}

// simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
func TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpTexStorage2D, 5, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func TexStorage2DEXT(target uint32, levels int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpTexStorage2DEXT, 5, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}

// specify storage for a two-dimensional multisample texture
func TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	syscall.Syscall6(gpTexStorage2DMultisample, 6, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), boolToUintptr(fixedsamplelocations))
}

// simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
func TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	syscall.Syscall6(gpTexStorage3D, 6, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth))
}
func TexStorage3DEXT(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	syscall.Syscall6(gpTexStorage3DEXT, 6, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth))
}
func TexStorage3DMultisampleOES(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	syscall.Syscall9(gpTexStorage3DMultisampleOES, 7, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(fixedsamplelocations), 0, 0)
}
func TexStorageMem1DEXT(target uint32, levels int32, internalFormat uint32, width int32, memory uint32, offset uint64) {
	syscall.Syscall6(gpTexStorageMem1DEXT, 6, uintptr(target), uintptr(levels), uintptr(internalFormat), uintptr(width), uintptr(memory), uintptr(offset))
}
func TexStorageMem2DEXT(target uint32, levels int32, internalFormat uint32, width int32, height int32, memory uint32, offset uint64) {
	syscall.Syscall9(gpTexStorageMem2DEXT, 7, uintptr(target), uintptr(levels), uintptr(internalFormat), uintptr(width), uintptr(height), uintptr(memory), uintptr(offset), 0, 0)
}
func TexStorageMem2DMultisampleEXT(target uint32, samples int32, internalFormat uint32, width int32, height int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	syscall.Syscall9(gpTexStorageMem2DMultisampleEXT, 8, uintptr(target), uintptr(samples), uintptr(internalFormat), uintptr(width), uintptr(height), boolToUintptr(fixedSampleLocations), uintptr(memory), uintptr(offset), 0)
}
func TexStorageMem3DEXT(target uint32, levels int32, internalFormat uint32, width int32, height int32, depth int32, memory uint32, offset uint64) {
	syscall.Syscall9(gpTexStorageMem3DEXT, 8, uintptr(target), uintptr(levels), uintptr(internalFormat), uintptr(width), uintptr(height), uintptr(depth), uintptr(memory), uintptr(offset), 0)
}
func TexStorageMem3DMultisampleEXT(target uint32, samples int32, internalFormat uint32, width int32, height int32, depth int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	syscall.Syscall9(gpTexStorageMem3DMultisampleEXT, 9, uintptr(target), uintptr(samples), uintptr(internalFormat), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(fixedSampleLocations), uintptr(memory), uintptr(offset))
}

// specify a two-dimensional texture subimage
func TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTexSubImage2D, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels))
}

// specify a three-dimensional texture subimage
func TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTexSubImage3D, 11, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func TexSubImage3DOES(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTexSubImage3DOES, 11, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func TextureAttachMemoryNV(texture uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpTextureAttachMemoryNV, 3, uintptr(texture), uintptr(memory), uintptr(offset))
}
func TextureFoveationParametersQCOM(texture uint32, layer uint32, focalPoint uint32, focalX float32, focalY float32, gainX float32, gainY float32, foveaArea float32) {
	syscall.Syscall9(gpTextureFoveationParametersQCOM, 8, uintptr(texture), uintptr(layer), uintptr(focalPoint), uintptr(math.Float32bits(focalX)), uintptr(math.Float32bits(focalY)), uintptr(math.Float32bits(gainX)), uintptr(math.Float32bits(gainY)), uintptr(math.Float32bits(foveaArea)), 0)
}
func TextureStorage1DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32) {
	syscall.Syscall6(gpTextureStorage1DEXT, 5, uintptr(texture), uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), 0)
}
func TextureStorage2DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpTextureStorage2DEXT, 6, uintptr(texture), uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height))
}
func TextureStorage3DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	syscall.Syscall9(gpTextureStorage3DEXT, 7, uintptr(texture), uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), 0, 0)
}
func TextureStorageMem1DEXT(texture uint32, levels int32, internalFormat uint32, width int32, memory uint32, offset uint64) {
	syscall.Syscall6(gpTextureStorageMem1DEXT, 6, uintptr(texture), uintptr(levels), uintptr(internalFormat), uintptr(width), uintptr(memory), uintptr(offset))
}
func TextureStorageMem2DEXT(texture uint32, levels int32, internalFormat uint32, width int32, height int32, memory uint32, offset uint64) {
	syscall.Syscall9(gpTextureStorageMem2DEXT, 7, uintptr(texture), uintptr(levels), uintptr(internalFormat), uintptr(width), uintptr(height), uintptr(memory), uintptr(offset), 0, 0)
}
func TextureStorageMem2DMultisampleEXT(texture uint32, samples int32, internalFormat uint32, width int32, height int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	syscall.Syscall9(gpTextureStorageMem2DMultisampleEXT, 8, uintptr(texture), uintptr(samples), uintptr(internalFormat), uintptr(width), uintptr(height), boolToUintptr(fixedSampleLocations), uintptr(memory), uintptr(offset), 0)
}
func TextureStorageMem3DEXT(texture uint32, levels int32, internalFormat uint32, width int32, height int32, depth int32, memory uint32, offset uint64) {
	syscall.Syscall9(gpTextureStorageMem3DEXT, 8, uintptr(texture), uintptr(levels), uintptr(internalFormat), uintptr(width), uintptr(height), uintptr(depth), uintptr(memory), uintptr(offset), 0)
}
func TextureStorageMem3DMultisampleEXT(texture uint32, samples int32, internalFormat uint32, width int32, height int32, depth int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	syscall.Syscall9(gpTextureStorageMem3DMultisampleEXT, 9, uintptr(texture), uintptr(samples), uintptr(internalFormat), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(fixedSampleLocations), uintptr(memory), uintptr(offset))
}
func TextureViewEXT(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
	syscall.Syscall9(gpTextureViewEXT, 8, uintptr(texture), uintptr(target), uintptr(origtexture), uintptr(internalformat), uintptr(minlevel), uintptr(numlevels), uintptr(minlayer), uintptr(numlayers), 0)
}
func TextureViewOES(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
	syscall.Syscall9(gpTextureViewOES, 8, uintptr(texture), uintptr(target), uintptr(origtexture), uintptr(internalformat), uintptr(minlevel), uintptr(numlevels), uintptr(minlayer), uintptr(numlayers), 0)
}

// specify values to record in transform feedback buffers
func TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32) {
	syscall.Syscall6(gpTransformFeedbackVaryings, 4, uintptr(program), uintptr(count), uintptr(unsafe.Pointer(varyings)), uintptr(bufferMode), 0, 0)
}
func TransformPathNV(resultPath uint32, srcPath uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall6(gpTransformPathNV, 4, uintptr(resultPath), uintptr(srcPath), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func Uniform1f(location int32, v0 float32) {
	syscall.Syscall(gpUniform1f, 2, uintptr(location), uintptr(math.Float32bits(v0)), 0)
}

// Specify the value of a uniform variable for the current program object
func Uniform1fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform1fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1i(location int32, v0 int32) {
	syscall.Syscall(gpUniform1i, 2, uintptr(location), uintptr(v0), 0)
}
func Uniform1i64NV(location int32, x int64) {
	syscall.Syscall(gpUniform1i64NV, 2, uintptr(location), uintptr(x), 0)
}
func Uniform1i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform1i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform1iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1ui(location int32, v0 uint32) {
	syscall.Syscall(gpUniform1ui, 2, uintptr(location), uintptr(v0), 0)
}
func Uniform1ui64NV(location int32, x uint64) {
	syscall.Syscall(gpUniform1ui64NV, 2, uintptr(location), uintptr(x), 0)
}
func Uniform1ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform1ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform1uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2f(location int32, v0 float32, v1 float32) {
	syscall.Syscall(gpUniform2f, 3, uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform2fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2i(location int32, v0 int32, v1 int32) {
	syscall.Syscall(gpUniform2i, 3, uintptr(location), uintptr(v0), uintptr(v1))
}
func Uniform2i64NV(location int32, x int64, y int64) {
	syscall.Syscall(gpUniform2i64NV, 3, uintptr(location), uintptr(x), uintptr(y))
}
func Uniform2i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform2i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform2iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2ui(location int32, v0 uint32, v1 uint32) {
	syscall.Syscall(gpUniform2ui, 3, uintptr(location), uintptr(v0), uintptr(v1))
}
func Uniform2ui64NV(location int32, x uint64, y uint64) {
	syscall.Syscall(gpUniform2ui64NV, 3, uintptr(location), uintptr(x), uintptr(y))
}
func Uniform2ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform2ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform2uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3f(location int32, v0 float32, v1 float32, v2 float32) {
	syscall.Syscall6(gpUniform3f, 4, uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func Uniform3fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform3fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3i(location int32, v0 int32, v1 int32, v2 int32) {
	syscall.Syscall6(gpUniform3i, 4, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0, 0)
}
func Uniform3i64NV(location int32, x int64, y int64, z int64) {
	syscall.Syscall6(gpUniform3i64NV, 4, uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func Uniform3i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform3i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform3iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32) {
	syscall.Syscall6(gpUniform3ui, 4, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0, 0)
}
func Uniform3ui64NV(location int32, x uint64, y uint64, z uint64) {
	syscall.Syscall6(gpUniform3ui64NV, 4, uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func Uniform3ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform3ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform3uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	syscall.Syscall6(gpUniform4f, 5, uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), uintptr(math.Float32bits(v3)), 0)
}

// Specify the value of a uniform variable for the current program object
func Uniform4fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform4fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	syscall.Syscall6(gpUniform4i, 5, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3), 0)
}
func Uniform4i64NV(location int32, x int64, y int64, z int64, w int64) {
	syscall.Syscall6(gpUniform4i64NV, 5, uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func Uniform4i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform4i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform4iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	syscall.Syscall6(gpUniform4ui, 5, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3), 0)
}
func Uniform4ui64NV(location int32, x uint64, y uint64, z uint64, w uint64) {
	syscall.Syscall6(gpUniform4ui64NV, 5, uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func Uniform4ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform4ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform4uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// assign a binding point to an active uniform block
func UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32) {
	syscall.Syscall(gpUniformBlockBinding, 3, uintptr(program), uintptr(uniformBlockIndex), uintptr(uniformBlockBinding))
}
func UniformHandleui64IMG(location int32, value uint64) {
	syscall.Syscall(gpUniformHandleui64IMG, 2, uintptr(location), uintptr(value), 0)
}
func UniformHandleui64NV(location int32, value uint64) {
	syscall.Syscall(gpUniformHandleui64NV, 2, uintptr(location), uintptr(value), 0)
}
func UniformHandleui64vIMG(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniformHandleui64vIMG, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func UniformHandleui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniformHandleui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix2fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2x3fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix2x3fvNV(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2x3fvNV, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2x4fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix2x4fvNV(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2x4fvNV, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix3fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3x2fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix3x2fvNV(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3x2fvNV, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3x4fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix3x4fvNV(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3x4fvNV, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix4fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4x2fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix4x2fvNV(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4x2fvNV, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4x3fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix4x3fvNV(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4x3fvNV, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// release the mapping of a buffer object's data store into the client's address space
func UnmapBuffer(target uint32) bool {
	ret, _, _ := syscall.Syscall(gpUnmapBuffer, 1, uintptr(target), 0, 0)
	return ret != 0
}
func UnmapBufferOES(target uint32) bool {
	ret, _, _ := syscall.Syscall(gpUnmapBufferOES, 1, uintptr(target), 0, 0)
	return ret != 0
}

// Installs a program object as part of current rendering state
func UseProgram(program uint32) {
	syscall.Syscall(gpUseProgram, 1, uintptr(program), 0, 0)
}

// bind stages of a program object to a program pipeline
func UseProgramStages(pipeline uint32, stages uint32, program uint32) {
	syscall.Syscall(gpUseProgramStages, 3, uintptr(pipeline), uintptr(stages), uintptr(program))
}
func UseProgramStagesEXT(pipeline uint32, stages uint32, program uint32) {
	syscall.Syscall(gpUseProgramStagesEXT, 3, uintptr(pipeline), uintptr(stages), uintptr(program))
}
func UseShaderProgramEXT(xtype uint32, program uint32) {
	syscall.Syscall(gpUseShaderProgramEXT, 2, uintptr(xtype), uintptr(program), 0)
}

// Validates a program object
func ValidateProgram(program uint32) {
	syscall.Syscall(gpValidateProgram, 1, uintptr(program), 0, 0)
}

// validate a program pipeline object against current GL state
func ValidateProgramPipeline(pipeline uint32) {
	syscall.Syscall(gpValidateProgramPipeline, 1, uintptr(pipeline), 0, 0)
}
func ValidateProgramPipelineEXT(pipeline uint32) {
	syscall.Syscall(gpValidateProgramPipelineEXT, 1, uintptr(pipeline), 0, 0)
}
func VertexAttrib1f(index uint32, x float32) {
	syscall.Syscall(gpVertexAttrib1f, 2, uintptr(index), uintptr(math.Float32bits(x)), 0)
}
func VertexAttrib1fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib1fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib2f(index uint32, x float32, y float32) {
	syscall.Syscall(gpVertexAttrib2f, 3, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)))
}
func VertexAttrib2fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib2fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib3f(index uint32, x float32, y float32, z float32) {
	syscall.Syscall6(gpVertexAttrib3f, 4, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0, 0)
}
func VertexAttrib3fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib3fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32) {
	syscall.Syscall6(gpVertexAttrib4f, 5, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), uintptr(math.Float32bits(w)), 0)
}
func VertexAttrib4fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib4fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}

// associate a vertex attribute and a vertex buffer binding for a vertex array object
func VertexAttribBinding(attribindex uint32, bindingindex uint32) {
	syscall.Syscall(gpVertexAttribBinding, 2, uintptr(attribindex), uintptr(bindingindex), 0)
}

// modify the rate at which generic vertex attributes advance during instanced rendering
func VertexAttribDivisor(index uint32, divisor uint32) {
	syscall.Syscall(gpVertexAttribDivisor, 2, uintptr(index), uintptr(divisor), 0)
}
func VertexAttribDivisorANGLE(index uint32, divisor uint32) {
	syscall.Syscall(gpVertexAttribDivisorANGLE, 2, uintptr(index), uintptr(divisor), 0)
}
func VertexAttribDivisorEXT(index uint32, divisor uint32) {
	syscall.Syscall(gpVertexAttribDivisorEXT, 2, uintptr(index), uintptr(divisor), 0)
}
func VertexAttribDivisorNV(index uint32, divisor uint32) {
	syscall.Syscall(gpVertexAttribDivisorNV, 2, uintptr(index), uintptr(divisor), 0)
}

// specify the organization of vertex arrays
func VertexAttribFormat(attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
	syscall.Syscall6(gpVertexAttribFormat, 5, uintptr(attribindex), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(relativeoffset), 0)
}
func VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32) {
	syscall.Syscall6(gpVertexAttribI4i, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttribI4iv(index uint32, v *int32) {
	syscall.Syscall(gpVertexAttribI4iv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32) {
	syscall.Syscall6(gpVertexAttribI4ui, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttribI4uiv(index uint32, v *uint32) {
	syscall.Syscall(gpVertexAttribI4uiv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribIFormat(attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
	syscall.Syscall6(gpVertexAttribIFormat, 4, uintptr(attribindex), uintptr(size), uintptr(xtype), uintptr(relativeoffset), 0, 0)
}
func VertexAttribIPointer(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpVertexAttribIPointer, 5, uintptr(index), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0)
}

// define an array of generic vertex attribute data
func VertexAttribPointer(index uint32, size int32, xtype uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpVertexAttribPointer, 6, uintptr(index), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(stride), uintptr(pointer))
}
func VertexAttribPointerWithOffset(index uint32, size int32, xtype uint32, normalized bool, stride int32, offset uintptr) {
	syscall.Syscall6(gpVertexAttribPointer, 6, uintptr(index), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(stride), uintptr(offset))
}

// modify the rate at which generic vertex attributes     advance
func VertexBindingDivisor(bindingindex uint32, divisor uint32) {
	syscall.Syscall(gpVertexBindingDivisor, 2, uintptr(bindingindex), uintptr(divisor), 0)
}

// set the viewport
func Viewport(x int32, y int32, width int32, height int32) {
	syscall.Syscall6(gpViewport, 4, uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}
func ViewportArrayvNV(first uint32, count int32, v *float32) {
	syscall.Syscall(gpViewportArrayvNV, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ViewportArrayvOES(first uint32, count int32, v *float32) {
	syscall.Syscall(gpViewportArrayvOES, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ViewportIndexedfNV(index uint32, x float32, y float32, w float32, h float32) {
	syscall.Syscall6(gpViewportIndexedfNV, 5, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(w)), uintptr(math.Float32bits(h)), 0)
}
func ViewportIndexedfOES(index uint32, x float32, y float32, w float32, h float32) {
	syscall.Syscall6(gpViewportIndexedfOES, 5, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(w)), uintptr(math.Float32bits(h)), 0)
}
func ViewportIndexedfvNV(index uint32, v *float32) {
	syscall.Syscall(gpViewportIndexedfvNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func ViewportIndexedfvOES(index uint32, v *float32) {
	syscall.Syscall(gpViewportIndexedfvOES, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func ViewportPositionWScaleNV(index uint32, xcoeff float32, ycoeff float32) {
	syscall.Syscall(gpViewportPositionWScaleNV, 3, uintptr(index), uintptr(math.Float32bits(xcoeff)), uintptr(math.Float32bits(ycoeff)))
}
func ViewportSwizzleNV(index uint32, swizzlex uint32, swizzley uint32, swizzlez uint32, swizzlew uint32) {
	syscall.Syscall6(gpViewportSwizzleNV, 5, uintptr(index), uintptr(swizzlex), uintptr(swizzley), uintptr(swizzlez), uintptr(swizzlew), 0)
}
func WaitSemaphoreEXT(semaphore uint32, numBufferBarriers uint32, buffers *uint32, numTextureBarriers uint32, textures *uint32, srcLayouts *uint32) {
	syscall.Syscall6(gpWaitSemaphoreEXT, 6, uintptr(semaphore), uintptr(numBufferBarriers), uintptr(unsafe.Pointer(buffers)), uintptr(numTextureBarriers), uintptr(unsafe.Pointer(textures)), uintptr(unsafe.Pointer(srcLayouts)))
}

// instruct the GL server to block until the specified sync object becomes signaled
func WaitSync(sync uintptr, flags uint32, timeout uint64) {
	syscall.Syscall(gpWaitSync, 3, uintptr(sync), uintptr(flags), uintptr(timeout))
}
func WaitSyncAPPLE(sync uintptr, flags uint32, timeout uint64) {
	syscall.Syscall(gpWaitSyncAPPLE, 3, uintptr(sync), uintptr(flags), uintptr(timeout))
}
func WaitVkSemaphoreNV(vkSemaphore uint64) {
	syscall.Syscall(gpWaitVkSemaphoreNV, 1, uintptr(vkSemaphore), 0, 0)
}
func WeightPathsNV(resultPath uint32, numPaths int32, paths *uint32, weights *float32) {
	syscall.Syscall6(gpWeightPathsNV, 4, uintptr(resultPath), uintptr(numPaths), uintptr(unsafe.Pointer(paths)), uintptr(unsafe.Pointer(weights)), 0, 0)
}
func WindowRectanglesEXT(mode uint32, count int32, box *int32) {
	syscall.Syscall(gpWindowRectanglesEXT, 3, uintptr(mode), uintptr(count), uintptr(unsafe.Pointer(box)))
}

// InitWithProcAddrFunc intializes the package using the specified OpenGL
// function pointer loading function. For more cases Init should be used
// instead.
func InitWithProcAddrFunc(getProcAddr func(name string) unsafe.Pointer) error {
	gpAcquireKeyedMutexWin32EXT = uintptr(getProcAddr("glAcquireKeyedMutexWin32EXT"))
	gpActiveProgramEXT = uintptr(getProcAddr("glActiveProgramEXT"))
	gpActiveShaderProgram = uintptr(getProcAddr("glActiveShaderProgram"))
	if gpActiveShaderProgram == 0 {
		return errors.New("glActiveShaderProgram")
	}
	gpActiveShaderProgramEXT = uintptr(getProcAddr("glActiveShaderProgramEXT"))
	gpActiveTexture = uintptr(getProcAddr("glActiveTexture"))
	if gpActiveTexture == 0 {
		return errors.New("glActiveTexture")
	}
	gpAlphaFuncQCOM = uintptr(getProcAddr("glAlphaFuncQCOM"))
	gpApplyFramebufferAttachmentCMAAINTEL = uintptr(getProcAddr("glApplyFramebufferAttachmentCMAAINTEL"))
	gpAttachShader = uintptr(getProcAddr("glAttachShader"))
	if gpAttachShader == 0 {
		return errors.New("glAttachShader")
	}
	gpBeginConditionalRenderNV = uintptr(getProcAddr("glBeginConditionalRenderNV"))
	gpBeginPerfMonitorAMD = uintptr(getProcAddr("glBeginPerfMonitorAMD"))
	gpBeginPerfQueryINTEL = uintptr(getProcAddr("glBeginPerfQueryINTEL"))
	gpBeginQuery = uintptr(getProcAddr("glBeginQuery"))
	if gpBeginQuery == 0 {
		return errors.New("glBeginQuery")
	}
	gpBeginQueryEXT = uintptr(getProcAddr("glBeginQueryEXT"))
	gpBeginTransformFeedback = uintptr(getProcAddr("glBeginTransformFeedback"))
	if gpBeginTransformFeedback == 0 {
		return errors.New("glBeginTransformFeedback")
	}
	gpBindAttribLocation = uintptr(getProcAddr("glBindAttribLocation"))
	if gpBindAttribLocation == 0 {
		return errors.New("glBindAttribLocation")
	}
	gpBindBuffer = uintptr(getProcAddr("glBindBuffer"))
	if gpBindBuffer == 0 {
		return errors.New("glBindBuffer")
	}
	gpBindBufferBase = uintptr(getProcAddr("glBindBufferBase"))
	if gpBindBufferBase == 0 {
		return errors.New("glBindBufferBase")
	}
	gpBindBufferRange = uintptr(getProcAddr("glBindBufferRange"))
	if gpBindBufferRange == 0 {
		return errors.New("glBindBufferRange")
	}
	gpBindFragDataLocationEXT = uintptr(getProcAddr("glBindFragDataLocationEXT"))
	gpBindFragDataLocationIndexedEXT = uintptr(getProcAddr("glBindFragDataLocationIndexedEXT"))
	gpBindFramebuffer = uintptr(getProcAddr("glBindFramebuffer"))
	if gpBindFramebuffer == 0 {
		return errors.New("glBindFramebuffer")
	}
	gpBindImageTexture = uintptr(getProcAddr("glBindImageTexture"))
	if gpBindImageTexture == 0 {
		return errors.New("glBindImageTexture")
	}
	gpBindProgramPipeline = uintptr(getProcAddr("glBindProgramPipeline"))
	if gpBindProgramPipeline == 0 {
		return errors.New("glBindProgramPipeline")
	}
	gpBindProgramPipelineEXT = uintptr(getProcAddr("glBindProgramPipelineEXT"))
	gpBindRenderbuffer = uintptr(getProcAddr("glBindRenderbuffer"))
	if gpBindRenderbuffer == 0 {
		return errors.New("glBindRenderbuffer")
	}
	gpBindSampler = uintptr(getProcAddr("glBindSampler"))
	if gpBindSampler == 0 {
		return errors.New("glBindSampler")
	}
	gpBindShadingRateImageNV = uintptr(getProcAddr("glBindShadingRateImageNV"))
	gpBindTexture = uintptr(getProcAddr("glBindTexture"))
	if gpBindTexture == 0 {
		return errors.New("glBindTexture")
	}
	gpBindTransformFeedback = uintptr(getProcAddr("glBindTransformFeedback"))
	if gpBindTransformFeedback == 0 {
		return errors.New("glBindTransformFeedback")
	}
	gpBindVertexArray = uintptr(getProcAddr("glBindVertexArray"))
	if gpBindVertexArray == 0 {
		return errors.New("glBindVertexArray")
	}
	gpBindVertexArrayOES = uintptr(getProcAddr("glBindVertexArrayOES"))
	gpBindVertexBuffer = uintptr(getProcAddr("glBindVertexBuffer"))
	if gpBindVertexBuffer == 0 {
		return errors.New("glBindVertexBuffer")
	}
	gpBlendBarrierKHR = uintptr(getProcAddr("glBlendBarrierKHR"))
	gpBlendBarrierNV = uintptr(getProcAddr("glBlendBarrierNV"))
	gpBlendColor = uintptr(getProcAddr("glBlendColor"))
	if gpBlendColor == 0 {
		return errors.New("glBlendColor")
	}
	gpBlendEquation = uintptr(getProcAddr("glBlendEquation"))
	if gpBlendEquation == 0 {
		return errors.New("glBlendEquation")
	}
	gpBlendEquationEXT = uintptr(getProcAddr("glBlendEquationEXT"))
	gpBlendEquationSeparate = uintptr(getProcAddr("glBlendEquationSeparate"))
	if gpBlendEquationSeparate == 0 {
		return errors.New("glBlendEquationSeparate")
	}
	gpBlendEquationSeparateiEXT = uintptr(getProcAddr("glBlendEquationSeparateiEXT"))
	gpBlendEquationSeparateiOES = uintptr(getProcAddr("glBlendEquationSeparateiOES"))
	gpBlendEquationiEXT = uintptr(getProcAddr("glBlendEquationiEXT"))
	gpBlendEquationiOES = uintptr(getProcAddr("glBlendEquationiOES"))
	gpBlendFunc = uintptr(getProcAddr("glBlendFunc"))
	if gpBlendFunc == 0 {
		return errors.New("glBlendFunc")
	}
	gpBlendFuncSeparate = uintptr(getProcAddr("glBlendFuncSeparate"))
	if gpBlendFuncSeparate == 0 {
		return errors.New("glBlendFuncSeparate")
	}
	gpBlendFuncSeparateiEXT = uintptr(getProcAddr("glBlendFuncSeparateiEXT"))
	gpBlendFuncSeparateiOES = uintptr(getProcAddr("glBlendFuncSeparateiOES"))
	gpBlendFunciEXT = uintptr(getProcAddr("glBlendFunciEXT"))
	gpBlendFunciOES = uintptr(getProcAddr("glBlendFunciOES"))
	gpBlendParameteriNV = uintptr(getProcAddr("glBlendParameteriNV"))
	gpBlitFramebuffer = uintptr(getProcAddr("glBlitFramebuffer"))
	if gpBlitFramebuffer == 0 {
		return errors.New("glBlitFramebuffer")
	}
	gpBlitFramebufferANGLE = uintptr(getProcAddr("glBlitFramebufferANGLE"))
	gpBlitFramebufferNV = uintptr(getProcAddr("glBlitFramebufferNV"))
	gpBufferAttachMemoryNV = uintptr(getProcAddr("glBufferAttachMemoryNV"))
	gpBufferData = uintptr(getProcAddr("glBufferData"))
	if gpBufferData == 0 {
		return errors.New("glBufferData")
	}
	gpBufferStorageEXT = uintptr(getProcAddr("glBufferStorageEXT"))
	gpBufferStorageExternalEXT = uintptr(getProcAddr("glBufferStorageExternalEXT"))
	gpBufferStorageMemEXT = uintptr(getProcAddr("glBufferStorageMemEXT"))
	gpBufferSubData = uintptr(getProcAddr("glBufferSubData"))
	if gpBufferSubData == 0 {
		return errors.New("glBufferSubData")
	}
	gpCheckFramebufferStatus = uintptr(getProcAddr("glCheckFramebufferStatus"))
	if gpCheckFramebufferStatus == 0 {
		return errors.New("glCheckFramebufferStatus")
	}
	gpClear = uintptr(getProcAddr("glClear"))
	if gpClear == 0 {
		return errors.New("glClear")
	}
	gpClearBufferfi = uintptr(getProcAddr("glClearBufferfi"))
	if gpClearBufferfi == 0 {
		return errors.New("glClearBufferfi")
	}
	gpClearBufferfv = uintptr(getProcAddr("glClearBufferfv"))
	if gpClearBufferfv == 0 {
		return errors.New("glClearBufferfv")
	}
	gpClearBufferiv = uintptr(getProcAddr("glClearBufferiv"))
	if gpClearBufferiv == 0 {
		return errors.New("glClearBufferiv")
	}
	gpClearBufferuiv = uintptr(getProcAddr("glClearBufferuiv"))
	if gpClearBufferuiv == 0 {
		return errors.New("glClearBufferuiv")
	}
	gpClearColor = uintptr(getProcAddr("glClearColor"))
	if gpClearColor == 0 {
		return errors.New("glClearColor")
	}
	gpClearDepthf = uintptr(getProcAddr("glClearDepthf"))
	if gpClearDepthf == 0 {
		return errors.New("glClearDepthf")
	}
	gpClearPixelLocalStorageuiEXT = uintptr(getProcAddr("glClearPixelLocalStorageuiEXT"))
	gpClearStencil = uintptr(getProcAddr("glClearStencil"))
	if gpClearStencil == 0 {
		return errors.New("glClearStencil")
	}
	gpClearTexImageEXT = uintptr(getProcAddr("glClearTexImageEXT"))
	gpClearTexSubImageEXT = uintptr(getProcAddr("glClearTexSubImageEXT"))
	gpClientWaitSync = uintptr(getProcAddr("glClientWaitSync"))
	if gpClientWaitSync == 0 {
		return errors.New("glClientWaitSync")
	}
	gpClientWaitSyncAPPLE = uintptr(getProcAddr("glClientWaitSyncAPPLE"))
	gpClipControlEXT = uintptr(getProcAddr("glClipControlEXT"))
	gpColorMask = uintptr(getProcAddr("glColorMask"))
	if gpColorMask == 0 {
		return errors.New("glColorMask")
	}
	gpColorMaskiEXT = uintptr(getProcAddr("glColorMaskiEXT"))
	gpColorMaskiOES = uintptr(getProcAddr("glColorMaskiOES"))
	gpCompileShader = uintptr(getProcAddr("glCompileShader"))
	if gpCompileShader == 0 {
		return errors.New("glCompileShader")
	}
	gpCompressedTexImage2D = uintptr(getProcAddr("glCompressedTexImage2D"))
	if gpCompressedTexImage2D == 0 {
		return errors.New("glCompressedTexImage2D")
	}
	gpCompressedTexImage3D = uintptr(getProcAddr("glCompressedTexImage3D"))
	if gpCompressedTexImage3D == 0 {
		return errors.New("glCompressedTexImage3D")
	}
	gpCompressedTexImage3DOES = uintptr(getProcAddr("glCompressedTexImage3DOES"))
	gpCompressedTexSubImage2D = uintptr(getProcAddr("glCompressedTexSubImage2D"))
	if gpCompressedTexSubImage2D == 0 {
		return errors.New("glCompressedTexSubImage2D")
	}
	gpCompressedTexSubImage3D = uintptr(getProcAddr("glCompressedTexSubImage3D"))
	if gpCompressedTexSubImage3D == 0 {
		return errors.New("glCompressedTexSubImage3D")
	}
	gpCompressedTexSubImage3DOES = uintptr(getProcAddr("glCompressedTexSubImage3DOES"))
	gpConservativeRasterParameteriNV = uintptr(getProcAddr("glConservativeRasterParameteriNV"))
	gpCopyBufferSubData = uintptr(getProcAddr("glCopyBufferSubData"))
	if gpCopyBufferSubData == 0 {
		return errors.New("glCopyBufferSubData")
	}
	gpCopyBufferSubDataNV = uintptr(getProcAddr("glCopyBufferSubDataNV"))
	gpCopyImageSubDataEXT = uintptr(getProcAddr("glCopyImageSubDataEXT"))
	gpCopyImageSubDataOES = uintptr(getProcAddr("glCopyImageSubDataOES"))
	gpCopyPathNV = uintptr(getProcAddr("glCopyPathNV"))
	gpCopyTexImage2D = uintptr(getProcAddr("glCopyTexImage2D"))
	if gpCopyTexImage2D == 0 {
		return errors.New("glCopyTexImage2D")
	}
	gpCopyTexSubImage2D = uintptr(getProcAddr("glCopyTexSubImage2D"))
	if gpCopyTexSubImage2D == 0 {
		return errors.New("glCopyTexSubImage2D")
	}
	gpCopyTexSubImage3D = uintptr(getProcAddr("glCopyTexSubImage3D"))
	if gpCopyTexSubImage3D == 0 {
		return errors.New("glCopyTexSubImage3D")
	}
	gpCopyTexSubImage3DOES = uintptr(getProcAddr("glCopyTexSubImage3DOES"))
	gpCopyTextureLevelsAPPLE = uintptr(getProcAddr("glCopyTextureLevelsAPPLE"))
	gpCoverFillPathInstancedNV = uintptr(getProcAddr("glCoverFillPathInstancedNV"))
	gpCoverFillPathNV = uintptr(getProcAddr("glCoverFillPathNV"))
	gpCoverStrokePathInstancedNV = uintptr(getProcAddr("glCoverStrokePathInstancedNV"))
	gpCoverStrokePathNV = uintptr(getProcAddr("glCoverStrokePathNV"))
	gpCoverageMaskNV = uintptr(getProcAddr("glCoverageMaskNV"))
	gpCoverageModulationNV = uintptr(getProcAddr("glCoverageModulationNV"))
	gpCoverageModulationTableNV = uintptr(getProcAddr("glCoverageModulationTableNV"))
	gpCoverageOperationNV = uintptr(getProcAddr("glCoverageOperationNV"))
	gpCreateMemoryObjectsEXT = uintptr(getProcAddr("glCreateMemoryObjectsEXT"))
	gpCreatePerfQueryINTEL = uintptr(getProcAddr("glCreatePerfQueryINTEL"))
	gpCreateProgram = uintptr(getProcAddr("glCreateProgram"))
	if gpCreateProgram == 0 {
		return errors.New("glCreateProgram")
	}
	gpCreateShader = uintptr(getProcAddr("glCreateShader"))
	if gpCreateShader == 0 {
		return errors.New("glCreateShader")
	}
	gpCreateShaderProgramEXT = uintptr(getProcAddr("glCreateShaderProgramEXT"))
	gpCreateShaderProgramv = uintptr(getProcAddr("glCreateShaderProgramv"))
	if gpCreateShaderProgramv == 0 {
		return errors.New("glCreateShaderProgramv")
	}
	gpCreateShaderProgramvEXT = uintptr(getProcAddr("glCreateShaderProgramvEXT"))
	gpCullFace = uintptr(getProcAddr("glCullFace"))
	if gpCullFace == 0 {
		return errors.New("glCullFace")
	}
	gpDebugMessageCallback = uintptr(getProcAddr("glDebugMessageCallback"))
	gpDebugMessageCallbackKHR = uintptr(getProcAddr("glDebugMessageCallbackKHR"))
	gpDebugMessageControl = uintptr(getProcAddr("glDebugMessageControl"))
	gpDebugMessageControlKHR = uintptr(getProcAddr("glDebugMessageControlKHR"))
	gpDebugMessageInsert = uintptr(getProcAddr("glDebugMessageInsert"))
	gpDebugMessageInsertKHR = uintptr(getProcAddr("glDebugMessageInsertKHR"))
	gpDeleteBuffers = uintptr(getProcAddr("glDeleteBuffers"))
	if gpDeleteBuffers == 0 {
		return errors.New("glDeleteBuffers")
	}
	gpDeleteFencesNV = uintptr(getProcAddr("glDeleteFencesNV"))
	gpDeleteFramebuffers = uintptr(getProcAddr("glDeleteFramebuffers"))
	if gpDeleteFramebuffers == 0 {
		return errors.New("glDeleteFramebuffers")
	}
	gpDeleteMemoryObjectsEXT = uintptr(getProcAddr("glDeleteMemoryObjectsEXT"))
	gpDeletePathsNV = uintptr(getProcAddr("glDeletePathsNV"))
	gpDeletePerfMonitorsAMD = uintptr(getProcAddr("glDeletePerfMonitorsAMD"))
	gpDeletePerfQueryINTEL = uintptr(getProcAddr("glDeletePerfQueryINTEL"))
	gpDeleteProgram = uintptr(getProcAddr("glDeleteProgram"))
	if gpDeleteProgram == 0 {
		return errors.New("glDeleteProgram")
	}
	gpDeleteProgramPipelines = uintptr(getProcAddr("glDeleteProgramPipelines"))
	if gpDeleteProgramPipelines == 0 {
		return errors.New("glDeleteProgramPipelines")
	}
	gpDeleteProgramPipelinesEXT = uintptr(getProcAddr("glDeleteProgramPipelinesEXT"))
	gpDeleteQueries = uintptr(getProcAddr("glDeleteQueries"))
	if gpDeleteQueries == 0 {
		return errors.New("glDeleteQueries")
	}
	gpDeleteQueriesEXT = uintptr(getProcAddr("glDeleteQueriesEXT"))
	gpDeleteRenderbuffers = uintptr(getProcAddr("glDeleteRenderbuffers"))
	if gpDeleteRenderbuffers == 0 {
		return errors.New("glDeleteRenderbuffers")
	}
	gpDeleteSamplers = uintptr(getProcAddr("glDeleteSamplers"))
	if gpDeleteSamplers == 0 {
		return errors.New("glDeleteSamplers")
	}
	gpDeleteSemaphoresEXT = uintptr(getProcAddr("glDeleteSemaphoresEXT"))
	gpDeleteShader = uintptr(getProcAddr("glDeleteShader"))
	if gpDeleteShader == 0 {
		return errors.New("glDeleteShader")
	}
	gpDeleteSync = uintptr(getProcAddr("glDeleteSync"))
	if gpDeleteSync == 0 {
		return errors.New("glDeleteSync")
	}
	gpDeleteSyncAPPLE = uintptr(getProcAddr("glDeleteSyncAPPLE"))
	gpDeleteTextures = uintptr(getProcAddr("glDeleteTextures"))
	if gpDeleteTextures == 0 {
		return errors.New("glDeleteTextures")
	}
	gpDeleteTransformFeedbacks = uintptr(getProcAddr("glDeleteTransformFeedbacks"))
	if gpDeleteTransformFeedbacks == 0 {
		return errors.New("glDeleteTransformFeedbacks")
	}
	gpDeleteVertexArrays = uintptr(getProcAddr("glDeleteVertexArrays"))
	if gpDeleteVertexArrays == 0 {
		return errors.New("glDeleteVertexArrays")
	}
	gpDeleteVertexArraysOES = uintptr(getProcAddr("glDeleteVertexArraysOES"))
	gpDepthFunc = uintptr(getProcAddr("glDepthFunc"))
	if gpDepthFunc == 0 {
		return errors.New("glDepthFunc")
	}
	gpDepthMask = uintptr(getProcAddr("glDepthMask"))
	if gpDepthMask == 0 {
		return errors.New("glDepthMask")
	}
	gpDepthRangeArrayfvNV = uintptr(getProcAddr("glDepthRangeArrayfvNV"))
	gpDepthRangeArrayfvOES = uintptr(getProcAddr("glDepthRangeArrayfvOES"))
	gpDepthRangeIndexedfNV = uintptr(getProcAddr("glDepthRangeIndexedfNV"))
	gpDepthRangeIndexedfOES = uintptr(getProcAddr("glDepthRangeIndexedfOES"))
	gpDepthRangef = uintptr(getProcAddr("glDepthRangef"))
	if gpDepthRangef == 0 {
		return errors.New("glDepthRangef")
	}
	gpDetachShader = uintptr(getProcAddr("glDetachShader"))
	if gpDetachShader == 0 {
		return errors.New("glDetachShader")
	}
	gpDisable = uintptr(getProcAddr("glDisable"))
	if gpDisable == 0 {
		return errors.New("glDisable")
	}
	gpDisableDriverControlQCOM = uintptr(getProcAddr("glDisableDriverControlQCOM"))
	gpDisableVertexAttribArray = uintptr(getProcAddr("glDisableVertexAttribArray"))
	if gpDisableVertexAttribArray == 0 {
		return errors.New("glDisableVertexAttribArray")
	}
	gpDisableiEXT = uintptr(getProcAddr("glDisableiEXT"))
	gpDisableiNV = uintptr(getProcAddr("glDisableiNV"))
	gpDisableiOES = uintptr(getProcAddr("glDisableiOES"))
	gpDiscardFramebufferEXT = uintptr(getProcAddr("glDiscardFramebufferEXT"))
	gpDispatchCompute = uintptr(getProcAddr("glDispatchCompute"))
	if gpDispatchCompute == 0 {
		return errors.New("glDispatchCompute")
	}
	gpDispatchComputeIndirect = uintptr(getProcAddr("glDispatchComputeIndirect"))
	if gpDispatchComputeIndirect == 0 {
		return errors.New("glDispatchComputeIndirect")
	}
	gpDrawArrays = uintptr(getProcAddr("glDrawArrays"))
	if gpDrawArrays == 0 {
		return errors.New("glDrawArrays")
	}
	gpDrawArraysIndirect = uintptr(getProcAddr("glDrawArraysIndirect"))
	if gpDrawArraysIndirect == 0 {
		return errors.New("glDrawArraysIndirect")
	}
	gpDrawArraysInstanced = uintptr(getProcAddr("glDrawArraysInstanced"))
	if gpDrawArraysInstanced == 0 {
		return errors.New("glDrawArraysInstanced")
	}
	gpDrawArraysInstancedANGLE = uintptr(getProcAddr("glDrawArraysInstancedANGLE"))
	gpDrawArraysInstancedBaseInstanceEXT = uintptr(getProcAddr("glDrawArraysInstancedBaseInstanceEXT"))
	gpDrawArraysInstancedEXT = uintptr(getProcAddr("glDrawArraysInstancedEXT"))
	gpDrawArraysInstancedNV = uintptr(getProcAddr("glDrawArraysInstancedNV"))
	gpDrawBuffers = uintptr(getProcAddr("glDrawBuffers"))
	if gpDrawBuffers == 0 {
		return errors.New("glDrawBuffers")
	}
	gpDrawBuffersEXT = uintptr(getProcAddr("glDrawBuffersEXT"))
	gpDrawBuffersIndexedEXT = uintptr(getProcAddr("glDrawBuffersIndexedEXT"))
	gpDrawBuffersNV = uintptr(getProcAddr("glDrawBuffersNV"))
	gpDrawElements = uintptr(getProcAddr("glDrawElements"))
	if gpDrawElements == 0 {
		return errors.New("glDrawElements")
	}
	gpDrawElementsBaseVertexEXT = uintptr(getProcAddr("glDrawElementsBaseVertexEXT"))
	gpDrawElementsBaseVertexOES = uintptr(getProcAddr("glDrawElementsBaseVertexOES"))
	gpDrawElementsIndirect = uintptr(getProcAddr("glDrawElementsIndirect"))
	if gpDrawElementsIndirect == 0 {
		return errors.New("glDrawElementsIndirect")
	}
	gpDrawElementsInstanced = uintptr(getProcAddr("glDrawElementsInstanced"))
	if gpDrawElementsInstanced == 0 {
		return errors.New("glDrawElementsInstanced")
	}
	gpDrawElementsInstancedANGLE = uintptr(getProcAddr("glDrawElementsInstancedANGLE"))
	gpDrawElementsInstancedBaseInstanceEXT = uintptr(getProcAddr("glDrawElementsInstancedBaseInstanceEXT"))
	gpDrawElementsInstancedBaseVertexBaseInstanceEXT = uintptr(getProcAddr("glDrawElementsInstancedBaseVertexBaseInstanceEXT"))
	gpDrawElementsInstancedBaseVertexEXT = uintptr(getProcAddr("glDrawElementsInstancedBaseVertexEXT"))
	gpDrawElementsInstancedBaseVertexOES = uintptr(getProcAddr("glDrawElementsInstancedBaseVertexOES"))
	gpDrawElementsInstancedEXT = uintptr(getProcAddr("glDrawElementsInstancedEXT"))
	gpDrawElementsInstancedNV = uintptr(getProcAddr("glDrawElementsInstancedNV"))
	gpDrawMeshTasksIndirectNV = uintptr(getProcAddr("glDrawMeshTasksIndirectNV"))
	gpDrawMeshTasksNV = uintptr(getProcAddr("glDrawMeshTasksNV"))
	gpDrawRangeElements = uintptr(getProcAddr("glDrawRangeElements"))
	if gpDrawRangeElements == 0 {
		return errors.New("glDrawRangeElements")
	}
	gpDrawRangeElementsBaseVertexEXT = uintptr(getProcAddr("glDrawRangeElementsBaseVertexEXT"))
	gpDrawRangeElementsBaseVertexOES = uintptr(getProcAddr("glDrawRangeElementsBaseVertexOES"))
	gpDrawTransformFeedbackEXT = uintptr(getProcAddr("glDrawTransformFeedbackEXT"))
	gpDrawTransformFeedbackInstancedEXT = uintptr(getProcAddr("glDrawTransformFeedbackInstancedEXT"))
	gpDrawVkImageNV = uintptr(getProcAddr("glDrawVkImageNV"))
	gpEGLImageTargetRenderbufferStorageOES = uintptr(getProcAddr("glEGLImageTargetRenderbufferStorageOES"))
	gpEGLImageTargetTexStorageEXT = uintptr(getProcAddr("glEGLImageTargetTexStorageEXT"))
	gpEGLImageTargetTexture2DOES = uintptr(getProcAddr("glEGLImageTargetTexture2DOES"))
	gpEGLImageTargetTextureStorageEXT = uintptr(getProcAddr("glEGLImageTargetTextureStorageEXT"))
	gpEnable = uintptr(getProcAddr("glEnable"))
	if gpEnable == 0 {
		return errors.New("glEnable")
	}
	gpEnableDriverControlQCOM = uintptr(getProcAddr("glEnableDriverControlQCOM"))
	gpEnableVertexAttribArray = uintptr(getProcAddr("glEnableVertexAttribArray"))
	if gpEnableVertexAttribArray == 0 {
		return errors.New("glEnableVertexAttribArray")
	}
	gpEnableiEXT = uintptr(getProcAddr("glEnableiEXT"))
	gpEnableiNV = uintptr(getProcAddr("glEnableiNV"))
	gpEnableiOES = uintptr(getProcAddr("glEnableiOES"))
	gpEndConditionalRenderNV = uintptr(getProcAddr("glEndConditionalRenderNV"))
	gpEndPerfMonitorAMD = uintptr(getProcAddr("glEndPerfMonitorAMD"))
	gpEndPerfQueryINTEL = uintptr(getProcAddr("glEndPerfQueryINTEL"))
	gpEndQuery = uintptr(getProcAddr("glEndQuery"))
	if gpEndQuery == 0 {
		return errors.New("glEndQuery")
	}
	gpEndQueryEXT = uintptr(getProcAddr("glEndQueryEXT"))
	gpEndTilingQCOM = uintptr(getProcAddr("glEndTilingQCOM"))
	gpEndTransformFeedback = uintptr(getProcAddr("glEndTransformFeedback"))
	if gpEndTransformFeedback == 0 {
		return errors.New("glEndTransformFeedback")
	}
	gpExtGetBufferPointervQCOM = uintptr(getProcAddr("glExtGetBufferPointervQCOM"))
	gpExtGetBuffersQCOM = uintptr(getProcAddr("glExtGetBuffersQCOM"))
	gpExtGetFramebuffersQCOM = uintptr(getProcAddr("glExtGetFramebuffersQCOM"))
	gpExtGetProgramBinarySourceQCOM = uintptr(getProcAddr("glExtGetProgramBinarySourceQCOM"))
	gpExtGetProgramsQCOM = uintptr(getProcAddr("glExtGetProgramsQCOM"))
	gpExtGetRenderbuffersQCOM = uintptr(getProcAddr("glExtGetRenderbuffersQCOM"))
	gpExtGetShadersQCOM = uintptr(getProcAddr("glExtGetShadersQCOM"))
	gpExtGetTexLevelParameterivQCOM = uintptr(getProcAddr("glExtGetTexLevelParameterivQCOM"))
	gpExtGetTexSubImageQCOM = uintptr(getProcAddr("glExtGetTexSubImageQCOM"))
	gpExtGetTexturesQCOM = uintptr(getProcAddr("glExtGetTexturesQCOM"))
	gpExtIsProgramBinaryQCOM = uintptr(getProcAddr("glExtIsProgramBinaryQCOM"))
	gpExtTexObjectStateOverrideiQCOM = uintptr(getProcAddr("glExtTexObjectStateOverrideiQCOM"))
	gpFenceSync = uintptr(getProcAddr("glFenceSync"))
	if gpFenceSync == 0 {
		return errors.New("glFenceSync")
	}
	gpFenceSyncAPPLE = uintptr(getProcAddr("glFenceSyncAPPLE"))
	gpFinish = uintptr(getProcAddr("glFinish"))
	if gpFinish == 0 {
		return errors.New("glFinish")
	}
	gpFinishFenceNV = uintptr(getProcAddr("glFinishFenceNV"))
	gpFlush = uintptr(getProcAddr("glFlush"))
	if gpFlush == 0 {
		return errors.New("glFlush")
	}
	gpFlushMappedBufferRange = uintptr(getProcAddr("glFlushMappedBufferRange"))
	if gpFlushMappedBufferRange == 0 {
		return errors.New("glFlushMappedBufferRange")
	}
	gpFlushMappedBufferRangeEXT = uintptr(getProcAddr("glFlushMappedBufferRangeEXT"))
	gpFragmentCoverageColorNV = uintptr(getProcAddr("glFragmentCoverageColorNV"))
	gpFramebufferFetchBarrierEXT = uintptr(getProcAddr("glFramebufferFetchBarrierEXT"))
	gpFramebufferFetchBarrierQCOM = uintptr(getProcAddr("glFramebufferFetchBarrierQCOM"))
	gpFramebufferFoveationConfigQCOM = uintptr(getProcAddr("glFramebufferFoveationConfigQCOM"))
	gpFramebufferFoveationParametersQCOM = uintptr(getProcAddr("glFramebufferFoveationParametersQCOM"))
	gpFramebufferParameteri = uintptr(getProcAddr("glFramebufferParameteri"))
	if gpFramebufferParameteri == 0 {
		return errors.New("glFramebufferParameteri")
	}
	gpFramebufferPixelLocalStorageSizeEXT = uintptr(getProcAddr("glFramebufferPixelLocalStorageSizeEXT"))
	gpFramebufferRenderbuffer = uintptr(getProcAddr("glFramebufferRenderbuffer"))
	if gpFramebufferRenderbuffer == 0 {
		return errors.New("glFramebufferRenderbuffer")
	}
	gpFramebufferSampleLocationsfvNV = uintptr(getProcAddr("glFramebufferSampleLocationsfvNV"))
	gpFramebufferTexture2D = uintptr(getProcAddr("glFramebufferTexture2D"))
	if gpFramebufferTexture2D == 0 {
		return errors.New("glFramebufferTexture2D")
	}
	gpFramebufferTexture2DDownsampleIMG = uintptr(getProcAddr("glFramebufferTexture2DDownsampleIMG"))
	gpFramebufferTexture2DMultisampleEXT = uintptr(getProcAddr("glFramebufferTexture2DMultisampleEXT"))
	gpFramebufferTexture2DMultisampleIMG = uintptr(getProcAddr("glFramebufferTexture2DMultisampleIMG"))
	gpFramebufferTexture3DOES = uintptr(getProcAddr("glFramebufferTexture3DOES"))
	gpFramebufferTextureEXT = uintptr(getProcAddr("glFramebufferTextureEXT"))
	gpFramebufferTextureLayer = uintptr(getProcAddr("glFramebufferTextureLayer"))
	if gpFramebufferTextureLayer == 0 {
		return errors.New("glFramebufferTextureLayer")
	}
	gpFramebufferTextureLayerDownsampleIMG = uintptr(getProcAddr("glFramebufferTextureLayerDownsampleIMG"))
	gpFramebufferTextureMultisampleMultiviewOVR = uintptr(getProcAddr("glFramebufferTextureMultisampleMultiviewOVR"))
	gpFramebufferTextureMultiviewOVR = uintptr(getProcAddr("glFramebufferTextureMultiviewOVR"))
	gpFramebufferTextureOES = uintptr(getProcAddr("glFramebufferTextureOES"))
	gpFrontFace = uintptr(getProcAddr("glFrontFace"))
	if gpFrontFace == 0 {
		return errors.New("glFrontFace")
	}
	gpGenBuffers = uintptr(getProcAddr("glGenBuffers"))
	if gpGenBuffers == 0 {
		return errors.New("glGenBuffers")
	}
	gpGenFencesNV = uintptr(getProcAddr("glGenFencesNV"))
	gpGenFramebuffers = uintptr(getProcAddr("glGenFramebuffers"))
	if gpGenFramebuffers == 0 {
		return errors.New("glGenFramebuffers")
	}
	gpGenPathsNV = uintptr(getProcAddr("glGenPathsNV"))
	gpGenPerfMonitorsAMD = uintptr(getProcAddr("glGenPerfMonitorsAMD"))
	gpGenProgramPipelines = uintptr(getProcAddr("glGenProgramPipelines"))
	if gpGenProgramPipelines == 0 {
		return errors.New("glGenProgramPipelines")
	}
	gpGenProgramPipelinesEXT = uintptr(getProcAddr("glGenProgramPipelinesEXT"))
	gpGenQueries = uintptr(getProcAddr("glGenQueries"))
	if gpGenQueries == 0 {
		return errors.New("glGenQueries")
	}
	gpGenQueriesEXT = uintptr(getProcAddr("glGenQueriesEXT"))
	gpGenRenderbuffers = uintptr(getProcAddr("glGenRenderbuffers"))
	if gpGenRenderbuffers == 0 {
		return errors.New("glGenRenderbuffers")
	}
	gpGenSamplers = uintptr(getProcAddr("glGenSamplers"))
	if gpGenSamplers == 0 {
		return errors.New("glGenSamplers")
	}
	gpGenSemaphoresEXT = uintptr(getProcAddr("glGenSemaphoresEXT"))
	gpGenTextures = uintptr(getProcAddr("glGenTextures"))
	if gpGenTextures == 0 {
		return errors.New("glGenTextures")
	}
	gpGenTransformFeedbacks = uintptr(getProcAddr("glGenTransformFeedbacks"))
	if gpGenTransformFeedbacks == 0 {
		return errors.New("glGenTransformFeedbacks")
	}
	gpGenVertexArrays = uintptr(getProcAddr("glGenVertexArrays"))
	if gpGenVertexArrays == 0 {
		return errors.New("glGenVertexArrays")
	}
	gpGenVertexArraysOES = uintptr(getProcAddr("glGenVertexArraysOES"))
	gpGenerateMipmap = uintptr(getProcAddr("glGenerateMipmap"))
	if gpGenerateMipmap == 0 {
		return errors.New("glGenerateMipmap")
	}
	gpGetActiveAttrib = uintptr(getProcAddr("glGetActiveAttrib"))
	if gpGetActiveAttrib == 0 {
		return errors.New("glGetActiveAttrib")
	}
	gpGetActiveUniform = uintptr(getProcAddr("glGetActiveUniform"))
	if gpGetActiveUniform == 0 {
		return errors.New("glGetActiveUniform")
	}
	gpGetActiveUniformBlockName = uintptr(getProcAddr("glGetActiveUniformBlockName"))
	if gpGetActiveUniformBlockName == 0 {
		return errors.New("glGetActiveUniformBlockName")
	}
	gpGetActiveUniformBlockiv = uintptr(getProcAddr("glGetActiveUniformBlockiv"))
	if gpGetActiveUniformBlockiv == 0 {
		return errors.New("glGetActiveUniformBlockiv")
	}
	gpGetActiveUniformsiv = uintptr(getProcAddr("glGetActiveUniformsiv"))
	if gpGetActiveUniformsiv == 0 {
		return errors.New("glGetActiveUniformsiv")
	}
	gpGetAttachedShaders = uintptr(getProcAddr("glGetAttachedShaders"))
	if gpGetAttachedShaders == 0 {
		return errors.New("glGetAttachedShaders")
	}
	gpGetAttribLocation = uintptr(getProcAddr("glGetAttribLocation"))
	if gpGetAttribLocation == 0 {
		return errors.New("glGetAttribLocation")
	}
	gpGetBooleani_v = uintptr(getProcAddr("glGetBooleani_v"))
	if gpGetBooleani_v == 0 {
		return errors.New("glGetBooleani_v")
	}
	gpGetBooleanv = uintptr(getProcAddr("glGetBooleanv"))
	if gpGetBooleanv == 0 {
		return errors.New("glGetBooleanv")
	}
	gpGetBufferParameteri64v = uintptr(getProcAddr("glGetBufferParameteri64v"))
	if gpGetBufferParameteri64v == 0 {
		return errors.New("glGetBufferParameteri64v")
	}
	gpGetBufferParameteriv = uintptr(getProcAddr("glGetBufferParameteriv"))
	if gpGetBufferParameteriv == 0 {
		return errors.New("glGetBufferParameteriv")
	}
	gpGetBufferPointerv = uintptr(getProcAddr("glGetBufferPointerv"))
	if gpGetBufferPointerv == 0 {
		return errors.New("glGetBufferPointerv")
	}
	gpGetBufferPointervOES = uintptr(getProcAddr("glGetBufferPointervOES"))
	gpGetCoverageModulationTableNV = uintptr(getProcAddr("glGetCoverageModulationTableNV"))
	gpGetDebugMessageLog = uintptr(getProcAddr("glGetDebugMessageLog"))
	gpGetDebugMessageLogKHR = uintptr(getProcAddr("glGetDebugMessageLogKHR"))
	gpGetDriverControlStringQCOM = uintptr(getProcAddr("glGetDriverControlStringQCOM"))
	gpGetDriverControlsQCOM = uintptr(getProcAddr("glGetDriverControlsQCOM"))
	gpGetError = uintptr(getProcAddr("glGetError"))
	if gpGetError == 0 {
		return errors.New("glGetError")
	}
	gpGetFenceivNV = uintptr(getProcAddr("glGetFenceivNV"))
	gpGetFirstPerfQueryIdINTEL = uintptr(getProcAddr("glGetFirstPerfQueryIdINTEL"))
	gpGetFloati_vNV = uintptr(getProcAddr("glGetFloati_vNV"))
	gpGetFloati_vOES = uintptr(getProcAddr("glGetFloati_vOES"))
	gpGetFloatv = uintptr(getProcAddr("glGetFloatv"))
	if gpGetFloatv == 0 {
		return errors.New("glGetFloatv")
	}
	gpGetFragDataIndexEXT = uintptr(getProcAddr("glGetFragDataIndexEXT"))
	gpGetFragDataLocation = uintptr(getProcAddr("glGetFragDataLocation"))
	if gpGetFragDataLocation == 0 {
		return errors.New("glGetFragDataLocation")
	}
	gpGetFramebufferAttachmentParameteriv = uintptr(getProcAddr("glGetFramebufferAttachmentParameteriv"))
	if gpGetFramebufferAttachmentParameteriv == 0 {
		return errors.New("glGetFramebufferAttachmentParameteriv")
	}
	gpGetFramebufferParameteriv = uintptr(getProcAddr("glGetFramebufferParameteriv"))
	if gpGetFramebufferParameteriv == 0 {
		return errors.New("glGetFramebufferParameteriv")
	}
	gpGetFramebufferPixelLocalStorageSizeEXT = uintptr(getProcAddr("glGetFramebufferPixelLocalStorageSizeEXT"))
	gpGetGraphicsResetStatus = uintptr(getProcAddr("glGetGraphicsResetStatus"))
	gpGetGraphicsResetStatusEXT = uintptr(getProcAddr("glGetGraphicsResetStatusEXT"))
	gpGetGraphicsResetStatusKHR = uintptr(getProcAddr("glGetGraphicsResetStatusKHR"))
	gpGetImageHandleNV = uintptr(getProcAddr("glGetImageHandleNV"))
	gpGetInteger64i_v = uintptr(getProcAddr("glGetInteger64i_v"))
	if gpGetInteger64i_v == 0 {
		return errors.New("glGetInteger64i_v")
	}
	gpGetInteger64v = uintptr(getProcAddr("glGetInteger64v"))
	if gpGetInteger64v == 0 {
		return errors.New("glGetInteger64v")
	}
	gpGetInteger64vAPPLE = uintptr(getProcAddr("glGetInteger64vAPPLE"))
	gpGetIntegeri_v = uintptr(getProcAddr("glGetIntegeri_v"))
	if gpGetIntegeri_v == 0 {
		return errors.New("glGetIntegeri_v")
	}
	gpGetIntegeri_vEXT = uintptr(getProcAddr("glGetIntegeri_vEXT"))
	gpGetIntegerv = uintptr(getProcAddr("glGetIntegerv"))
	if gpGetIntegerv == 0 {
		return errors.New("glGetIntegerv")
	}
	gpGetInternalformatSampleivNV = uintptr(getProcAddr("glGetInternalformatSampleivNV"))
	gpGetInternalformativ = uintptr(getProcAddr("glGetInternalformativ"))
	if gpGetInternalformativ == 0 {
		return errors.New("glGetInternalformativ")
	}
	gpGetMemoryObjectDetachedResourcesuivNV = uintptr(getProcAddr("glGetMemoryObjectDetachedResourcesuivNV"))
	gpGetMemoryObjectParameterivEXT = uintptr(getProcAddr("glGetMemoryObjectParameterivEXT"))
	gpGetMultisamplefv = uintptr(getProcAddr("glGetMultisamplefv"))
	if gpGetMultisamplefv == 0 {
		return errors.New("glGetMultisamplefv")
	}
	gpGetNextPerfQueryIdINTEL = uintptr(getProcAddr("glGetNextPerfQueryIdINTEL"))
	gpGetObjectLabel = uintptr(getProcAddr("glGetObjectLabel"))
	gpGetObjectLabelEXT = uintptr(getProcAddr("glGetObjectLabelEXT"))
	gpGetObjectLabelKHR = uintptr(getProcAddr("glGetObjectLabelKHR"))
	gpGetObjectPtrLabel = uintptr(getProcAddr("glGetObjectPtrLabel"))
	gpGetObjectPtrLabelKHR = uintptr(getProcAddr("glGetObjectPtrLabelKHR"))
	gpGetPathCommandsNV = uintptr(getProcAddr("glGetPathCommandsNV"))
	gpGetPathCoordsNV = uintptr(getProcAddr("glGetPathCoordsNV"))
	gpGetPathDashArrayNV = uintptr(getProcAddr("glGetPathDashArrayNV"))
	gpGetPathLengthNV = uintptr(getProcAddr("glGetPathLengthNV"))
	gpGetPathMetricRangeNV = uintptr(getProcAddr("glGetPathMetricRangeNV"))
	gpGetPathMetricsNV = uintptr(getProcAddr("glGetPathMetricsNV"))
	gpGetPathParameterfvNV = uintptr(getProcAddr("glGetPathParameterfvNV"))
	gpGetPathParameterivNV = uintptr(getProcAddr("glGetPathParameterivNV"))
	gpGetPathSpacingNV = uintptr(getProcAddr("glGetPathSpacingNV"))
	gpGetPerfCounterInfoINTEL = uintptr(getProcAddr("glGetPerfCounterInfoINTEL"))
	gpGetPerfMonitorCounterDataAMD = uintptr(getProcAddr("glGetPerfMonitorCounterDataAMD"))
	gpGetPerfMonitorCounterInfoAMD = uintptr(getProcAddr("glGetPerfMonitorCounterInfoAMD"))
	gpGetPerfMonitorCounterStringAMD = uintptr(getProcAddr("glGetPerfMonitorCounterStringAMD"))
	gpGetPerfMonitorCountersAMD = uintptr(getProcAddr("glGetPerfMonitorCountersAMD"))
	gpGetPerfMonitorGroupStringAMD = uintptr(getProcAddr("glGetPerfMonitorGroupStringAMD"))
	gpGetPerfMonitorGroupsAMD = uintptr(getProcAddr("glGetPerfMonitorGroupsAMD"))
	gpGetPerfQueryDataINTEL = uintptr(getProcAddr("glGetPerfQueryDataINTEL"))
	gpGetPerfQueryIdByNameINTEL = uintptr(getProcAddr("glGetPerfQueryIdByNameINTEL"))
	gpGetPerfQueryInfoINTEL = uintptr(getProcAddr("glGetPerfQueryInfoINTEL"))
	gpGetPointerv = uintptr(getProcAddr("glGetPointerv"))
	gpGetPointervKHR = uintptr(getProcAddr("glGetPointervKHR"))
	gpGetProgramBinary = uintptr(getProcAddr("glGetProgramBinary"))
	if gpGetProgramBinary == 0 {
		return errors.New("glGetProgramBinary")
	}
	gpGetProgramBinaryOES = uintptr(getProcAddr("glGetProgramBinaryOES"))
	gpGetProgramInfoLog = uintptr(getProcAddr("glGetProgramInfoLog"))
	if gpGetProgramInfoLog == 0 {
		return errors.New("glGetProgramInfoLog")
	}
	gpGetProgramInterfaceiv = uintptr(getProcAddr("glGetProgramInterfaceiv"))
	if gpGetProgramInterfaceiv == 0 {
		return errors.New("glGetProgramInterfaceiv")
	}
	gpGetProgramPipelineInfoLog = uintptr(getProcAddr("glGetProgramPipelineInfoLog"))
	if gpGetProgramPipelineInfoLog == 0 {
		return errors.New("glGetProgramPipelineInfoLog")
	}
	gpGetProgramPipelineInfoLogEXT = uintptr(getProcAddr("glGetProgramPipelineInfoLogEXT"))
	gpGetProgramPipelineiv = uintptr(getProcAddr("glGetProgramPipelineiv"))
	if gpGetProgramPipelineiv == 0 {
		return errors.New("glGetProgramPipelineiv")
	}
	gpGetProgramPipelineivEXT = uintptr(getProcAddr("glGetProgramPipelineivEXT"))
	gpGetProgramResourceIndex = uintptr(getProcAddr("glGetProgramResourceIndex"))
	if gpGetProgramResourceIndex == 0 {
		return errors.New("glGetProgramResourceIndex")
	}
	gpGetProgramResourceLocation = uintptr(getProcAddr("glGetProgramResourceLocation"))
	if gpGetProgramResourceLocation == 0 {
		return errors.New("glGetProgramResourceLocation")
	}
	gpGetProgramResourceLocationIndexEXT = uintptr(getProcAddr("glGetProgramResourceLocationIndexEXT"))
	gpGetProgramResourceName = uintptr(getProcAddr("glGetProgramResourceName"))
	if gpGetProgramResourceName == 0 {
		return errors.New("glGetProgramResourceName")
	}
	gpGetProgramResourcefvNV = uintptr(getProcAddr("glGetProgramResourcefvNV"))
	gpGetProgramResourceiv = uintptr(getProcAddr("glGetProgramResourceiv"))
	if gpGetProgramResourceiv == 0 {
		return errors.New("glGetProgramResourceiv")
	}
	gpGetProgramiv = uintptr(getProcAddr("glGetProgramiv"))
	if gpGetProgramiv == 0 {
		return errors.New("glGetProgramiv")
	}
	gpGetQueryObjecti64vEXT = uintptr(getProcAddr("glGetQueryObjecti64vEXT"))
	gpGetQueryObjectivEXT = uintptr(getProcAddr("glGetQueryObjectivEXT"))
	gpGetQueryObjectui64vEXT = uintptr(getProcAddr("glGetQueryObjectui64vEXT"))
	gpGetQueryObjectuiv = uintptr(getProcAddr("glGetQueryObjectuiv"))
	if gpGetQueryObjectuiv == 0 {
		return errors.New("glGetQueryObjectuiv")
	}
	gpGetQueryObjectuivEXT = uintptr(getProcAddr("glGetQueryObjectuivEXT"))
	gpGetQueryiv = uintptr(getProcAddr("glGetQueryiv"))
	if gpGetQueryiv == 0 {
		return errors.New("glGetQueryiv")
	}
	gpGetQueryivEXT = uintptr(getProcAddr("glGetQueryivEXT"))
	gpGetRenderbufferParameteriv = uintptr(getProcAddr("glGetRenderbufferParameteriv"))
	if gpGetRenderbufferParameteriv == 0 {
		return errors.New("glGetRenderbufferParameteriv")
	}
	gpGetSamplerParameterIivEXT = uintptr(getProcAddr("glGetSamplerParameterIivEXT"))
	gpGetSamplerParameterIivOES = uintptr(getProcAddr("glGetSamplerParameterIivOES"))
	gpGetSamplerParameterIuivEXT = uintptr(getProcAddr("glGetSamplerParameterIuivEXT"))
	gpGetSamplerParameterIuivOES = uintptr(getProcAddr("glGetSamplerParameterIuivOES"))
	gpGetSamplerParameterfv = uintptr(getProcAddr("glGetSamplerParameterfv"))
	if gpGetSamplerParameterfv == 0 {
		return errors.New("glGetSamplerParameterfv")
	}
	gpGetSamplerParameteriv = uintptr(getProcAddr("glGetSamplerParameteriv"))
	if gpGetSamplerParameteriv == 0 {
		return errors.New("glGetSamplerParameteriv")
	}
	gpGetSemaphoreParameterui64vEXT = uintptr(getProcAddr("glGetSemaphoreParameterui64vEXT"))
	gpGetShaderInfoLog = uintptr(getProcAddr("glGetShaderInfoLog"))
	if gpGetShaderInfoLog == 0 {
		return errors.New("glGetShaderInfoLog")
	}
	gpGetShaderPrecisionFormat = uintptr(getProcAddr("glGetShaderPrecisionFormat"))
	if gpGetShaderPrecisionFormat == 0 {
		return errors.New("glGetShaderPrecisionFormat")
	}
	gpGetShaderSource = uintptr(getProcAddr("glGetShaderSource"))
	if gpGetShaderSource == 0 {
		return errors.New("glGetShaderSource")
	}
	gpGetShaderiv = uintptr(getProcAddr("glGetShaderiv"))
	if gpGetShaderiv == 0 {
		return errors.New("glGetShaderiv")
	}
	gpGetShadingRateImagePaletteNV = uintptr(getProcAddr("glGetShadingRateImagePaletteNV"))
	gpGetShadingRateSampleLocationivNV = uintptr(getProcAddr("glGetShadingRateSampleLocationivNV"))
	gpGetString = uintptr(getProcAddr("glGetString"))
	if gpGetString == 0 {
		return errors.New("glGetString")
	}
	gpGetStringi = uintptr(getProcAddr("glGetStringi"))
	if gpGetStringi == 0 {
		return errors.New("glGetStringi")
	}
	gpGetSynciv = uintptr(getProcAddr("glGetSynciv"))
	if gpGetSynciv == 0 {
		return errors.New("glGetSynciv")
	}
	gpGetSyncivAPPLE = uintptr(getProcAddr("glGetSyncivAPPLE"))
	gpGetTexLevelParameterfv = uintptr(getProcAddr("glGetTexLevelParameterfv"))
	if gpGetTexLevelParameterfv == 0 {
		return errors.New("glGetTexLevelParameterfv")
	}
	gpGetTexLevelParameteriv = uintptr(getProcAddr("glGetTexLevelParameteriv"))
	if gpGetTexLevelParameteriv == 0 {
		return errors.New("glGetTexLevelParameteriv")
	}
	gpGetTexParameterIivEXT = uintptr(getProcAddr("glGetTexParameterIivEXT"))
	gpGetTexParameterIivOES = uintptr(getProcAddr("glGetTexParameterIivOES"))
	gpGetTexParameterIuivEXT = uintptr(getProcAddr("glGetTexParameterIuivEXT"))
	gpGetTexParameterIuivOES = uintptr(getProcAddr("glGetTexParameterIuivOES"))
	gpGetTexParameterfv = uintptr(getProcAddr("glGetTexParameterfv"))
	if gpGetTexParameterfv == 0 {
		return errors.New("glGetTexParameterfv")
	}
	gpGetTexParameteriv = uintptr(getProcAddr("glGetTexParameteriv"))
	if gpGetTexParameteriv == 0 {
		return errors.New("glGetTexParameteriv")
	}
	gpGetTextureHandleIMG = uintptr(getProcAddr("glGetTextureHandleIMG"))
	gpGetTextureHandleNV = uintptr(getProcAddr("glGetTextureHandleNV"))
	gpGetTextureSamplerHandleIMG = uintptr(getProcAddr("glGetTextureSamplerHandleIMG"))
	gpGetTextureSamplerHandleNV = uintptr(getProcAddr("glGetTextureSamplerHandleNV"))
	gpGetTransformFeedbackVarying = uintptr(getProcAddr("glGetTransformFeedbackVarying"))
	if gpGetTransformFeedbackVarying == 0 {
		return errors.New("glGetTransformFeedbackVarying")
	}
	gpGetTranslatedShaderSourceANGLE = uintptr(getProcAddr("glGetTranslatedShaderSourceANGLE"))
	gpGetUniformBlockIndex = uintptr(getProcAddr("glGetUniformBlockIndex"))
	if gpGetUniformBlockIndex == 0 {
		return errors.New("glGetUniformBlockIndex")
	}
	gpGetUniformIndices = uintptr(getProcAddr("glGetUniformIndices"))
	if gpGetUniformIndices == 0 {
		return errors.New("glGetUniformIndices")
	}
	gpGetUniformLocation = uintptr(getProcAddr("glGetUniformLocation"))
	if gpGetUniformLocation == 0 {
		return errors.New("glGetUniformLocation")
	}
	gpGetUniformfv = uintptr(getProcAddr("glGetUniformfv"))
	if gpGetUniformfv == 0 {
		return errors.New("glGetUniformfv")
	}
	gpGetUniformi64vNV = uintptr(getProcAddr("glGetUniformi64vNV"))
	gpGetUniformiv = uintptr(getProcAddr("glGetUniformiv"))
	if gpGetUniformiv == 0 {
		return errors.New("glGetUniformiv")
	}
	gpGetUniformuiv = uintptr(getProcAddr("glGetUniformuiv"))
	if gpGetUniformuiv == 0 {
		return errors.New("glGetUniformuiv")
	}
	gpGetUnsignedBytei_vEXT = uintptr(getProcAddr("glGetUnsignedBytei_vEXT"))
	gpGetUnsignedBytevEXT = uintptr(getProcAddr("glGetUnsignedBytevEXT"))
	gpGetVertexAttribIiv = uintptr(getProcAddr("glGetVertexAttribIiv"))
	if gpGetVertexAttribIiv == 0 {
		return errors.New("glGetVertexAttribIiv")
	}
	gpGetVertexAttribIuiv = uintptr(getProcAddr("glGetVertexAttribIuiv"))
	if gpGetVertexAttribIuiv == 0 {
		return errors.New("glGetVertexAttribIuiv")
	}
	gpGetVertexAttribPointerv = uintptr(getProcAddr("glGetVertexAttribPointerv"))
	if gpGetVertexAttribPointerv == 0 {
		return errors.New("glGetVertexAttribPointerv")
	}
	gpGetVertexAttribfv = uintptr(getProcAddr("glGetVertexAttribfv"))
	if gpGetVertexAttribfv == 0 {
		return errors.New("glGetVertexAttribfv")
	}
	gpGetVertexAttribiv = uintptr(getProcAddr("glGetVertexAttribiv"))
	if gpGetVertexAttribiv == 0 {
		return errors.New("glGetVertexAttribiv")
	}
	gpGetVkProcAddrNV = uintptr(getProcAddr("glGetVkProcAddrNV"))
	gpGetnUniformfv = uintptr(getProcAddr("glGetnUniformfv"))
	gpGetnUniformfvEXT = uintptr(getProcAddr("glGetnUniformfvEXT"))
	gpGetnUniformfvKHR = uintptr(getProcAddr("glGetnUniformfvKHR"))
	gpGetnUniformiv = uintptr(getProcAddr("glGetnUniformiv"))
	gpGetnUniformivEXT = uintptr(getProcAddr("glGetnUniformivEXT"))
	gpGetnUniformivKHR = uintptr(getProcAddr("glGetnUniformivKHR"))
	gpGetnUniformuiv = uintptr(getProcAddr("glGetnUniformuiv"))
	gpGetnUniformuivKHR = uintptr(getProcAddr("glGetnUniformuivKHR"))
	gpHint = uintptr(getProcAddr("glHint"))
	if gpHint == 0 {
		return errors.New("glHint")
	}
	gpImportMemoryFdEXT = uintptr(getProcAddr("glImportMemoryFdEXT"))
	gpImportMemoryWin32HandleEXT = uintptr(getProcAddr("glImportMemoryWin32HandleEXT"))
	gpImportMemoryWin32NameEXT = uintptr(getProcAddr("glImportMemoryWin32NameEXT"))
	gpImportSemaphoreFdEXT = uintptr(getProcAddr("glImportSemaphoreFdEXT"))
	gpImportSemaphoreWin32HandleEXT = uintptr(getProcAddr("glImportSemaphoreWin32HandleEXT"))
	gpImportSemaphoreWin32NameEXT = uintptr(getProcAddr("glImportSemaphoreWin32NameEXT"))
	gpInsertEventMarkerEXT = uintptr(getProcAddr("glInsertEventMarkerEXT"))
	gpInterpolatePathsNV = uintptr(getProcAddr("glInterpolatePathsNV"))
	gpInvalidateFramebuffer = uintptr(getProcAddr("glInvalidateFramebuffer"))
	if gpInvalidateFramebuffer == 0 {
		return errors.New("glInvalidateFramebuffer")
	}
	gpInvalidateSubFramebuffer = uintptr(getProcAddr("glInvalidateSubFramebuffer"))
	if gpInvalidateSubFramebuffer == 0 {
		return errors.New("glInvalidateSubFramebuffer")
	}
	gpIsBuffer = uintptr(getProcAddr("glIsBuffer"))
	if gpIsBuffer == 0 {
		return errors.New("glIsBuffer")
	}
	gpIsEnabled = uintptr(getProcAddr("glIsEnabled"))
	if gpIsEnabled == 0 {
		return errors.New("glIsEnabled")
	}
	gpIsEnablediEXT = uintptr(getProcAddr("glIsEnablediEXT"))
	gpIsEnablediNV = uintptr(getProcAddr("glIsEnablediNV"))
	gpIsEnablediOES = uintptr(getProcAddr("glIsEnablediOES"))
	gpIsFenceNV = uintptr(getProcAddr("glIsFenceNV"))
	gpIsFramebuffer = uintptr(getProcAddr("glIsFramebuffer"))
	if gpIsFramebuffer == 0 {
		return errors.New("glIsFramebuffer")
	}
	gpIsImageHandleResidentNV = uintptr(getProcAddr("glIsImageHandleResidentNV"))
	gpIsMemoryObjectEXT = uintptr(getProcAddr("glIsMemoryObjectEXT"))
	gpIsPathNV = uintptr(getProcAddr("glIsPathNV"))
	gpIsPointInFillPathNV = uintptr(getProcAddr("glIsPointInFillPathNV"))
	gpIsPointInStrokePathNV = uintptr(getProcAddr("glIsPointInStrokePathNV"))
	gpIsProgram = uintptr(getProcAddr("glIsProgram"))
	if gpIsProgram == 0 {
		return errors.New("glIsProgram")
	}
	gpIsProgramPipeline = uintptr(getProcAddr("glIsProgramPipeline"))
	if gpIsProgramPipeline == 0 {
		return errors.New("glIsProgramPipeline")
	}
	gpIsProgramPipelineEXT = uintptr(getProcAddr("glIsProgramPipelineEXT"))
	gpIsQuery = uintptr(getProcAddr("glIsQuery"))
	if gpIsQuery == 0 {
		return errors.New("glIsQuery")
	}
	gpIsQueryEXT = uintptr(getProcAddr("glIsQueryEXT"))
	gpIsRenderbuffer = uintptr(getProcAddr("glIsRenderbuffer"))
	if gpIsRenderbuffer == 0 {
		return errors.New("glIsRenderbuffer")
	}
	gpIsSampler = uintptr(getProcAddr("glIsSampler"))
	if gpIsSampler == 0 {
		return errors.New("glIsSampler")
	}
	gpIsSemaphoreEXT = uintptr(getProcAddr("glIsSemaphoreEXT"))
	gpIsShader = uintptr(getProcAddr("glIsShader"))
	if gpIsShader == 0 {
		return errors.New("glIsShader")
	}
	gpIsSync = uintptr(getProcAddr("glIsSync"))
	if gpIsSync == 0 {
		return errors.New("glIsSync")
	}
	gpIsSyncAPPLE = uintptr(getProcAddr("glIsSyncAPPLE"))
	gpIsTexture = uintptr(getProcAddr("glIsTexture"))
	if gpIsTexture == 0 {
		return errors.New("glIsTexture")
	}
	gpIsTextureHandleResidentNV = uintptr(getProcAddr("glIsTextureHandleResidentNV"))
	gpIsTransformFeedback = uintptr(getProcAddr("glIsTransformFeedback"))
	if gpIsTransformFeedback == 0 {
		return errors.New("glIsTransformFeedback")
	}
	gpIsVertexArray = uintptr(getProcAddr("glIsVertexArray"))
	if gpIsVertexArray == 0 {
		return errors.New("glIsVertexArray")
	}
	gpIsVertexArrayOES = uintptr(getProcAddr("glIsVertexArrayOES"))
	gpLabelObjectEXT = uintptr(getProcAddr("glLabelObjectEXT"))
	gpLineWidth = uintptr(getProcAddr("glLineWidth"))
	if gpLineWidth == 0 {
		return errors.New("glLineWidth")
	}
	gpLinkProgram = uintptr(getProcAddr("glLinkProgram"))
	if gpLinkProgram == 0 {
		return errors.New("glLinkProgram")
	}
	gpMakeImageHandleNonResidentNV = uintptr(getProcAddr("glMakeImageHandleNonResidentNV"))
	gpMakeImageHandleResidentNV = uintptr(getProcAddr("glMakeImageHandleResidentNV"))
	gpMakeTextureHandleNonResidentNV = uintptr(getProcAddr("glMakeTextureHandleNonResidentNV"))
	gpMakeTextureHandleResidentNV = uintptr(getProcAddr("glMakeTextureHandleResidentNV"))
	gpMapBufferOES = uintptr(getProcAddr("glMapBufferOES"))
	gpMapBufferRange = uintptr(getProcAddr("glMapBufferRange"))
	if gpMapBufferRange == 0 {
		return errors.New("glMapBufferRange")
	}
	gpMapBufferRangeEXT = uintptr(getProcAddr("glMapBufferRangeEXT"))
	gpMatrixFrustumEXT = uintptr(getProcAddr("glMatrixFrustumEXT"))
	gpMatrixLoad3x2fNV = uintptr(getProcAddr("glMatrixLoad3x2fNV"))
	gpMatrixLoad3x3fNV = uintptr(getProcAddr("glMatrixLoad3x3fNV"))
	gpMatrixLoadIdentityEXT = uintptr(getProcAddr("glMatrixLoadIdentityEXT"))
	gpMatrixLoadTranspose3x3fNV = uintptr(getProcAddr("glMatrixLoadTranspose3x3fNV"))
	gpMatrixLoadTransposedEXT = uintptr(getProcAddr("glMatrixLoadTransposedEXT"))
	gpMatrixLoadTransposefEXT = uintptr(getProcAddr("glMatrixLoadTransposefEXT"))
	gpMatrixLoaddEXT = uintptr(getProcAddr("glMatrixLoaddEXT"))
	gpMatrixLoadfEXT = uintptr(getProcAddr("glMatrixLoadfEXT"))
	gpMatrixMult3x2fNV = uintptr(getProcAddr("glMatrixMult3x2fNV"))
	gpMatrixMult3x3fNV = uintptr(getProcAddr("glMatrixMult3x3fNV"))
	gpMatrixMultTranspose3x3fNV = uintptr(getProcAddr("glMatrixMultTranspose3x3fNV"))
	gpMatrixMultTransposedEXT = uintptr(getProcAddr("glMatrixMultTransposedEXT"))
	gpMatrixMultTransposefEXT = uintptr(getProcAddr("glMatrixMultTransposefEXT"))
	gpMatrixMultdEXT = uintptr(getProcAddr("glMatrixMultdEXT"))
	gpMatrixMultfEXT = uintptr(getProcAddr("glMatrixMultfEXT"))
	gpMatrixOrthoEXT = uintptr(getProcAddr("glMatrixOrthoEXT"))
	gpMatrixPopEXT = uintptr(getProcAddr("glMatrixPopEXT"))
	gpMatrixPushEXT = uintptr(getProcAddr("glMatrixPushEXT"))
	gpMatrixRotatedEXT = uintptr(getProcAddr("glMatrixRotatedEXT"))
	gpMatrixRotatefEXT = uintptr(getProcAddr("glMatrixRotatefEXT"))
	gpMatrixScaledEXT = uintptr(getProcAddr("glMatrixScaledEXT"))
	gpMatrixScalefEXT = uintptr(getProcAddr("glMatrixScalefEXT"))
	gpMatrixTranslatedEXT = uintptr(getProcAddr("glMatrixTranslatedEXT"))
	gpMatrixTranslatefEXT = uintptr(getProcAddr("glMatrixTranslatefEXT"))
	gpMaxShaderCompilerThreadsKHR = uintptr(getProcAddr("glMaxShaderCompilerThreadsKHR"))
	gpMemoryBarrier = uintptr(getProcAddr("glMemoryBarrier"))
	if gpMemoryBarrier == 0 {
		return errors.New("glMemoryBarrier")
	}
	gpMemoryBarrierByRegion = uintptr(getProcAddr("glMemoryBarrierByRegion"))
	if gpMemoryBarrierByRegion == 0 {
		return errors.New("glMemoryBarrierByRegion")
	}
	gpMemoryObjectParameterivEXT = uintptr(getProcAddr("glMemoryObjectParameterivEXT"))
	gpMinSampleShadingOES = uintptr(getProcAddr("glMinSampleShadingOES"))
	gpMultiDrawArraysEXT = uintptr(getProcAddr("glMultiDrawArraysEXT"))
	gpMultiDrawArraysIndirectEXT = uintptr(getProcAddr("glMultiDrawArraysIndirectEXT"))
	gpMultiDrawElementsBaseVertexEXT = uintptr(getProcAddr("glMultiDrawElementsBaseVertexEXT"))
	gpMultiDrawElementsEXT = uintptr(getProcAddr("glMultiDrawElementsEXT"))
	gpMultiDrawElementsIndirectEXT = uintptr(getProcAddr("glMultiDrawElementsIndirectEXT"))
	gpMultiDrawMeshTasksIndirectCountNV = uintptr(getProcAddr("glMultiDrawMeshTasksIndirectCountNV"))
	gpMultiDrawMeshTasksIndirectNV = uintptr(getProcAddr("glMultiDrawMeshTasksIndirectNV"))
	gpNamedBufferAttachMemoryNV = uintptr(getProcAddr("glNamedBufferAttachMemoryNV"))
	gpNamedBufferStorageExternalEXT = uintptr(getProcAddr("glNamedBufferStorageExternalEXT"))
	gpNamedBufferStorageMemEXT = uintptr(getProcAddr("glNamedBufferStorageMemEXT"))
	gpNamedFramebufferSampleLocationsfvNV = uintptr(getProcAddr("glNamedFramebufferSampleLocationsfvNV"))
	gpNamedRenderbufferStorageMultisampleAdvancedAMD = uintptr(getProcAddr("glNamedRenderbufferStorageMultisampleAdvancedAMD"))
	gpObjectLabel = uintptr(getProcAddr("glObjectLabel"))
	gpObjectLabelKHR = uintptr(getProcAddr("glObjectLabelKHR"))
	gpObjectPtrLabel = uintptr(getProcAddr("glObjectPtrLabel"))
	gpObjectPtrLabelKHR = uintptr(getProcAddr("glObjectPtrLabelKHR"))
	gpPatchParameteriEXT = uintptr(getProcAddr("glPatchParameteriEXT"))
	gpPatchParameteriOES = uintptr(getProcAddr("glPatchParameteriOES"))
	gpPathCommandsNV = uintptr(getProcAddr("glPathCommandsNV"))
	gpPathCoordsNV = uintptr(getProcAddr("glPathCoordsNV"))
	gpPathCoverDepthFuncNV = uintptr(getProcAddr("glPathCoverDepthFuncNV"))
	gpPathDashArrayNV = uintptr(getProcAddr("glPathDashArrayNV"))
	gpPathGlyphIndexArrayNV = uintptr(getProcAddr("glPathGlyphIndexArrayNV"))
	gpPathGlyphIndexRangeNV = uintptr(getProcAddr("glPathGlyphIndexRangeNV"))
	gpPathGlyphRangeNV = uintptr(getProcAddr("glPathGlyphRangeNV"))
	gpPathGlyphsNV = uintptr(getProcAddr("glPathGlyphsNV"))
	gpPathMemoryGlyphIndexArrayNV = uintptr(getProcAddr("glPathMemoryGlyphIndexArrayNV"))
	gpPathParameterfNV = uintptr(getProcAddr("glPathParameterfNV"))
	gpPathParameterfvNV = uintptr(getProcAddr("glPathParameterfvNV"))
	gpPathParameteriNV = uintptr(getProcAddr("glPathParameteriNV"))
	gpPathParameterivNV = uintptr(getProcAddr("glPathParameterivNV"))
	gpPathStencilDepthOffsetNV = uintptr(getProcAddr("glPathStencilDepthOffsetNV"))
	gpPathStencilFuncNV = uintptr(getProcAddr("glPathStencilFuncNV"))
	gpPathStringNV = uintptr(getProcAddr("glPathStringNV"))
	gpPathSubCommandsNV = uintptr(getProcAddr("glPathSubCommandsNV"))
	gpPathSubCoordsNV = uintptr(getProcAddr("glPathSubCoordsNV"))
	gpPauseTransformFeedback = uintptr(getProcAddr("glPauseTransformFeedback"))
	if gpPauseTransformFeedback == 0 {
		return errors.New("glPauseTransformFeedback")
	}
	gpPixelStorei = uintptr(getProcAddr("glPixelStorei"))
	if gpPixelStorei == 0 {
		return errors.New("glPixelStorei")
	}
	gpPointAlongPathNV = uintptr(getProcAddr("glPointAlongPathNV"))
	gpPolygonModeNV = uintptr(getProcAddr("glPolygonModeNV"))
	gpPolygonOffset = uintptr(getProcAddr("glPolygonOffset"))
	if gpPolygonOffset == 0 {
		return errors.New("glPolygonOffset")
	}
	gpPolygonOffsetClampEXT = uintptr(getProcAddr("glPolygonOffsetClampEXT"))
	gpPopDebugGroup = uintptr(getProcAddr("glPopDebugGroup"))
	gpPopDebugGroupKHR = uintptr(getProcAddr("glPopDebugGroupKHR"))
	gpPopGroupMarkerEXT = uintptr(getProcAddr("glPopGroupMarkerEXT"))
	gpPrimitiveBoundingBoxEXT = uintptr(getProcAddr("glPrimitiveBoundingBoxEXT"))
	gpPrimitiveBoundingBoxOES = uintptr(getProcAddr("glPrimitiveBoundingBoxOES"))
	gpProgramBinary = uintptr(getProcAddr("glProgramBinary"))
	if gpProgramBinary == 0 {
		return errors.New("glProgramBinary")
	}
	gpProgramBinaryOES = uintptr(getProcAddr("glProgramBinaryOES"))
	gpProgramParameteri = uintptr(getProcAddr("glProgramParameteri"))
	if gpProgramParameteri == 0 {
		return errors.New("glProgramParameteri")
	}
	gpProgramParameteriEXT = uintptr(getProcAddr("glProgramParameteriEXT"))
	gpProgramPathFragmentInputGenNV = uintptr(getProcAddr("glProgramPathFragmentInputGenNV"))
	gpProgramUniform1f = uintptr(getProcAddr("glProgramUniform1f"))
	if gpProgramUniform1f == 0 {
		return errors.New("glProgramUniform1f")
	}
	gpProgramUniform1fEXT = uintptr(getProcAddr("glProgramUniform1fEXT"))
	gpProgramUniform1fv = uintptr(getProcAddr("glProgramUniform1fv"))
	if gpProgramUniform1fv == 0 {
		return errors.New("glProgramUniform1fv")
	}
	gpProgramUniform1fvEXT = uintptr(getProcAddr("glProgramUniform1fvEXT"))
	gpProgramUniform1i = uintptr(getProcAddr("glProgramUniform1i"))
	if gpProgramUniform1i == 0 {
		return errors.New("glProgramUniform1i")
	}
	gpProgramUniform1i64NV = uintptr(getProcAddr("glProgramUniform1i64NV"))
	gpProgramUniform1i64vNV = uintptr(getProcAddr("glProgramUniform1i64vNV"))
	gpProgramUniform1iEXT = uintptr(getProcAddr("glProgramUniform1iEXT"))
	gpProgramUniform1iv = uintptr(getProcAddr("glProgramUniform1iv"))
	if gpProgramUniform1iv == 0 {
		return errors.New("glProgramUniform1iv")
	}
	gpProgramUniform1ivEXT = uintptr(getProcAddr("glProgramUniform1ivEXT"))
	gpProgramUniform1ui = uintptr(getProcAddr("glProgramUniform1ui"))
	if gpProgramUniform1ui == 0 {
		return errors.New("glProgramUniform1ui")
	}
	gpProgramUniform1ui64NV = uintptr(getProcAddr("glProgramUniform1ui64NV"))
	gpProgramUniform1ui64vNV = uintptr(getProcAddr("glProgramUniform1ui64vNV"))
	gpProgramUniform1uiEXT = uintptr(getProcAddr("glProgramUniform1uiEXT"))
	gpProgramUniform1uiv = uintptr(getProcAddr("glProgramUniform1uiv"))
	if gpProgramUniform1uiv == 0 {
		return errors.New("glProgramUniform1uiv")
	}
	gpProgramUniform1uivEXT = uintptr(getProcAddr("glProgramUniform1uivEXT"))
	gpProgramUniform2f = uintptr(getProcAddr("glProgramUniform2f"))
	if gpProgramUniform2f == 0 {
		return errors.New("glProgramUniform2f")
	}
	gpProgramUniform2fEXT = uintptr(getProcAddr("glProgramUniform2fEXT"))
	gpProgramUniform2fv = uintptr(getProcAddr("glProgramUniform2fv"))
	if gpProgramUniform2fv == 0 {
		return errors.New("glProgramUniform2fv")
	}
	gpProgramUniform2fvEXT = uintptr(getProcAddr("glProgramUniform2fvEXT"))
	gpProgramUniform2i = uintptr(getProcAddr("glProgramUniform2i"))
	if gpProgramUniform2i == 0 {
		return errors.New("glProgramUniform2i")
	}
	gpProgramUniform2i64NV = uintptr(getProcAddr("glProgramUniform2i64NV"))
	gpProgramUniform2i64vNV = uintptr(getProcAddr("glProgramUniform2i64vNV"))
	gpProgramUniform2iEXT = uintptr(getProcAddr("glProgramUniform2iEXT"))
	gpProgramUniform2iv = uintptr(getProcAddr("glProgramUniform2iv"))
	if gpProgramUniform2iv == 0 {
		return errors.New("glProgramUniform2iv")
	}
	gpProgramUniform2ivEXT = uintptr(getProcAddr("glProgramUniform2ivEXT"))
	gpProgramUniform2ui = uintptr(getProcAddr("glProgramUniform2ui"))
	if gpProgramUniform2ui == 0 {
		return errors.New("glProgramUniform2ui")
	}
	gpProgramUniform2ui64NV = uintptr(getProcAddr("glProgramUniform2ui64NV"))
	gpProgramUniform2ui64vNV = uintptr(getProcAddr("glProgramUniform2ui64vNV"))
	gpProgramUniform2uiEXT = uintptr(getProcAddr("glProgramUniform2uiEXT"))
	gpProgramUniform2uiv = uintptr(getProcAddr("glProgramUniform2uiv"))
	if gpProgramUniform2uiv == 0 {
		return errors.New("glProgramUniform2uiv")
	}
	gpProgramUniform2uivEXT = uintptr(getProcAddr("glProgramUniform2uivEXT"))
	gpProgramUniform3f = uintptr(getProcAddr("glProgramUniform3f"))
	if gpProgramUniform3f == 0 {
		return errors.New("glProgramUniform3f")
	}
	gpProgramUniform3fEXT = uintptr(getProcAddr("glProgramUniform3fEXT"))
	gpProgramUniform3fv = uintptr(getProcAddr("glProgramUniform3fv"))
	if gpProgramUniform3fv == 0 {
		return errors.New("glProgramUniform3fv")
	}
	gpProgramUniform3fvEXT = uintptr(getProcAddr("glProgramUniform3fvEXT"))
	gpProgramUniform3i = uintptr(getProcAddr("glProgramUniform3i"))
	if gpProgramUniform3i == 0 {
		return errors.New("glProgramUniform3i")
	}
	gpProgramUniform3i64NV = uintptr(getProcAddr("glProgramUniform3i64NV"))
	gpProgramUniform3i64vNV = uintptr(getProcAddr("glProgramUniform3i64vNV"))
	gpProgramUniform3iEXT = uintptr(getProcAddr("glProgramUniform3iEXT"))
	gpProgramUniform3iv = uintptr(getProcAddr("glProgramUniform3iv"))
	if gpProgramUniform3iv == 0 {
		return errors.New("glProgramUniform3iv")
	}
	gpProgramUniform3ivEXT = uintptr(getProcAddr("glProgramUniform3ivEXT"))
	gpProgramUniform3ui = uintptr(getProcAddr("glProgramUniform3ui"))
	if gpProgramUniform3ui == 0 {
		return errors.New("glProgramUniform3ui")
	}
	gpProgramUniform3ui64NV = uintptr(getProcAddr("glProgramUniform3ui64NV"))
	gpProgramUniform3ui64vNV = uintptr(getProcAddr("glProgramUniform3ui64vNV"))
	gpProgramUniform3uiEXT = uintptr(getProcAddr("glProgramUniform3uiEXT"))
	gpProgramUniform3uiv = uintptr(getProcAddr("glProgramUniform3uiv"))
	if gpProgramUniform3uiv == 0 {
		return errors.New("glProgramUniform3uiv")
	}
	gpProgramUniform3uivEXT = uintptr(getProcAddr("glProgramUniform3uivEXT"))
	gpProgramUniform4f = uintptr(getProcAddr("glProgramUniform4f"))
	if gpProgramUniform4f == 0 {
		return errors.New("glProgramUniform4f")
	}
	gpProgramUniform4fEXT = uintptr(getProcAddr("glProgramUniform4fEXT"))
	gpProgramUniform4fv = uintptr(getProcAddr("glProgramUniform4fv"))
	if gpProgramUniform4fv == 0 {
		return errors.New("glProgramUniform4fv")
	}
	gpProgramUniform4fvEXT = uintptr(getProcAddr("glProgramUniform4fvEXT"))
	gpProgramUniform4i = uintptr(getProcAddr("glProgramUniform4i"))
	if gpProgramUniform4i == 0 {
		return errors.New("glProgramUniform4i")
	}
	gpProgramUniform4i64NV = uintptr(getProcAddr("glProgramUniform4i64NV"))
	gpProgramUniform4i64vNV = uintptr(getProcAddr("glProgramUniform4i64vNV"))
	gpProgramUniform4iEXT = uintptr(getProcAddr("glProgramUniform4iEXT"))
	gpProgramUniform4iv = uintptr(getProcAddr("glProgramUniform4iv"))
	if gpProgramUniform4iv == 0 {
		return errors.New("glProgramUniform4iv")
	}
	gpProgramUniform4ivEXT = uintptr(getProcAddr("glProgramUniform4ivEXT"))
	gpProgramUniform4ui = uintptr(getProcAddr("glProgramUniform4ui"))
	if gpProgramUniform4ui == 0 {
		return errors.New("glProgramUniform4ui")
	}
	gpProgramUniform4ui64NV = uintptr(getProcAddr("glProgramUniform4ui64NV"))
	gpProgramUniform4ui64vNV = uintptr(getProcAddr("glProgramUniform4ui64vNV"))
	gpProgramUniform4uiEXT = uintptr(getProcAddr("glProgramUniform4uiEXT"))
	gpProgramUniform4uiv = uintptr(getProcAddr("glProgramUniform4uiv"))
	if gpProgramUniform4uiv == 0 {
		return errors.New("glProgramUniform4uiv")
	}
	gpProgramUniform4uivEXT = uintptr(getProcAddr("glProgramUniform4uivEXT"))
	gpProgramUniformHandleui64IMG = uintptr(getProcAddr("glProgramUniformHandleui64IMG"))
	gpProgramUniformHandleui64NV = uintptr(getProcAddr("glProgramUniformHandleui64NV"))
	gpProgramUniformHandleui64vIMG = uintptr(getProcAddr("glProgramUniformHandleui64vIMG"))
	gpProgramUniformHandleui64vNV = uintptr(getProcAddr("glProgramUniformHandleui64vNV"))
	gpProgramUniformMatrix2fv = uintptr(getProcAddr("glProgramUniformMatrix2fv"))
	if gpProgramUniformMatrix2fv == 0 {
		return errors.New("glProgramUniformMatrix2fv")
	}
	gpProgramUniformMatrix2fvEXT = uintptr(getProcAddr("glProgramUniformMatrix2fvEXT"))
	gpProgramUniformMatrix2x3fv = uintptr(getProcAddr("glProgramUniformMatrix2x3fv"))
	if gpProgramUniformMatrix2x3fv == 0 {
		return errors.New("glProgramUniformMatrix2x3fv")
	}
	gpProgramUniformMatrix2x3fvEXT = uintptr(getProcAddr("glProgramUniformMatrix2x3fvEXT"))
	gpProgramUniformMatrix2x4fv = uintptr(getProcAddr("glProgramUniformMatrix2x4fv"))
	if gpProgramUniformMatrix2x4fv == 0 {
		return errors.New("glProgramUniformMatrix2x4fv")
	}
	gpProgramUniformMatrix2x4fvEXT = uintptr(getProcAddr("glProgramUniformMatrix2x4fvEXT"))
	gpProgramUniformMatrix3fv = uintptr(getProcAddr("glProgramUniformMatrix3fv"))
	if gpProgramUniformMatrix3fv == 0 {
		return errors.New("glProgramUniformMatrix3fv")
	}
	gpProgramUniformMatrix3fvEXT = uintptr(getProcAddr("glProgramUniformMatrix3fvEXT"))
	gpProgramUniformMatrix3x2fv = uintptr(getProcAddr("glProgramUniformMatrix3x2fv"))
	if gpProgramUniformMatrix3x2fv == 0 {
		return errors.New("glProgramUniformMatrix3x2fv")
	}
	gpProgramUniformMatrix3x2fvEXT = uintptr(getProcAddr("glProgramUniformMatrix3x2fvEXT"))
	gpProgramUniformMatrix3x4fv = uintptr(getProcAddr("glProgramUniformMatrix3x4fv"))
	if gpProgramUniformMatrix3x4fv == 0 {
		return errors.New("glProgramUniformMatrix3x4fv")
	}
	gpProgramUniformMatrix3x4fvEXT = uintptr(getProcAddr("glProgramUniformMatrix3x4fvEXT"))
	gpProgramUniformMatrix4fv = uintptr(getProcAddr("glProgramUniformMatrix4fv"))
	if gpProgramUniformMatrix4fv == 0 {
		return errors.New("glProgramUniformMatrix4fv")
	}
	gpProgramUniformMatrix4fvEXT = uintptr(getProcAddr("glProgramUniformMatrix4fvEXT"))
	gpProgramUniformMatrix4x2fv = uintptr(getProcAddr("glProgramUniformMatrix4x2fv"))
	if gpProgramUniformMatrix4x2fv == 0 {
		return errors.New("glProgramUniformMatrix4x2fv")
	}
	gpProgramUniformMatrix4x2fvEXT = uintptr(getProcAddr("glProgramUniformMatrix4x2fvEXT"))
	gpProgramUniformMatrix4x3fv = uintptr(getProcAddr("glProgramUniformMatrix4x3fv"))
	if gpProgramUniformMatrix4x3fv == 0 {
		return errors.New("glProgramUniformMatrix4x3fv")
	}
	gpProgramUniformMatrix4x3fvEXT = uintptr(getProcAddr("glProgramUniformMatrix4x3fvEXT"))
	gpPushDebugGroup = uintptr(getProcAddr("glPushDebugGroup"))
	gpPushDebugGroupKHR = uintptr(getProcAddr("glPushDebugGroupKHR"))
	gpPushGroupMarkerEXT = uintptr(getProcAddr("glPushGroupMarkerEXT"))
	gpQueryCounterEXT = uintptr(getProcAddr("glQueryCounterEXT"))
	gpRasterSamplesEXT = uintptr(getProcAddr("glRasterSamplesEXT"))
	gpReadBuffer = uintptr(getProcAddr("glReadBuffer"))
	if gpReadBuffer == 0 {
		return errors.New("glReadBuffer")
	}
	gpReadBufferIndexedEXT = uintptr(getProcAddr("glReadBufferIndexedEXT"))
	gpReadBufferNV = uintptr(getProcAddr("glReadBufferNV"))
	gpReadPixels = uintptr(getProcAddr("glReadPixels"))
	if gpReadPixels == 0 {
		return errors.New("glReadPixels")
	}
	gpReadnPixels = uintptr(getProcAddr("glReadnPixels"))
	gpReadnPixelsEXT = uintptr(getProcAddr("glReadnPixelsEXT"))
	gpReadnPixelsKHR = uintptr(getProcAddr("glReadnPixelsKHR"))
	gpReleaseKeyedMutexWin32EXT = uintptr(getProcAddr("glReleaseKeyedMutexWin32EXT"))
	gpReleaseShaderCompiler = uintptr(getProcAddr("glReleaseShaderCompiler"))
	if gpReleaseShaderCompiler == 0 {
		return errors.New("glReleaseShaderCompiler")
	}
	gpRenderbufferStorage = uintptr(getProcAddr("glRenderbufferStorage"))
	if gpRenderbufferStorage == 0 {
		return errors.New("glRenderbufferStorage")
	}
	gpRenderbufferStorageMultisample = uintptr(getProcAddr("glRenderbufferStorageMultisample"))
	if gpRenderbufferStorageMultisample == 0 {
		return errors.New("glRenderbufferStorageMultisample")
	}
	gpRenderbufferStorageMultisampleANGLE = uintptr(getProcAddr("glRenderbufferStorageMultisampleANGLE"))
	gpRenderbufferStorageMultisampleAPPLE = uintptr(getProcAddr("glRenderbufferStorageMultisampleAPPLE"))
	gpRenderbufferStorageMultisampleAdvancedAMD = uintptr(getProcAddr("glRenderbufferStorageMultisampleAdvancedAMD"))
	gpRenderbufferStorageMultisampleEXT = uintptr(getProcAddr("glRenderbufferStorageMultisampleEXT"))
	gpRenderbufferStorageMultisampleIMG = uintptr(getProcAddr("glRenderbufferStorageMultisampleIMG"))
	gpRenderbufferStorageMultisampleNV = uintptr(getProcAddr("glRenderbufferStorageMultisampleNV"))
	gpResetMemoryObjectParameterNV = uintptr(getProcAddr("glResetMemoryObjectParameterNV"))
	gpResolveDepthValuesNV = uintptr(getProcAddr("glResolveDepthValuesNV"))
	gpResolveMultisampleFramebufferAPPLE = uintptr(getProcAddr("glResolveMultisampleFramebufferAPPLE"))
	gpResumeTransformFeedback = uintptr(getProcAddr("glResumeTransformFeedback"))
	if gpResumeTransformFeedback == 0 {
		return errors.New("glResumeTransformFeedback")
	}
	gpSampleCoverage = uintptr(getProcAddr("glSampleCoverage"))
	if gpSampleCoverage == 0 {
		return errors.New("glSampleCoverage")
	}
	gpSampleMaski = uintptr(getProcAddr("glSampleMaski"))
	if gpSampleMaski == 0 {
		return errors.New("glSampleMaski")
	}
	gpSamplerParameterIivEXT = uintptr(getProcAddr("glSamplerParameterIivEXT"))
	gpSamplerParameterIivOES = uintptr(getProcAddr("glSamplerParameterIivOES"))
	gpSamplerParameterIuivEXT = uintptr(getProcAddr("glSamplerParameterIuivEXT"))
	gpSamplerParameterIuivOES = uintptr(getProcAddr("glSamplerParameterIuivOES"))
	gpSamplerParameterf = uintptr(getProcAddr("glSamplerParameterf"))
	if gpSamplerParameterf == 0 {
		return errors.New("glSamplerParameterf")
	}
	gpSamplerParameterfv = uintptr(getProcAddr("glSamplerParameterfv"))
	if gpSamplerParameterfv == 0 {
		return errors.New("glSamplerParameterfv")
	}
	gpSamplerParameteri = uintptr(getProcAddr("glSamplerParameteri"))
	if gpSamplerParameteri == 0 {
		return errors.New("glSamplerParameteri")
	}
	gpSamplerParameteriv = uintptr(getProcAddr("glSamplerParameteriv"))
	if gpSamplerParameteriv == 0 {
		return errors.New("glSamplerParameteriv")
	}
	gpScissor = uintptr(getProcAddr("glScissor"))
	if gpScissor == 0 {
		return errors.New("glScissor")
	}
	gpScissorArrayvNV = uintptr(getProcAddr("glScissorArrayvNV"))
	gpScissorArrayvOES = uintptr(getProcAddr("glScissorArrayvOES"))
	gpScissorExclusiveArrayvNV = uintptr(getProcAddr("glScissorExclusiveArrayvNV"))
	gpScissorExclusiveNV = uintptr(getProcAddr("glScissorExclusiveNV"))
	gpScissorIndexedNV = uintptr(getProcAddr("glScissorIndexedNV"))
	gpScissorIndexedOES = uintptr(getProcAddr("glScissorIndexedOES"))
	gpScissorIndexedvNV = uintptr(getProcAddr("glScissorIndexedvNV"))
	gpScissorIndexedvOES = uintptr(getProcAddr("glScissorIndexedvOES"))
	gpSelectPerfMonitorCountersAMD = uintptr(getProcAddr("glSelectPerfMonitorCountersAMD"))
	gpSemaphoreParameterui64vEXT = uintptr(getProcAddr("glSemaphoreParameterui64vEXT"))
	gpSetFenceNV = uintptr(getProcAddr("glSetFenceNV"))
	gpShaderBinary = uintptr(getProcAddr("glShaderBinary"))
	if gpShaderBinary == 0 {
		return errors.New("glShaderBinary")
	}
	gpShaderSource = uintptr(getProcAddr("glShaderSource"))
	if gpShaderSource == 0 {
		return errors.New("glShaderSource")
	}
	gpShadingRateImageBarrierNV = uintptr(getProcAddr("glShadingRateImageBarrierNV"))
	gpShadingRateImagePaletteNV = uintptr(getProcAddr("glShadingRateImagePaletteNV"))
	gpShadingRateSampleOrderCustomNV = uintptr(getProcAddr("glShadingRateSampleOrderCustomNV"))
	gpShadingRateSampleOrderNV = uintptr(getProcAddr("glShadingRateSampleOrderNV"))
	gpSignalSemaphoreEXT = uintptr(getProcAddr("glSignalSemaphoreEXT"))
	gpSignalVkFenceNV = uintptr(getProcAddr("glSignalVkFenceNV"))
	gpSignalVkSemaphoreNV = uintptr(getProcAddr("glSignalVkSemaphoreNV"))
	gpStartTilingQCOM = uintptr(getProcAddr("glStartTilingQCOM"))
	gpStencilFillPathInstancedNV = uintptr(getProcAddr("glStencilFillPathInstancedNV"))
	gpStencilFillPathNV = uintptr(getProcAddr("glStencilFillPathNV"))
	gpStencilFunc = uintptr(getProcAddr("glStencilFunc"))
	if gpStencilFunc == 0 {
		return errors.New("glStencilFunc")
	}
	gpStencilFuncSeparate = uintptr(getProcAddr("glStencilFuncSeparate"))
	if gpStencilFuncSeparate == 0 {
		return errors.New("glStencilFuncSeparate")
	}
	gpStencilMask = uintptr(getProcAddr("glStencilMask"))
	if gpStencilMask == 0 {
		return errors.New("glStencilMask")
	}
	gpStencilMaskSeparate = uintptr(getProcAddr("glStencilMaskSeparate"))
	if gpStencilMaskSeparate == 0 {
		return errors.New("glStencilMaskSeparate")
	}
	gpStencilOp = uintptr(getProcAddr("glStencilOp"))
	if gpStencilOp == 0 {
		return errors.New("glStencilOp")
	}
	gpStencilOpSeparate = uintptr(getProcAddr("glStencilOpSeparate"))
	if gpStencilOpSeparate == 0 {
		return errors.New("glStencilOpSeparate")
	}
	gpStencilStrokePathInstancedNV = uintptr(getProcAddr("glStencilStrokePathInstancedNV"))
	gpStencilStrokePathNV = uintptr(getProcAddr("glStencilStrokePathNV"))
	gpStencilThenCoverFillPathInstancedNV = uintptr(getProcAddr("glStencilThenCoverFillPathInstancedNV"))
	gpStencilThenCoverFillPathNV = uintptr(getProcAddr("glStencilThenCoverFillPathNV"))
	gpStencilThenCoverStrokePathInstancedNV = uintptr(getProcAddr("glStencilThenCoverStrokePathInstancedNV"))
	gpStencilThenCoverStrokePathNV = uintptr(getProcAddr("glStencilThenCoverStrokePathNV"))
	gpSubpixelPrecisionBiasNV = uintptr(getProcAddr("glSubpixelPrecisionBiasNV"))
	gpTestFenceNV = uintptr(getProcAddr("glTestFenceNV"))
	gpTexAttachMemoryNV = uintptr(getProcAddr("glTexAttachMemoryNV"))
	gpTexBufferEXT = uintptr(getProcAddr("glTexBufferEXT"))
	gpTexBufferOES = uintptr(getProcAddr("glTexBufferOES"))
	gpTexBufferRangeEXT = uintptr(getProcAddr("glTexBufferRangeEXT"))
	gpTexBufferRangeOES = uintptr(getProcAddr("glTexBufferRangeOES"))
	gpTexImage2D = uintptr(getProcAddr("glTexImage2D"))
	if gpTexImage2D == 0 {
		return errors.New("glTexImage2D")
	}
	gpTexImage3D = uintptr(getProcAddr("glTexImage3D"))
	if gpTexImage3D == 0 {
		return errors.New("glTexImage3D")
	}
	gpTexImage3DOES = uintptr(getProcAddr("glTexImage3DOES"))
	gpTexPageCommitmentEXT = uintptr(getProcAddr("glTexPageCommitmentEXT"))
	gpTexParameterIivEXT = uintptr(getProcAddr("glTexParameterIivEXT"))
	gpTexParameterIivOES = uintptr(getProcAddr("glTexParameterIivOES"))
	gpTexParameterIuivEXT = uintptr(getProcAddr("glTexParameterIuivEXT"))
	gpTexParameterIuivOES = uintptr(getProcAddr("glTexParameterIuivOES"))
	gpTexParameterf = uintptr(getProcAddr("glTexParameterf"))
	if gpTexParameterf == 0 {
		return errors.New("glTexParameterf")
	}
	gpTexParameterfv = uintptr(getProcAddr("glTexParameterfv"))
	if gpTexParameterfv == 0 {
		return errors.New("glTexParameterfv")
	}
	gpTexParameteri = uintptr(getProcAddr("glTexParameteri"))
	if gpTexParameteri == 0 {
		return errors.New("glTexParameteri")
	}
	gpTexParameteriv = uintptr(getProcAddr("glTexParameteriv"))
	if gpTexParameteriv == 0 {
		return errors.New("glTexParameteriv")
	}
	gpTexStorage1DEXT = uintptr(getProcAddr("glTexStorage1DEXT"))
	gpTexStorage2D = uintptr(getProcAddr("glTexStorage2D"))
	if gpTexStorage2D == 0 {
		return errors.New("glTexStorage2D")
	}
	gpTexStorage2DEXT = uintptr(getProcAddr("glTexStorage2DEXT"))
	gpTexStorage2DMultisample = uintptr(getProcAddr("glTexStorage2DMultisample"))
	if gpTexStorage2DMultisample == 0 {
		return errors.New("glTexStorage2DMultisample")
	}
	gpTexStorage3D = uintptr(getProcAddr("glTexStorage3D"))
	if gpTexStorage3D == 0 {
		return errors.New("glTexStorage3D")
	}
	gpTexStorage3DEXT = uintptr(getProcAddr("glTexStorage3DEXT"))
	gpTexStorage3DMultisampleOES = uintptr(getProcAddr("glTexStorage3DMultisampleOES"))
	gpTexStorageMem1DEXT = uintptr(getProcAddr("glTexStorageMem1DEXT"))
	gpTexStorageMem2DEXT = uintptr(getProcAddr("glTexStorageMem2DEXT"))
	gpTexStorageMem2DMultisampleEXT = uintptr(getProcAddr("glTexStorageMem2DMultisampleEXT"))
	gpTexStorageMem3DEXT = uintptr(getProcAddr("glTexStorageMem3DEXT"))
	gpTexStorageMem3DMultisampleEXT = uintptr(getProcAddr("glTexStorageMem3DMultisampleEXT"))
	gpTexSubImage2D = uintptr(getProcAddr("glTexSubImage2D"))
	if gpTexSubImage2D == 0 {
		return errors.New("glTexSubImage2D")
	}
	gpTexSubImage3D = uintptr(getProcAddr("glTexSubImage3D"))
	if gpTexSubImage3D == 0 {
		return errors.New("glTexSubImage3D")
	}
	gpTexSubImage3DOES = uintptr(getProcAddr("glTexSubImage3DOES"))
	gpTextureAttachMemoryNV = uintptr(getProcAddr("glTextureAttachMemoryNV"))
	gpTextureFoveationParametersQCOM = uintptr(getProcAddr("glTextureFoveationParametersQCOM"))
	gpTextureStorage1DEXT = uintptr(getProcAddr("glTextureStorage1DEXT"))
	gpTextureStorage2DEXT = uintptr(getProcAddr("glTextureStorage2DEXT"))
	gpTextureStorage3DEXT = uintptr(getProcAddr("glTextureStorage3DEXT"))
	gpTextureStorageMem1DEXT = uintptr(getProcAddr("glTextureStorageMem1DEXT"))
	gpTextureStorageMem2DEXT = uintptr(getProcAddr("glTextureStorageMem2DEXT"))
	gpTextureStorageMem2DMultisampleEXT = uintptr(getProcAddr("glTextureStorageMem2DMultisampleEXT"))
	gpTextureStorageMem3DEXT = uintptr(getProcAddr("glTextureStorageMem3DEXT"))
	gpTextureStorageMem3DMultisampleEXT = uintptr(getProcAddr("glTextureStorageMem3DMultisampleEXT"))
	gpTextureViewEXT = uintptr(getProcAddr("glTextureViewEXT"))
	gpTextureViewOES = uintptr(getProcAddr("glTextureViewOES"))
	gpTransformFeedbackVaryings = uintptr(getProcAddr("glTransformFeedbackVaryings"))
	if gpTransformFeedbackVaryings == 0 {
		return errors.New("glTransformFeedbackVaryings")
	}
	gpTransformPathNV = uintptr(getProcAddr("glTransformPathNV"))
	gpUniform1f = uintptr(getProcAddr("glUniform1f"))
	if gpUniform1f == 0 {
		return errors.New("glUniform1f")
	}
	gpUniform1fv = uintptr(getProcAddr("glUniform1fv"))
	if gpUniform1fv == 0 {
		return errors.New("glUniform1fv")
	}
	gpUniform1i = uintptr(getProcAddr("glUniform1i"))
	if gpUniform1i == 0 {
		return errors.New("glUniform1i")
	}
	gpUniform1i64NV = uintptr(getProcAddr("glUniform1i64NV"))
	gpUniform1i64vNV = uintptr(getProcAddr("glUniform1i64vNV"))
	gpUniform1iv = uintptr(getProcAddr("glUniform1iv"))
	if gpUniform1iv == 0 {
		return errors.New("glUniform1iv")
	}
	gpUniform1ui = uintptr(getProcAddr("glUniform1ui"))
	if gpUniform1ui == 0 {
		return errors.New("glUniform1ui")
	}
	gpUniform1ui64NV = uintptr(getProcAddr("glUniform1ui64NV"))
	gpUniform1ui64vNV = uintptr(getProcAddr("glUniform1ui64vNV"))
	gpUniform1uiv = uintptr(getProcAddr("glUniform1uiv"))
	if gpUniform1uiv == 0 {
		return errors.New("glUniform1uiv")
	}
	gpUniform2f = uintptr(getProcAddr("glUniform2f"))
	if gpUniform2f == 0 {
		return errors.New("glUniform2f")
	}
	gpUniform2fv = uintptr(getProcAddr("glUniform2fv"))
	if gpUniform2fv == 0 {
		return errors.New("glUniform2fv")
	}
	gpUniform2i = uintptr(getProcAddr("glUniform2i"))
	if gpUniform2i == 0 {
		return errors.New("glUniform2i")
	}
	gpUniform2i64NV = uintptr(getProcAddr("glUniform2i64NV"))
	gpUniform2i64vNV = uintptr(getProcAddr("glUniform2i64vNV"))
	gpUniform2iv = uintptr(getProcAddr("glUniform2iv"))
	if gpUniform2iv == 0 {
		return errors.New("glUniform2iv")
	}
	gpUniform2ui = uintptr(getProcAddr("glUniform2ui"))
	if gpUniform2ui == 0 {
		return errors.New("glUniform2ui")
	}
	gpUniform2ui64NV = uintptr(getProcAddr("glUniform2ui64NV"))
	gpUniform2ui64vNV = uintptr(getProcAddr("glUniform2ui64vNV"))
	gpUniform2uiv = uintptr(getProcAddr("glUniform2uiv"))
	if gpUniform2uiv == 0 {
		return errors.New("glUniform2uiv")
	}
	gpUniform3f = uintptr(getProcAddr("glUniform3f"))
	if gpUniform3f == 0 {
		return errors.New("glUniform3f")
	}
	gpUniform3fv = uintptr(getProcAddr("glUniform3fv"))
	if gpUniform3fv == 0 {
		return errors.New("glUniform3fv")
	}
	gpUniform3i = uintptr(getProcAddr("glUniform3i"))
	if gpUniform3i == 0 {
		return errors.New("glUniform3i")
	}
	gpUniform3i64NV = uintptr(getProcAddr("glUniform3i64NV"))
	gpUniform3i64vNV = uintptr(getProcAddr("glUniform3i64vNV"))
	gpUniform3iv = uintptr(getProcAddr("glUniform3iv"))
	if gpUniform3iv == 0 {
		return errors.New("glUniform3iv")
	}
	gpUniform3ui = uintptr(getProcAddr("glUniform3ui"))
	if gpUniform3ui == 0 {
		return errors.New("glUniform3ui")
	}
	gpUniform3ui64NV = uintptr(getProcAddr("glUniform3ui64NV"))
	gpUniform3ui64vNV = uintptr(getProcAddr("glUniform3ui64vNV"))
	gpUniform3uiv = uintptr(getProcAddr("glUniform3uiv"))
	if gpUniform3uiv == 0 {
		return errors.New("glUniform3uiv")
	}
	gpUniform4f = uintptr(getProcAddr("glUniform4f"))
	if gpUniform4f == 0 {
		return errors.New("glUniform4f")
	}
	gpUniform4fv = uintptr(getProcAddr("glUniform4fv"))
	if gpUniform4fv == 0 {
		return errors.New("glUniform4fv")
	}
	gpUniform4i = uintptr(getProcAddr("glUniform4i"))
	if gpUniform4i == 0 {
		return errors.New("glUniform4i")
	}
	gpUniform4i64NV = uintptr(getProcAddr("glUniform4i64NV"))
	gpUniform4i64vNV = uintptr(getProcAddr("glUniform4i64vNV"))
	gpUniform4iv = uintptr(getProcAddr("glUniform4iv"))
	if gpUniform4iv == 0 {
		return errors.New("glUniform4iv")
	}
	gpUniform4ui = uintptr(getProcAddr("glUniform4ui"))
	if gpUniform4ui == 0 {
		return errors.New("glUniform4ui")
	}
	gpUniform4ui64NV = uintptr(getProcAddr("glUniform4ui64NV"))
	gpUniform4ui64vNV = uintptr(getProcAddr("glUniform4ui64vNV"))
	gpUniform4uiv = uintptr(getProcAddr("glUniform4uiv"))
	if gpUniform4uiv == 0 {
		return errors.New("glUniform4uiv")
	}
	gpUniformBlockBinding = uintptr(getProcAddr("glUniformBlockBinding"))
	if gpUniformBlockBinding == 0 {
		return errors.New("glUniformBlockBinding")
	}
	gpUniformHandleui64IMG = uintptr(getProcAddr("glUniformHandleui64IMG"))
	gpUniformHandleui64NV = uintptr(getProcAddr("glUniformHandleui64NV"))
	gpUniformHandleui64vIMG = uintptr(getProcAddr("glUniformHandleui64vIMG"))
	gpUniformHandleui64vNV = uintptr(getProcAddr("glUniformHandleui64vNV"))
	gpUniformMatrix2fv = uintptr(getProcAddr("glUniformMatrix2fv"))
	if gpUniformMatrix2fv == 0 {
		return errors.New("glUniformMatrix2fv")
	}
	gpUniformMatrix2x3fv = uintptr(getProcAddr("glUniformMatrix2x3fv"))
	if gpUniformMatrix2x3fv == 0 {
		return errors.New("glUniformMatrix2x3fv")
	}
	gpUniformMatrix2x3fvNV = uintptr(getProcAddr("glUniformMatrix2x3fvNV"))
	gpUniformMatrix2x4fv = uintptr(getProcAddr("glUniformMatrix2x4fv"))
	if gpUniformMatrix2x4fv == 0 {
		return errors.New("glUniformMatrix2x4fv")
	}
	gpUniformMatrix2x4fvNV = uintptr(getProcAddr("glUniformMatrix2x4fvNV"))
	gpUniformMatrix3fv = uintptr(getProcAddr("glUniformMatrix3fv"))
	if gpUniformMatrix3fv == 0 {
		return errors.New("glUniformMatrix3fv")
	}
	gpUniformMatrix3x2fv = uintptr(getProcAddr("glUniformMatrix3x2fv"))
	if gpUniformMatrix3x2fv == 0 {
		return errors.New("glUniformMatrix3x2fv")
	}
	gpUniformMatrix3x2fvNV = uintptr(getProcAddr("glUniformMatrix3x2fvNV"))
	gpUniformMatrix3x4fv = uintptr(getProcAddr("glUniformMatrix3x4fv"))
	if gpUniformMatrix3x4fv == 0 {
		return errors.New("glUniformMatrix3x4fv")
	}
	gpUniformMatrix3x4fvNV = uintptr(getProcAddr("glUniformMatrix3x4fvNV"))
	gpUniformMatrix4fv = uintptr(getProcAddr("glUniformMatrix4fv"))
	if gpUniformMatrix4fv == 0 {
		return errors.New("glUniformMatrix4fv")
	}
	gpUniformMatrix4x2fv = uintptr(getProcAddr("glUniformMatrix4x2fv"))
	if gpUniformMatrix4x2fv == 0 {
		return errors.New("glUniformMatrix4x2fv")
	}
	gpUniformMatrix4x2fvNV = uintptr(getProcAddr("glUniformMatrix4x2fvNV"))
	gpUniformMatrix4x3fv = uintptr(getProcAddr("glUniformMatrix4x3fv"))
	if gpUniformMatrix4x3fv == 0 {
		return errors.New("glUniformMatrix4x3fv")
	}
	gpUniformMatrix4x3fvNV = uintptr(getProcAddr("glUniformMatrix4x3fvNV"))
	gpUnmapBuffer = uintptr(getProcAddr("glUnmapBuffer"))
	if gpUnmapBuffer == 0 {
		return errors.New("glUnmapBuffer")
	}
	gpUnmapBufferOES = uintptr(getProcAddr("glUnmapBufferOES"))
	gpUseProgram = uintptr(getProcAddr("glUseProgram"))
	if gpUseProgram == 0 {
		return errors.New("glUseProgram")
	}
	gpUseProgramStages = uintptr(getProcAddr("glUseProgramStages"))
	if gpUseProgramStages == 0 {
		return errors.New("glUseProgramStages")
	}
	gpUseProgramStagesEXT = uintptr(getProcAddr("glUseProgramStagesEXT"))
	gpUseShaderProgramEXT = uintptr(getProcAddr("glUseShaderProgramEXT"))
	gpValidateProgram = uintptr(getProcAddr("glValidateProgram"))
	if gpValidateProgram == 0 {
		return errors.New("glValidateProgram")
	}
	gpValidateProgramPipeline = uintptr(getProcAddr("glValidateProgramPipeline"))
	if gpValidateProgramPipeline == 0 {
		return errors.New("glValidateProgramPipeline")
	}
	gpValidateProgramPipelineEXT = uintptr(getProcAddr("glValidateProgramPipelineEXT"))
	gpVertexAttrib1f = uintptr(getProcAddr("glVertexAttrib1f"))
	if gpVertexAttrib1f == 0 {
		return errors.New("glVertexAttrib1f")
	}
	gpVertexAttrib1fv = uintptr(getProcAddr("glVertexAttrib1fv"))
	if gpVertexAttrib1fv == 0 {
		return errors.New("glVertexAttrib1fv")
	}
	gpVertexAttrib2f = uintptr(getProcAddr("glVertexAttrib2f"))
	if gpVertexAttrib2f == 0 {
		return errors.New("glVertexAttrib2f")
	}
	gpVertexAttrib2fv = uintptr(getProcAddr("glVertexAttrib2fv"))
	if gpVertexAttrib2fv == 0 {
		return errors.New("glVertexAttrib2fv")
	}
	gpVertexAttrib3f = uintptr(getProcAddr("glVertexAttrib3f"))
	if gpVertexAttrib3f == 0 {
		return errors.New("glVertexAttrib3f")
	}
	gpVertexAttrib3fv = uintptr(getProcAddr("glVertexAttrib3fv"))
	if gpVertexAttrib3fv == 0 {
		return errors.New("glVertexAttrib3fv")
	}
	gpVertexAttrib4f = uintptr(getProcAddr("glVertexAttrib4f"))
	if gpVertexAttrib4f == 0 {
		return errors.New("glVertexAttrib4f")
	}
	gpVertexAttrib4fv = uintptr(getProcAddr("glVertexAttrib4fv"))
	if gpVertexAttrib4fv == 0 {
		return errors.New("glVertexAttrib4fv")
	}
	gpVertexAttribBinding = uintptr(getProcAddr("glVertexAttribBinding"))
	if gpVertexAttribBinding == 0 {
		return errors.New("glVertexAttribBinding")
	}
	gpVertexAttribDivisor = uintptr(getProcAddr("glVertexAttribDivisor"))
	if gpVertexAttribDivisor == 0 {
		return errors.New("glVertexAttribDivisor")
	}
	gpVertexAttribDivisorANGLE = uintptr(getProcAddr("glVertexAttribDivisorANGLE"))
	gpVertexAttribDivisorEXT = uintptr(getProcAddr("glVertexAttribDivisorEXT"))
	gpVertexAttribDivisorNV = uintptr(getProcAddr("glVertexAttribDivisorNV"))
	gpVertexAttribFormat = uintptr(getProcAddr("glVertexAttribFormat"))
	if gpVertexAttribFormat == 0 {
		return errors.New("glVertexAttribFormat")
	}
	gpVertexAttribI4i = uintptr(getProcAddr("glVertexAttribI4i"))
	if gpVertexAttribI4i == 0 {
		return errors.New("glVertexAttribI4i")
	}
	gpVertexAttribI4iv = uintptr(getProcAddr("glVertexAttribI4iv"))
	if gpVertexAttribI4iv == 0 {
		return errors.New("glVertexAttribI4iv")
	}
	gpVertexAttribI4ui = uintptr(getProcAddr("glVertexAttribI4ui"))
	if gpVertexAttribI4ui == 0 {
		return errors.New("glVertexAttribI4ui")
	}
	gpVertexAttribI4uiv = uintptr(getProcAddr("glVertexAttribI4uiv"))
	if gpVertexAttribI4uiv == 0 {
		return errors.New("glVertexAttribI4uiv")
	}
	gpVertexAttribIFormat = uintptr(getProcAddr("glVertexAttribIFormat"))
	if gpVertexAttribIFormat == 0 {
		return errors.New("glVertexAttribIFormat")
	}
	gpVertexAttribIPointer = uintptr(getProcAddr("glVertexAttribIPointer"))
	if gpVertexAttribIPointer == 0 {
		return errors.New("glVertexAttribIPointer")
	}
	gpVertexAttribPointer = uintptr(getProcAddr("glVertexAttribPointer"))
	if gpVertexAttribPointer == 0 {
		return errors.New("glVertexAttribPointer")
	}
	gpVertexBindingDivisor = uintptr(getProcAddr("glVertexBindingDivisor"))
	if gpVertexBindingDivisor == 0 {
		return errors.New("glVertexBindingDivisor")
	}
	gpViewport = uintptr(getProcAddr("glViewport"))
	if gpViewport == 0 {
		return errors.New("glViewport")
	}
	gpViewportArrayvNV = uintptr(getProcAddr("glViewportArrayvNV"))
	gpViewportArrayvOES = uintptr(getProcAddr("glViewportArrayvOES"))
	gpViewportIndexedfNV = uintptr(getProcAddr("glViewportIndexedfNV"))
	gpViewportIndexedfOES = uintptr(getProcAddr("glViewportIndexedfOES"))
	gpViewportIndexedfvNV = uintptr(getProcAddr("glViewportIndexedfvNV"))
	gpViewportIndexedfvOES = uintptr(getProcAddr("glViewportIndexedfvOES"))
	gpViewportPositionWScaleNV = uintptr(getProcAddr("glViewportPositionWScaleNV"))
	gpViewportSwizzleNV = uintptr(getProcAddr("glViewportSwizzleNV"))
	gpWaitSemaphoreEXT = uintptr(getProcAddr("glWaitSemaphoreEXT"))
	gpWaitSync = uintptr(getProcAddr("glWaitSync"))
	if gpWaitSync == 0 {
		return errors.New("glWaitSync")
	}
	gpWaitSyncAPPLE = uintptr(getProcAddr("glWaitSyncAPPLE"))
	gpWaitVkSemaphoreNV = uintptr(getProcAddr("glWaitVkSemaphoreNV"))
	gpWeightPathsNV = uintptr(getProcAddr("glWeightPathsNV"))
	gpWindowRectanglesEXT = uintptr(getProcAddr("glWindowRectanglesEXT"))
	return nil
}
